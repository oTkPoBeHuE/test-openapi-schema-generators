/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.19
 */
import type {
  ApiResponse,
  DeletePetHeaders,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  GetInventory200,
  LoginUserParams,
  Order,
  Pet,
  UpdatePetWithFormParams,
  UploadFileParams,
  User
} from './schema.schemas'

/**
 * Update an existing pet by Id
 * @summary Update an existing pet
 */
export type updatePetResponse = {
  data: Pet;
  status: number;
  headers: Headers;
}

export const getUpdatePetUrl = () => {


  return `/pet`
}

export const updatePet = async (pet: Pet, options?: RequestInit): Promise<updatePetResponse> => {
  
  const res = await fetch(getUpdatePetUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pet,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Add a new pet to the store
 * @summary Add a new pet to the store
 */
export type addPetResponse = {
  data: Pet;
  status: number;
  headers: Headers;
}

export const getAddPetUrl = () => {


  return `/pet`
}

export const addPet = async (pet: Pet, options?: RequestInit): Promise<addPetResponse> => {
  
  const res = await fetch(getAddPetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pet,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Multiple status values can be provided with comma separated strings
 * @summary Finds Pets by status
 */
export type findPetsByStatusResponse = {
  data: Pet[];
  status: number;
  headers: Headers;
}

export const getFindPetsByStatusUrl = (params?: FindPetsByStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["status"];
      
    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    
  });

  return normalizedParams.size ? `/pet/findByStatus?${normalizedParams.toString()}` : `/pet/findByStatus`
}

export const findPetsByStatus = async (params?: FindPetsByStatusParams, options?: RequestInit): Promise<findPetsByStatusResponse> => {
  
  const res = await fetch(getFindPetsByStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags
 */
export type findPetsByTagsResponse = {
  data: Pet[];
  status: number;
  headers: Headers;
}

export const getFindPetsByTagsUrl = (params?: FindPetsByTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["tags"];
      
    if (value instanceof Array && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    
  });

  return normalizedParams.size ? `/pet/findByTags?${normalizedParams.toString()}` : `/pet/findByTags`
}

export const findPetsByTags = async (params?: FindPetsByTagsParams, options?: RequestInit): Promise<findPetsByTagsResponse> => {
  
  const res = await fetch(getFindPetsByTagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Returns a single pet
 * @summary Find pet by ID
 */
export type getPetByIdResponse = {
  data: Pet;
  status: number;
  headers: Headers;
}

export const getGetPetByIdUrl = (petId: number,) => {


  return `/pet/${petId}`
}

export const getPetById = async (petId: number, options?: RequestInit): Promise<getPetByIdResponse> => {
  
  const res = await fetch(getGetPetByIdUrl(petId),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary Updates a pet in the store with form data
 */
export type updatePetWithFormResponse = {
  data: unknown;
  status: number;
  headers: Headers;
}

export const getUpdatePetWithFormUrl = (petId: number,
    params?: UpdatePetWithFormParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/pet/${petId}?${normalizedParams.toString()}` : `/pet/${petId}`
}

export const updatePetWithForm = async (petId: number,
    params?: UpdatePetWithFormParams, options?: RequestInit): Promise<updatePetWithFormResponse> => {
  
  const res = await fetch(getUpdatePetWithFormUrl(petId,params),
  {      
    ...options,
    method: 'POST'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary Deletes a pet
 */
export type deletePetResponse = {
  data: unknown;
  status: number;
  headers: Headers;
}

export const getDeletePetUrl = (petId: number,) => {


  return `/pet/${petId}`
}

export const deletePet = async (petId: number,
    headers?: DeletePetHeaders, options?: RequestInit): Promise<deletePetResponse> => {
  
  const res = await fetch(getDeletePetUrl(petId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary uploads an image
 */
export type uploadFileResponse = {
  data: ApiResponse;
  status: number;
  headers: Headers;
}

export const getUploadFileUrl = (petId: number,
    params?: UploadFileParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/pet/${petId}/uploadImage?${normalizedParams.toString()}` : `/pet/${petId}/uploadImage`
}

export const uploadFile = async (petId: number,
    uploadFileBody: Blob,
    params?: UploadFileParams, options?: RequestInit): Promise<uploadFileResponse> => {
  
  const res = await fetch(getUploadFileUrl(petId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/octet-stream', ...options?.headers },
    body: JSON.stringify(
      uploadFileBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Returns a map of status codes to quantities
 * @summary Returns pet inventories by status
 */
export type getInventoryResponse = {
  data: GetInventory200;
  status: number;
  headers: Headers;
}

export const getGetInventoryUrl = () => {


  return `/store/inventory`
}

export const getInventory = async ( options?: RequestInit): Promise<getInventoryResponse> => {
  
  const res = await fetch(getGetInventoryUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Place a new order in the store
 * @summary Place an order for a pet
 */
export type placeOrderResponse = {
  data: Order;
  status: number;
  headers: Headers;
}

export const getPlaceOrderUrl = () => {


  return `/store/order`
}

export const placeOrder = async (order: Order, options?: RequestInit): Promise<placeOrderResponse> => {
  
  const res = await fetch(getPlaceOrderUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      order,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID
 */
export type getOrderByIdResponse = {
  data: Order;
  status: number;
  headers: Headers;
}

export const getGetOrderByIdUrl = (orderId: number,) => {


  return `/store/order/${orderId}`
}

export const getOrderById = async (orderId: number, options?: RequestInit): Promise<getOrderByIdResponse> => {
  
  const res = await fetch(getGetOrderByIdUrl(orderId),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
 * @summary Delete purchase order by ID
 */
export type deleteOrderResponse = {
  data: unknown;
  status: number;
  headers: Headers;
}

export const getDeleteOrderUrl = (orderId: number,) => {


  return `/store/order/${orderId}`
}

export const deleteOrder = async (orderId: number, options?: RequestInit): Promise<deleteOrderResponse> => {
  
  const res = await fetch(getDeleteOrderUrl(orderId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * This can only be done by the logged in user.
 * @summary Create user
 */
export type createUserResponse = {
  data: User;
  status: number;
  headers: Headers;
}

export const getCreateUserUrl = () => {


  return `/user`
}

export const createUser = async (user: User, options?: RequestInit): Promise<createUserResponse> => {
  
  const res = await fetch(getCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * Creates list of users with given input array
 * @summary Creates list of users with given input array
 */
export type createUsersWithListInputResponse = {
  data: User;
  status: number;
  headers: Headers;
}

export const getCreateUsersWithListInputUrl = () => {


  return `/user/createWithList`
}

export const createUsersWithListInput = async (user: User[], options?: RequestInit): Promise<createUsersWithListInputResponse> => {
  
  const res = await fetch(getCreateUsersWithListInputUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary Logs user into the system
 */
export type loginUserResponse = {
  data: string;
  status: number;
  headers: Headers;
}

export const getLoginUserUrl = (params?: LoginUserParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/user/login?${normalizedParams.toString()}` : `/user/login`
}

export const loginUser = async (params?: LoginUserParams, options?: RequestInit): Promise<loginUserResponse> => {
  
  const res = await fetch(getLoginUserUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary Logs out current logged in user session
 */
export type logoutUserResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getLogoutUserUrl = () => {


  return `/user/logout`
}

export const logoutUser = async ( options?: RequestInit): Promise<logoutUserResponse> => {
  
  const res = await fetch(getLogoutUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary Get user by user name
 */
export type getUserByNameResponse = {
  data: User;
  status: number;
  headers: Headers;
}

export const getGetUserByNameUrl = (username: string,) => {


  return `/user/${username}`
}

export const getUserByName = async (username: string, options?: RequestInit): Promise<getUserByNameResponse> => {
  
  const res = await fetch(getGetUserByNameUrl(username),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * This can only be done by the logged in user.
 * @summary Update user
 */
export type updateUserResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getUpdateUserUrl = (username: string,) => {


  return `/user/${username}`
}

export const updateUser = async (username: string,
    user: User, options?: RequestInit): Promise<updateUserResponse> => {
  
  const res = await fetch(getUpdateUserUrl(username),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      user,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * This can only be done by the logged in user.
 * @summary Delete user
 */
export type deleteUserResponse = {
  data: unknown;
  status: number;
  headers: Headers;
}

export const getDeleteUserUrl = (username: string,) => {


  return `/user/${username}`
}

export const deleteUser = async (username: string, options?: RequestInit): Promise<deleteUserResponse> => {
  
  const res = await fetch(getDeleteUserUrl(username),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



