/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetPamAssets200One
} from '../../model/getPamAssets200One'
import type {
  GetPamAssets401One
} from '../../model/getPamAssets401One'
import type {
  GetPamAssets403One
} from '../../model/getPamAssets403One'
import type {
  GetPamAssets406One
} from '../../model/getPamAssets406One'
import type {
  GetPamAssetsCode200
} from '../../model/getPamAssetsCode200'
import type {
  GetPamAssetsCode401One
} from '../../model/getPamAssetsCode401One'
import type {
  GetPamAssetsCode403One
} from '../../model/getPamAssetsCode403One'
import type {
  GetPamAssetsCode404One
} from '../../model/getPamAssetsCode404One'
import type {
  GetPamAssetsCode406One
} from '../../model/getPamAssetsCode406One'
import type {
  GetPamAssetsParams
} from '../../model/getPamAssetsParams'
import type {
  PatchPamAssets200One
} from '../../model/patchPamAssets200One'
import type {
  PatchPamAssets401One
} from '../../model/patchPamAssets401One'
import type {
  PatchPamAssets403One
} from '../../model/patchPamAssets403One'
import type {
  PatchPamAssets413One
} from '../../model/patchPamAssets413One'
import type {
  PatchPamAssets415One
} from '../../model/patchPamAssets415One'
import type {
  PatchPamAssetsBody
} from '../../model/patchPamAssetsBody'
import type {
  PatchPamAssetsCode400One
} from '../../model/patchPamAssetsCode400One'
import type {
  PatchPamAssetsCode401One
} from '../../model/patchPamAssetsCode401One'
import type {
  PatchPamAssetsCode403One
} from '../../model/patchPamAssetsCode403One'
import type {
  PatchPamAssetsCode415One
} from '../../model/patchPamAssetsCode415One'
import type {
  PatchPamAssetsCode422One
} from '../../model/patchPamAssetsCode422One'
import type {
  PatchPamAssetsCodeBody
} from '../../model/patchPamAssetsCodeBody'
import type {
  PostPamAssets400One
} from '../../model/postPamAssets400One'
import type {
  PostPamAssets401One
} from '../../model/postPamAssets401One'
import type {
  PostPamAssets403One
} from '../../model/postPamAssets403One'
import type {
  PostPamAssets415One
} from '../../model/postPamAssets415One'
import type {
  PostPamAssets422One
} from '../../model/postPamAssets422One'
import type {
  PostPamAssetsBody
} from '../../model/postPamAssetsBody'



/**
 * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
 * @summary Get list of PAM assets
 */
export const getPamAssets = (
    params?: GetPamAssetsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPamAssets200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/assets`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetPamAssetsQueryKey = (params?: GetPamAssetsParams,) => {
    return [`/api/rest/v1/assets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPamAssetsQueryOptions = <TData = Awaited<ReturnType<typeof getPamAssets>>, TError = AxiosError<GetPamAssets401One | GetPamAssets403One | GetPamAssets406One>>(params?: GetPamAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssets>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPamAssetsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPamAssets>>> = ({ signal }) => getPamAssets(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPamAssets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPamAssetsQueryResult = NonNullable<Awaited<ReturnType<typeof getPamAssets>>>
export type GetPamAssetsQueryError = AxiosError<GetPamAssets401One | GetPamAssets403One | GetPamAssets406One>


export function useGetPamAssets<TData = Awaited<ReturnType<typeof getPamAssets>>, TError = AxiosError<GetPamAssets401One | GetPamAssets403One | GetPamAssets406One>>(
 params: undefined |  GetPamAssetsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPamAssets>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPamAssets<TData = Awaited<ReturnType<typeof getPamAssets>>, TError = AxiosError<GetPamAssets401One | GetPamAssets403One | GetPamAssets406One>>(
 params?: GetPamAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPamAssets>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPamAssets<TData = Awaited<ReturnType<typeof getPamAssets>>, TError = AxiosError<GetPamAssets401One | GetPamAssets403One | GetPamAssets406One>>(
 params?: GetPamAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssets>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of PAM assets
 */

export function useGetPamAssets<TData = Awaited<ReturnType<typeof getPamAssets>>, TError = AxiosError<GetPamAssets401One | GetPamAssets403One | GetPamAssets406One>>(
 params?: GetPamAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssets>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPamAssetsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update several PAM assets at once.
 * @summary Update/create several PAM assets
 */
export const patchPamAssets = (
    patchPamAssetsBody: PatchPamAssetsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchPamAssets200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/assets`,
      patchPamAssetsBody,options
    );
  }



export const getPatchPamAssetsMutationOptions = <TError = AxiosError<PatchPamAssets401One | PatchPamAssets403One | PatchPamAssets413One | PatchPamAssets415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPamAssets>>, TError,{data: PatchPamAssetsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchPamAssets>>, TError,{data: PatchPamAssetsBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchPamAssets>>, {data: PatchPamAssetsBody}> = (props) => {
          const {data} = props ?? {};

          return  patchPamAssets(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchPamAssetsMutationResult = NonNullable<Awaited<ReturnType<typeof patchPamAssets>>>
    export type PatchPamAssetsMutationBody = PatchPamAssetsBody
    export type PatchPamAssetsMutationError = AxiosError<PatchPamAssets401One | PatchPamAssets403One | PatchPamAssets413One | PatchPamAssets415One>

    /**
 * @summary Update/create several PAM assets
 */
export const usePatchPamAssets = <TError = AxiosError<PatchPamAssets401One | PatchPamAssets403One | PatchPamAssets413One | PatchPamAssets415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPamAssets>>, TError,{data: PatchPamAssetsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchPamAssets>>,
        TError,
        {data: PatchPamAssetsBody},
        TContext
      > => {

      const mutationOptions = getPatchPamAssetsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new PAM asset.
 * @summary Create a new PAM asset
 */
export const postPamAssets = (
    postPamAssetsBody: PostPamAssetsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/assets`,
      postPamAssetsBody,options
    );
  }



export const getPostPamAssetsMutationOptions = <TError = AxiosError<PostPamAssets400One | PostPamAssets401One | PostPamAssets403One | PostPamAssets415One | PostPamAssets422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPamAssets>>, TError,{data: PostPamAssetsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postPamAssets>>, TError,{data: PostPamAssetsBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPamAssets>>, {data: PostPamAssetsBody}> = (props) => {
          const {data} = props ?? {};

          return  postPamAssets(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPamAssetsMutationResult = NonNullable<Awaited<ReturnType<typeof postPamAssets>>>
    export type PostPamAssetsMutationBody = PostPamAssetsBody
    export type PostPamAssetsMutationError = AxiosError<PostPamAssets400One | PostPamAssets401One | PostPamAssets403One | PostPamAssets415One | PostPamAssets422One>

    /**
 * @summary Create a new PAM asset
 */
export const usePostPamAssets = <TError = AxiosError<PostPamAssets400One | PostPamAssets401One | PostPamAssets403One | PostPamAssets415One | PostPamAssets422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPamAssets>>, TError,{data: PostPamAssetsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postPamAssets>>,
        TError,
        {data: PostPamAssetsBody},
        TContext
      > => {

      const mutationOptions = getPostPamAssetsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given PAM asset.
 * @summary Get a PAM asset
 */
export const getPamAssetsCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetPamAssetsCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/assets/${code}`,options
    );
  }


export const getGetPamAssetsCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/assets/${code}`] as const;
    }

    
export const getGetPamAssetsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getPamAssetsCode>>, TError = AxiosError<GetPamAssetsCode401One | GetPamAssetsCode403One | GetPamAssetsCode404One | GetPamAssetsCode406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssetsCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPamAssetsCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPamAssetsCode>>> = ({ signal }) => getPamAssetsCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPamAssetsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPamAssetsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getPamAssetsCode>>>
export type GetPamAssetsCodeQueryError = AxiosError<GetPamAssetsCode401One | GetPamAssetsCode403One | GetPamAssetsCode404One | GetPamAssetsCode406One>


export function useGetPamAssetsCode<TData = Awaited<ReturnType<typeof getPamAssetsCode>>, TError = AxiosError<GetPamAssetsCode401One | GetPamAssetsCode403One | GetPamAssetsCode404One | GetPamAssetsCode406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssetsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPamAssetsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPamAssetsCode<TData = Awaited<ReturnType<typeof getPamAssetsCode>>, TError = AxiosError<GetPamAssetsCode401One | GetPamAssetsCode403One | GetPamAssetsCode404One | GetPamAssetsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssetsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPamAssetsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPamAssetsCode<TData = Awaited<ReturnType<typeof getPamAssetsCode>>, TError = AxiosError<GetPamAssetsCode401One | GetPamAssetsCode403One | GetPamAssetsCode404One | GetPamAssetsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssetsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a PAM asset
 */

export function useGetPamAssetsCode<TData = Awaited<ReturnType<typeof getPamAssetsCode>>, TError = AxiosError<GetPamAssetsCode401One | GetPamAssetsCode403One | GetPamAssetsCode404One | GetPamAssetsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPamAssetsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPamAssetsCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given PAM asset. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
 * @summary Update/create a PAM asset
 */
export const patchPamAssetsCode = (
    code: string,
    patchPamAssetsCodeBody: PatchPamAssetsCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/assets/${code}`,
      patchPamAssetsCodeBody,options
    );
  }



export const getPatchPamAssetsCodeMutationOptions = <TError = AxiosError<PatchPamAssetsCode400One | PatchPamAssetsCode401One | PatchPamAssetsCode403One | PatchPamAssetsCode415One | PatchPamAssetsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPamAssetsCode>>, TError,{code: string;data: PatchPamAssetsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchPamAssetsCode>>, TError,{code: string;data: PatchPamAssetsCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchPamAssetsCode>>, {code: string;data: PatchPamAssetsCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchPamAssetsCode(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchPamAssetsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchPamAssetsCode>>>
    export type PatchPamAssetsCodeMutationBody = PatchPamAssetsCodeBody
    export type PatchPamAssetsCodeMutationError = AxiosError<PatchPamAssetsCode400One | PatchPamAssetsCode401One | PatchPamAssetsCode403One | PatchPamAssetsCode415One | PatchPamAssetsCode422One>

    /**
 * @summary Update/create a PAM asset
 */
export const usePatchPamAssetsCode = <TError = AxiosError<PatchPamAssetsCode400One | PatchPamAssetsCode401One | PatchPamAssetsCode403One | PatchPamAssetsCode415One | PatchPamAssetsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchPamAssetsCode>>, TError,{code: string;data: PatchPamAssetsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchPamAssetsCode>>,
        TError,
        {code: string;data: PatchPamAssetsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchPamAssetsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    