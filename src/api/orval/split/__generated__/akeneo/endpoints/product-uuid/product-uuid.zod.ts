/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  z as zod
} from 'zod'

/**
 * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
 * @summary Get list of products
 */
export const getProductsUuidQueryLimitMax = 100;


export const getProductsUuidQueryParams = zod.object({
  "search": zod.string().optional(),
  "scope": zod.string().optional(),
  "locales": zod.string().optional(),
  "attributes": zod.string().optional(),
  "pagination_type": zod.enum(['page', 'search_after']).optional(),
  "page": zod.number().optional(),
  "search_after": zod.string().optional(),
  "limit": zod.number().min(1).max(getProductsUuidQueryLimitMax).optional(),
  "with_count": zod.boolean().optional(),
  "with_attribute_options": zod.boolean().optional(),
  "with_quality_scores": zod.boolean().optional(),
  "with_completenesses": zod.boolean().optional()
})

export const getProductsUuidResponse = zod.object({
  "_links": zod.object({
  "first": zod.object({
  "href": zod.string().optional()
}).optional(),
  "next": zod.object({
  "href": zod.string().optional()
}).optional(),
  "previous": zod.object({
  "href": zod.string().optional()
}).optional(),
  "self": zod.object({
  "href": zod.string().optional()
}).optional()
}).optional(),
  "current_page": zod.number().optional()
}).and(zod.object({
  "_embedded": zod.object({
  "items": zod.array(zod.object({
  "_links": zod.object({
  "self": zod.object({
  "href": zod.string().optional()
}).optional()
}).optional()
}).and(zod.object({
  "associations": zod.object({
  "associationTypeCode": zod.object({
  "groups": zod.array(zod.string()).optional(),
  "product_models": zod.array(zod.string()).optional(),
  "products": zod.array(zod.string()).optional()
}).optional()
}).optional(),
  "categories": zod.array(zod.string()).optional(),
  "completenesses": zod.array(zod.object({
  "data": zod.number().optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional(),
  "created": zod.string().optional(),
  "enabled": zod.boolean().optional(),
  "family": zod.string().optional(),
  "groups": zod.array(zod.string()).optional(),
  "metadata": zod.object({
  "workflow_status": zod.enum(['read_only', 'draft_in_progress', 'proposal_waiting_for_approval', 'working_copy']).optional()
}).optional(),
  "parent": zod.string().optional(),
  "quality_scores": zod.object({

}).optional(),
  "quantified_associations": zod.object({
  "quantifiedAssociationTypeCode": zod.object({
  "product_models": zod.array(zod.object({
  "code": zod.string().optional(),
  "quantity": zod.number().optional()
})).optional(),
  "products": zod.array(zod.object({
  "quantity": zod.number().optional(),
  "uuid": zod.string().optional()
})).optional()
}).optional()
}).optional(),
  "updated": zod.string().optional(),
  "uuid": zod.string().optional(),
  "values": zod.object({
  "attributeCode": zod.array(zod.object({
  "data": zod.object({

}).optional(),
  "linked_data": zod.object({
  "attribute": zod.string().optional(),
  "code": zod.string().optional(),
  "labels": zod.object({

}).optional()
}).optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional()
}).optional()
}))).optional()
}).optional()
}))

/**
 * This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
 * @summary Update/create several products
 */
export const patchProductsUuidBody = zod.object({
  "associations": zod.object({
  "associationTypeCode": zod.object({
  "groups": zod.array(zod.string()).optional(),
  "product_models": zod.array(zod.string()).optional(),
  "products": zod.array(zod.string()).optional()
}).optional()
}).optional(),
  "categories": zod.array(zod.string()).optional(),
  "completenesses": zod.array(zod.object({
  "data": zod.number().optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional(),
  "created": zod.string().optional(),
  "enabled": zod.boolean().optional(),
  "family": zod.string().optional(),
  "groups": zod.array(zod.string()).optional(),
  "metadata": zod.object({
  "workflow_status": zod.enum(['read_only', 'draft_in_progress', 'proposal_waiting_for_approval', 'working_copy']).optional()
}).optional(),
  "parent": zod.string().optional(),
  "quality_scores": zod.object({

}).optional(),
  "quantified_associations": zod.object({
  "quantifiedAssociationTypeCode": zod.object({
  "product_models": zod.array(zod.object({
  "code": zod.string().optional(),
  "quantity": zod.number().optional()
})).optional(),
  "products": zod.array(zod.object({
  "quantity": zod.number().optional(),
  "uuid": zod.string().optional()
})).optional()
}).optional()
}).optional(),
  "updated": zod.string().optional(),
  "uuid": zod.string(),
  "values": zod.object({
  "attributeCode": zod.array(zod.object({
  "data": zod.object({

}).optional(),
  "linked_data": zod.object({
  "attribute": zod.string().optional(),
  "code": zod.string().optional(),
  "labels": zod.object({

}).optional()
}).optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional()
}).optional()
})

export const patchProductsUuidResponse = zod.object({
  "line": zod.number().optional(),
  "message": zod.string().optional(),
  "status_code": zod.number().optional(),
  "uuid": zod.string().optional()
})

/**
 * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
 * @summary Create a new product
 */
export const postProductsUuidBody = zod.object({
  "associations": zod.object({
  "associationTypeCode": zod.object({
  "groups": zod.array(zod.string()).optional(),
  "product_models": zod.array(zod.string()).optional(),
  "products": zod.array(zod.string()).optional()
}).optional()
}).optional(),
  "categories": zod.array(zod.string()).optional(),
  "completenesses": zod.array(zod.object({
  "data": zod.number().optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional(),
  "created": zod.string().optional(),
  "enabled": zod.boolean().optional(),
  "family": zod.string().optional(),
  "groups": zod.array(zod.string()).optional(),
  "metadata": zod.object({
  "workflow_status": zod.enum(['read_only', 'draft_in_progress', 'proposal_waiting_for_approval', 'working_copy']).optional()
}).optional(),
  "parent": zod.string().optional(),
  "quality_scores": zod.object({

}).optional(),
  "quantified_associations": zod.object({
  "quantifiedAssociationTypeCode": zod.object({
  "product_models": zod.array(zod.object({
  "code": zod.string().optional(),
  "quantity": zod.number().optional()
})).optional(),
  "products": zod.array(zod.object({
  "quantity": zod.number().optional(),
  "uuid": zod.string().optional()
})).optional()
}).optional()
}).optional(),
  "updated": zod.string().optional(),
  "uuid": zod.string().optional(),
  "values": zod.object({
  "attributeCode": zod.array(zod.object({
  "data": zod.object({

}).optional(),
  "linked_data": zod.object({
  "attribute": zod.string().optional(),
  "code": zod.string().optional(),
  "labels": zod.object({

}).optional()
}).optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional()
}).optional()
})

/**
 * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
 * @summary Delete a product
 */
export const deleteProductsUuidUuidParams = zod.object({
  "uuid": zod.string()
})

/**
 * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
 * @summary Get a product
 */
export const getProductsUuidUuidParams = zod.object({
  "uuid": zod.string()
})

export const getProductsUuidUuidQueryParams = zod.object({
  "with_attribute_options": zod.boolean().optional(),
  "with_quality_scores": zod.boolean().optional(),
  "with_completenesses": zod.boolean().optional()
})

export const getProductsUuidUuidResponse = zod.object({
  "associations": zod.object({
  "associationTypeCode": zod.object({
  "groups": zod.array(zod.string()).optional(),
  "product_models": zod.array(zod.string()).optional(),
  "products": zod.array(zod.string()).optional()
}).optional()
}).optional(),
  "categories": zod.array(zod.string()).optional(),
  "completenesses": zod.array(zod.object({
  "data": zod.number().optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional(),
  "created": zod.string().optional(),
  "enabled": zod.boolean().optional(),
  "family": zod.string().optional(),
  "groups": zod.array(zod.string()).optional(),
  "metadata": zod.object({
  "workflow_status": zod.enum(['read_only', 'draft_in_progress', 'proposal_waiting_for_approval', 'working_copy']).optional()
}).optional(),
  "parent": zod.string().optional(),
  "quality_scores": zod.object({

}).optional(),
  "quantified_associations": zod.object({
  "quantifiedAssociationTypeCode": zod.object({
  "product_models": zod.array(zod.object({
  "code": zod.string().optional(),
  "quantity": zod.number().optional()
})).optional(),
  "products": zod.array(zod.object({
  "quantity": zod.number().optional(),
  "uuid": zod.string().optional()
})).optional()
}).optional()
}).optional(),
  "updated": zod.string().optional(),
  "uuid": zod.string().optional(),
  "values": zod.object({
  "attributeCode": zod.array(zod.object({
  "data": zod.object({

}).optional(),
  "linked_data": zod.object({
  "attribute": zod.string().optional(),
  "code": zod.string().optional(),
  "labels": zod.object({

}).optional()
}).optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional()
}).optional()
})

/**
 * This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
 * @summary Update/create a product
 */
export const patchProductsUuidUuidParams = zod.object({
  "uuid": zod.string()
})

export const patchProductsUuidUuidBody = zod.object({
  "associations": zod.object({
  "associationTypeCode": zod.object({
  "groups": zod.array(zod.string()).optional(),
  "product_models": zod.array(zod.string()).optional(),
  "products": zod.array(zod.string()).optional()
}).optional()
}).optional(),
  "categories": zod.array(zod.string()).optional(),
  "completenesses": zod.array(zod.object({
  "data": zod.number().optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional(),
  "created": zod.string().optional(),
  "enabled": zod.boolean().optional(),
  "family": zod.string().optional(),
  "groups": zod.array(zod.string()).optional(),
  "metadata": zod.object({
  "workflow_status": zod.enum(['read_only', 'draft_in_progress', 'proposal_waiting_for_approval', 'working_copy']).optional()
}).optional(),
  "parent": zod.string().optional(),
  "quality_scores": zod.object({

}).optional(),
  "quantified_associations": zod.object({
  "quantifiedAssociationTypeCode": zod.object({
  "product_models": zod.array(zod.object({
  "code": zod.string().optional(),
  "quantity": zod.number().optional()
})).optional(),
  "products": zod.array(zod.object({
  "quantity": zod.number().optional(),
  "uuid": zod.string().optional()
})).optional()
}).optional()
}).optional(),
  "updated": zod.string().optional(),
  "uuid": zod.string().optional(),
  "values": zod.object({
  "attributeCode": zod.array(zod.object({
  "data": zod.object({

}).optional(),
  "linked_data": zod.object({
  "attribute": zod.string().optional(),
  "code": zod.string().optional(),
  "labels": zod.object({

}).optional()
}).optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional()
}).optional()
})

/**
 * This endpoint allows you to get the information about a given draft.
 * @summary Get a draft
 */
export const getDraftUuidUuidParams = zod.object({
  "uuid": zod.string()
})

export const getDraftUuidUuidResponse = zod.object({
  "associations": zod.object({
  "associationTypeCode": zod.object({
  "groups": zod.array(zod.string()).optional(),
  "product_models": zod.array(zod.string()).optional(),
  "products": zod.array(zod.string()).optional()
}).optional()
}).optional(),
  "categories": zod.array(zod.string()).optional(),
  "completenesses": zod.array(zod.object({
  "data": zod.number().optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional(),
  "created": zod.string().optional(),
  "enabled": zod.boolean().optional(),
  "family": zod.string().optional(),
  "groups": zod.array(zod.string()).optional(),
  "metadata": zod.object({
  "workflow_status": zod.enum(['read_only', 'draft_in_progress', 'proposal_waiting_for_approval', 'working_copy']).optional()
}).optional(),
  "parent": zod.string().optional(),
  "quality_scores": zod.object({

}).optional(),
  "quantified_associations": zod.object({
  "quantifiedAssociationTypeCode": zod.object({
  "product_models": zod.array(zod.object({
  "code": zod.string().optional(),
  "quantity": zod.number().optional()
})).optional(),
  "products": zod.array(zod.object({
  "quantity": zod.number().optional(),
  "uuid": zod.string().optional()
})).optional()
}).optional()
}).optional(),
  "updated": zod.string().optional(),
  "uuid": zod.string().optional(),
  "values": zod.object({
  "attributeCode": zod.array(zod.object({
  "data": zod.object({

}).optional(),
  "linked_data": zod.object({
  "attribute": zod.string().optional(),
  "code": zod.string().optional(),
  "labels": zod.object({

}).optional()
}).optional(),
  "locale": zod.string().optional(),
  "scope": zod.string().optional()
})).optional()
}).optional()
})

/**
 * This endpoint allows you to submit a draft for approval.
 * @summary Submit a draft for approval
 */
export const postProposalUuidParams = zod.object({
  "uuid": zod.string()
})

