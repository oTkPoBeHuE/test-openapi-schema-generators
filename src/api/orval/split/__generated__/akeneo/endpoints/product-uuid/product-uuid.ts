/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  DeleteProductsUuidUuid401One
} from '../../model/deleteProductsUuidUuid401One'
import type {
  DeleteProductsUuidUuid403One
} from '../../model/deleteProductsUuidUuid403One'
import type {
  DeleteProductsUuidUuid404One
} from '../../model/deleteProductsUuidUuid404One'
import type {
  GetDraftUuidUuid200
} from '../../model/getDraftUuidUuid200'
import type {
  GetDraftUuidUuid401One
} from '../../model/getDraftUuidUuid401One'
import type {
  GetDraftUuidUuid403One
} from '../../model/getDraftUuidUuid403One'
import type {
  GetDraftUuidUuid404One
} from '../../model/getDraftUuidUuid404One'
import type {
  GetDraftUuidUuid406One
} from '../../model/getDraftUuidUuid406One'
import type {
  GetProductsUuid200
} from '../../model/getProductsUuid200'
import type {
  GetProductsUuid401One
} from '../../model/getProductsUuid401One'
import type {
  GetProductsUuid403One
} from '../../model/getProductsUuid403One'
import type {
  GetProductsUuid406One
} from '../../model/getProductsUuid406One'
import type {
  GetProductsUuid422One
} from '../../model/getProductsUuid422One'
import type {
  GetProductsUuidParams
} from '../../model/getProductsUuidParams'
import type {
  GetProductsUuidUuid200
} from '../../model/getProductsUuidUuid200'
import type {
  GetProductsUuidUuid401One
} from '../../model/getProductsUuidUuid401One'
import type {
  GetProductsUuidUuid403One
} from '../../model/getProductsUuidUuid403One'
import type {
  GetProductsUuidUuid404One
} from '../../model/getProductsUuidUuid404One'
import type {
  GetProductsUuidUuid406One
} from '../../model/getProductsUuidUuid406One'
import type {
  GetProductsUuidUuidParams
} from '../../model/getProductsUuidUuidParams'
import type {
  PatchProductsUuid200One
} from '../../model/patchProductsUuid200One'
import type {
  PatchProductsUuid401One
} from '../../model/patchProductsUuid401One'
import type {
  PatchProductsUuid403One
} from '../../model/patchProductsUuid403One'
import type {
  PatchProductsUuid413One
} from '../../model/patchProductsUuid413One'
import type {
  PatchProductsUuid415One
} from '../../model/patchProductsUuid415One'
import type {
  PatchProductsUuid422One
} from '../../model/patchProductsUuid422One'
import type {
  PatchProductsUuidBody
} from '../../model/patchProductsUuidBody'
import type {
  PatchProductsUuidUuid401One
} from '../../model/patchProductsUuidUuid401One'
import type {
  PatchProductsUuidUuid403One
} from '../../model/patchProductsUuidUuid403One'
import type {
  PatchProductsUuidUuid415One
} from '../../model/patchProductsUuidUuid415One'
import type {
  PatchProductsUuidUuid422One
} from '../../model/patchProductsUuidUuid422One'
import type {
  PatchProductsUuidUuidBody
} from '../../model/patchProductsUuidUuidBody'
import type {
  PostProductsUuid400One
} from '../../model/postProductsUuid400One'
import type {
  PostProductsUuid401One
} from '../../model/postProductsUuid401One'
import type {
  PostProductsUuid403One
} from '../../model/postProductsUuid403One'
import type {
  PostProductsUuid415One
} from '../../model/postProductsUuid415One'
import type {
  PostProductsUuid422One
} from '../../model/postProductsUuid422One'
import type {
  PostProductsUuidBody
} from '../../model/postProductsUuidBody'
import type {
  PostProposalUuid401One
} from '../../model/postProposalUuid401One'
import type {
  PostProposalUuid403One
} from '../../model/postProposalUuid403One'
import type {
  PostProposalUuid415One
} from '../../model/postProposalUuid415One'
import type {
  PostProposalUuid422One
} from '../../model/postProposalUuid422One'



/**
 * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
 * @summary Get list of products
 */
export const getProductsUuid = (
    params?: GetProductsUuidParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductsUuid200>> => {
    
    return axios.default.get(
      `/api/rest/v1/products-uuid`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetProductsUuidQueryKey = (params?: GetProductsUuidParams,) => {
    return [`/api/rest/v1/products-uuid`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsUuidQueryOptions = <TData = Awaited<ReturnType<typeof getProductsUuid>>, TError = AxiosError<GetProductsUuid401One | GetProductsUuid403One | GetProductsUuid406One | GetProductsUuid422One>>(params?: GetProductsUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuid>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsUuidQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsUuid>>> = ({ signal }) => getProductsUuid(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductsUuidQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsUuid>>>
export type GetProductsUuidQueryError = AxiosError<GetProductsUuid401One | GetProductsUuid403One | GetProductsUuid406One | GetProductsUuid422One>


export function useGetProductsUuid<TData = Awaited<ReturnType<typeof getProductsUuid>>, TError = AxiosError<GetProductsUuid401One | GetProductsUuid403One | GetProductsUuid406One | GetProductsUuid422One>>(
 params: undefined |  GetProductsUuidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsUuid>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsUuid<TData = Awaited<ReturnType<typeof getProductsUuid>>, TError = AxiosError<GetProductsUuid401One | GetProductsUuid403One | GetProductsUuid406One | GetProductsUuid422One>>(
 params?: GetProductsUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsUuid>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsUuid<TData = Awaited<ReturnType<typeof getProductsUuid>>, TError = AxiosError<GetProductsUuid401One | GetProductsUuid403One | GetProductsUuid406One | GetProductsUuid422One>>(
 params?: GetProductsUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of products
 */

export function useGetProductsUuid<TData = Awaited<ReturnType<typeof getProductsUuid>>, TError = AxiosError<GetProductsUuid401One | GetProductsUuid403One | GetProductsUuid406One | GetProductsUuid422One>>(
 params?: GetProductsUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductsUuidQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
 * @summary Update/create several products
 */
export const patchProductsUuid = (
    patchProductsUuidBody: PatchProductsUuidBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchProductsUuid200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/products-uuid`,
      patchProductsUuidBody,options
    );
  }



export const getPatchProductsUuidMutationOptions = <TError = AxiosError<PatchProductsUuid401One | PatchProductsUuid403One | PatchProductsUuid413One | PatchProductsUuid415One | PatchProductsUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductsUuid>>, TError,{data: PatchProductsUuidBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchProductsUuid>>, TError,{data: PatchProductsUuidBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchProductsUuid>>, {data: PatchProductsUuidBody}> = (props) => {
          const {data} = props ?? {};

          return  patchProductsUuid(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchProductsUuidMutationResult = NonNullable<Awaited<ReturnType<typeof patchProductsUuid>>>
    export type PatchProductsUuidMutationBody = PatchProductsUuidBody
    export type PatchProductsUuidMutationError = AxiosError<PatchProductsUuid401One | PatchProductsUuid403One | PatchProductsUuid413One | PatchProductsUuid415One | PatchProductsUuid422One>

    /**
 * @summary Update/create several products
 */
export const usePatchProductsUuid = <TError = AxiosError<PatchProductsUuid401One | PatchProductsUuid403One | PatchProductsUuid413One | PatchProductsUuid415One | PatchProductsUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductsUuid>>, TError,{data: PatchProductsUuidBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchProductsUuid>>,
        TError,
        {data: PatchProductsUuidBody},
        TContext
      > => {

      const mutationOptions = getPatchProductsUuidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
 * @summary Create a new product
 */
export const postProductsUuid = (
    postProductsUuidBody: PostProductsUuidBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/products-uuid`,
      postProductsUuidBody,options
    );
  }



export const getPostProductsUuidMutationOptions = <TError = AxiosError<PostProductsUuid400One | PostProductsUuid401One | PostProductsUuid403One | PostProductsUuid415One | PostProductsUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsUuid>>, TError,{data: PostProductsUuidBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postProductsUuid>>, TError,{data: PostProductsUuidBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductsUuid>>, {data: PostProductsUuidBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductsUuid(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductsUuidMutationResult = NonNullable<Awaited<ReturnType<typeof postProductsUuid>>>
    export type PostProductsUuidMutationBody = PostProductsUuidBody
    export type PostProductsUuidMutationError = AxiosError<PostProductsUuid400One | PostProductsUuid401One | PostProductsUuid403One | PostProductsUuid415One | PostProductsUuid422One>

    /**
 * @summary Create a new product
 */
export const usePostProductsUuid = <TError = AxiosError<PostProductsUuid400One | PostProductsUuid401One | PostProductsUuid403One | PostProductsUuid415One | PostProductsUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductsUuid>>, TError,{data: PostProductsUuidBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postProductsUuid>>,
        TError,
        {data: PostProductsUuidBody},
        TContext
      > => {

      const mutationOptions = getPostProductsUuidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
 * @summary Delete a product
 */
export const deleteProductsUuidUuid = (
    uuid: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/api/rest/v1/products-uuid/${uuid}`,options
    );
  }



export const getDeleteProductsUuidUuidMutationOptions = <TError = AxiosError<DeleteProductsUuidUuid401One | DeleteProductsUuidUuid403One | DeleteProductsUuidUuid404One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsUuidUuid>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductsUuidUuid>>, TError,{uuid: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductsUuidUuid>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  deleteProductsUuidUuid(uuid,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductsUuidUuidMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductsUuidUuid>>>
    
    export type DeleteProductsUuidUuidMutationError = AxiosError<DeleteProductsUuidUuid401One | DeleteProductsUuidUuid403One | DeleteProductsUuidUuid404One>

    /**
 * @summary Delete a product
 */
export const useDeleteProductsUuidUuid = <TError = AxiosError<DeleteProductsUuidUuid401One | DeleteProductsUuidUuid403One | DeleteProductsUuidUuid404One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductsUuidUuid>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductsUuidUuid>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductsUuidUuidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
 * @summary Get a product
 */
export const getProductsUuidUuid = (
    uuid: string,
    params?: GetProductsUuidUuidParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductsUuidUuid200>> => {
    
    return axios.default.get(
      `/api/rest/v1/products-uuid/${uuid}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetProductsUuidUuidQueryKey = (uuid: string,
    params?: GetProductsUuidUuidParams,) => {
    return [`/api/rest/v1/products-uuid/${uuid}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsUuidUuidQueryOptions = <TData = Awaited<ReturnType<typeof getProductsUuidUuid>>, TError = AxiosError<GetProductsUuidUuid401One | GetProductsUuidUuid403One | GetProductsUuidUuid404One | GetProductsUuidUuid406One>>(uuid: string,
    params?: GetProductsUuidUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuidUuid>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsUuidUuidQueryKey(uuid,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsUuidUuid>>> = ({ signal }) => getProductsUuidUuid(uuid,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(uuid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsUuidUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductsUuidUuidQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsUuidUuid>>>
export type GetProductsUuidUuidQueryError = AxiosError<GetProductsUuidUuid401One | GetProductsUuidUuid403One | GetProductsUuidUuid404One | GetProductsUuidUuid406One>


export function useGetProductsUuidUuid<TData = Awaited<ReturnType<typeof getProductsUuidUuid>>, TError = AxiosError<GetProductsUuidUuid401One | GetProductsUuidUuid403One | GetProductsUuidUuid404One | GetProductsUuidUuid406One>>(
 uuid: string,
    params: undefined |  GetProductsUuidUuidParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuidUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsUuidUuid>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsUuidUuid<TData = Awaited<ReturnType<typeof getProductsUuidUuid>>, TError = AxiosError<GetProductsUuidUuid401One | GetProductsUuidUuid403One | GetProductsUuidUuid404One | GetProductsUuidUuid406One>>(
 uuid: string,
    params?: GetProductsUuidUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuidUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsUuidUuid>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductsUuidUuid<TData = Awaited<ReturnType<typeof getProductsUuidUuid>>, TError = AxiosError<GetProductsUuidUuid401One | GetProductsUuidUuid403One | GetProductsUuidUuid404One | GetProductsUuidUuid406One>>(
 uuid: string,
    params?: GetProductsUuidUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuidUuid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a product
 */

export function useGetProductsUuidUuid<TData = Awaited<ReturnType<typeof getProductsUuidUuid>>, TError = AxiosError<GetProductsUuidUuid401One | GetProductsUuidUuid403One | GetProductsUuidUuid404One | GetProductsUuidUuid406One>>(
 uuid: string,
    params?: GetProductsUuidUuidParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsUuidUuid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductsUuidUuidQueryOptions(uuid,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
 * @summary Update/create a product
 */
export const patchProductsUuidUuid = (
    uuid: string,
    patchProductsUuidUuidBody: PatchProductsUuidUuidBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/products-uuid/${uuid}`,
      patchProductsUuidUuidBody,options
    );
  }



export const getPatchProductsUuidUuidMutationOptions = <TError = AxiosError<PatchProductsUuidUuid401One | PatchProductsUuidUuid403One | PatchProductsUuidUuid415One | PatchProductsUuidUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductsUuidUuid>>, TError,{uuid: string;data: PatchProductsUuidUuidBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchProductsUuidUuid>>, TError,{uuid: string;data: PatchProductsUuidUuidBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchProductsUuidUuid>>, {uuid: string;data: PatchProductsUuidUuidBody}> = (props) => {
          const {uuid,data} = props ?? {};

          return  patchProductsUuidUuid(uuid,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchProductsUuidUuidMutationResult = NonNullable<Awaited<ReturnType<typeof patchProductsUuidUuid>>>
    export type PatchProductsUuidUuidMutationBody = PatchProductsUuidUuidBody
    export type PatchProductsUuidUuidMutationError = AxiosError<PatchProductsUuidUuid401One | PatchProductsUuidUuid403One | PatchProductsUuidUuid415One | PatchProductsUuidUuid422One>

    /**
 * @summary Update/create a product
 */
export const usePatchProductsUuidUuid = <TError = AxiosError<PatchProductsUuidUuid401One | PatchProductsUuidUuid403One | PatchProductsUuidUuid415One | PatchProductsUuidUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductsUuidUuid>>, TError,{uuid: string;data: PatchProductsUuidUuidBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchProductsUuidUuid>>,
        TError,
        {uuid: string;data: PatchProductsUuidUuidBody},
        TContext
      > => {

      const mutationOptions = getPatchProductsUuidUuidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given draft.
 * @summary Get a draft
 */
export const getDraftUuidUuid = (
    uuid: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetDraftUuidUuid200>> => {
    
    return axios.default.get(
      `/api/rest/v1/products-uuid/${uuid}/draft`,options
    );
  }


export const getGetDraftUuidUuidQueryKey = (uuid: string,) => {
    return [`/api/rest/v1/products-uuid/${uuid}/draft`] as const;
    }

    
export const getGetDraftUuidUuidQueryOptions = <TData = Awaited<ReturnType<typeof getDraftUuidUuid>>, TError = AxiosError<GetDraftUuidUuid401One | GetDraftUuidUuid403One | GetDraftUuidUuid404One | GetDraftUuidUuid406One>>(uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftUuidUuid>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDraftUuidUuidQueryKey(uuid);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDraftUuidUuid>>> = ({ signal }) => getDraftUuidUuid(uuid, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(uuid), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDraftUuidUuid>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetDraftUuidUuidQueryResult = NonNullable<Awaited<ReturnType<typeof getDraftUuidUuid>>>
export type GetDraftUuidUuidQueryError = AxiosError<GetDraftUuidUuid401One | GetDraftUuidUuid403One | GetDraftUuidUuid404One | GetDraftUuidUuid406One>


export function useGetDraftUuidUuid<TData = Awaited<ReturnType<typeof getDraftUuidUuid>>, TError = AxiosError<GetDraftUuidUuid401One | GetDraftUuidUuid403One | GetDraftUuidUuid404One | GetDraftUuidUuid406One>>(
 uuid: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftUuidUuid>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDraftUuidUuid>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDraftUuidUuid<TData = Awaited<ReturnType<typeof getDraftUuidUuid>>, TError = AxiosError<GetDraftUuidUuid401One | GetDraftUuidUuid403One | GetDraftUuidUuid404One | GetDraftUuidUuid406One>>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftUuidUuid>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDraftUuidUuid>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetDraftUuidUuid<TData = Awaited<ReturnType<typeof getDraftUuidUuid>>, TError = AxiosError<GetDraftUuidUuid401One | GetDraftUuidUuid403One | GetDraftUuidUuid404One | GetDraftUuidUuid406One>>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftUuidUuid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a draft
 */

export function useGetDraftUuidUuid<TData = Awaited<ReturnType<typeof getDraftUuidUuid>>, TError = AxiosError<GetDraftUuidUuid401One | GetDraftUuidUuid403One | GetDraftUuidUuid404One | GetDraftUuidUuid406One>>(
 uuid: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDraftUuidUuid>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetDraftUuidUuidQueryOptions(uuid,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to submit a draft for approval.
 * @summary Submit a draft for approval
 */
export const postProposalUuid = (
    uuid: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/products-uuid/${uuid}/proposal`,undefined,options
    );
  }



export const getPostProposalUuidMutationOptions = <TError = AxiosError<PostProposalUuid401One | PostProposalUuid403One | PostProposalUuid415One | PostProposalUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProposalUuid>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postProposalUuid>>, TError,{uuid: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProposalUuid>>, {uuid: string}> = (props) => {
          const {uuid} = props ?? {};

          return  postProposalUuid(uuid,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProposalUuidMutationResult = NonNullable<Awaited<ReturnType<typeof postProposalUuid>>>
    
    export type PostProposalUuidMutationError = AxiosError<PostProposalUuid401One | PostProposalUuid403One | PostProposalUuid415One | PostProposalUuid422One>

    /**
 * @summary Submit a draft for approval
 */
export const usePostProposalUuid = <TError = AxiosError<PostProposalUuid401One | PostProposalUuid403One | PostProposalUuid415One | PostProposalUuid422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProposalUuid>>, TError,{uuid: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postProposalUuid>>,
        TError,
        {uuid: string},
        TContext
      > => {

      const mutationOptions = getPostProposalUuidMutationOptions(options);

      return useMutation(mutationOptions);
    }
    