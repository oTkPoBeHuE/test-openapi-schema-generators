/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSystemInformation200One
} from '../../model/getSystemInformation200One'
import type {
  GetSystemInformation406One
} from '../../model/getSystemInformation406One'



/**
 * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class="description-table"> <thead> <tr> <th align="center">Environment</th> <th align="center">Edition</th> <th align="center">Version</th> </tr> </thead> <tbody> <tr> <td align="center">SaaS EE</td> <td align="center">Serenity</td> <td align="center">v20230112013744</td> </tr> <tr> <td align="center">SaaS CE</td> <td align="center">GE</td> <td align="center">v20210526040645</td> </tr> <tr> <td align="center">PaaS or onPrem EE</td> <td align="center">EE</td> <td align="center">5.0.28</td> </tr> <tr> <td align="center">PaaS or onPrem CE</td> <td align="center">CE</td> <td align="center">5.0.28</td> </tr> </tbody> </table>
 * @summary Get system information
 */
export type getSystemInformationResponse = {
  data: GetSystemInformation200One;
  status: number;
  headers: Headers;
}

export const getGetSystemInformationUrl = () => {


  return `/api/rest/v1/system-information`
}

export const getSystemInformation = async ( options?: RequestInit): Promise<getSystemInformationResponse> => {
  
  const res = await fetch(getGetSystemInformationUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetSystemInformationQueryKey = () => {
    return [`/api/rest/v1/system-information`] as const;
    }

    
export const getGetSystemInformationQueryOptions = <TData = Awaited<ReturnType<typeof getSystemInformation>>, TError = GetSystemInformation406One>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemInformation>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemInformationQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemInformation>>> = ({ signal }) => getSystemInformation({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystemInformation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetSystemInformationQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemInformation>>>
export type GetSystemInformationQueryError = GetSystemInformation406One


export function useGetSystemInformation<TData = Awaited<ReturnType<typeof getSystemInformation>>, TError = GetSystemInformation406One>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemInformation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemInformation>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSystemInformation<TData = Awaited<ReturnType<typeof getSystemInformation>>, TError = GetSystemInformation406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemInformation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSystemInformation>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetSystemInformation<TData = Awaited<ReturnType<typeof getSystemInformation>>, TError = GetSystemInformation406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemInformation>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get system information
 */

export function useGetSystemInformation<TData = Awaited<ReturnType<typeof getSystemInformation>>, TError = GetSystemInformation406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSystemInformation>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetSystemInformationQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



