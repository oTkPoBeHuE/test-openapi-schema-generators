/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  DeleteProductModelsCode401One
} from '../../model/deleteProductModelsCode401One'
import type {
  DeleteProductModelsCode403One
} from '../../model/deleteProductModelsCode403One'
import type {
  DeleteProductModelsCode404One
} from '../../model/deleteProductModelsCode404One'
import type {
  GetProductModelDraftCode200
} from '../../model/getProductModelDraftCode200'
import type {
  GetProductModelDraftCode401One
} from '../../model/getProductModelDraftCode401One'
import type {
  GetProductModelDraftCode403One
} from '../../model/getProductModelDraftCode403One'
import type {
  GetProductModelDraftCode404One
} from '../../model/getProductModelDraftCode404One'
import type {
  GetProductModelDraftCode406One
} from '../../model/getProductModelDraftCode406One'
import type {
  GetProductModels200One
} from '../../model/getProductModels200One'
import type {
  GetProductModels401One
} from '../../model/getProductModels401One'
import type {
  GetProductModels406One
} from '../../model/getProductModels406One'
import type {
  GetProductModels422One
} from '../../model/getProductModels422One'
import type {
  GetProductModelsCode200
} from '../../model/getProductModelsCode200'
import type {
  GetProductModelsCode401One
} from '../../model/getProductModelsCode401One'
import type {
  GetProductModelsCode404One
} from '../../model/getProductModelsCode404One'
import type {
  GetProductModelsCode406One
} from '../../model/getProductModelsCode406One'
import type {
  GetProductModelsCodeParams
} from '../../model/getProductModelsCodeParams'
import type {
  GetProductModelsParams
} from '../../model/getProductModelsParams'
import type {
  PatchProductModels200One
} from '../../model/patchProductModels200One'
import type {
  PatchProductModels401One
} from '../../model/patchProductModels401One'
import type {
  PatchProductModels403One
} from '../../model/patchProductModels403One'
import type {
  PatchProductModels413One
} from '../../model/patchProductModels413One'
import type {
  PatchProductModels415One
} from '../../model/patchProductModels415One'
import type {
  PatchProductModelsBody
} from '../../model/patchProductModelsBody'
import type {
  PatchProductModelsCode401One
} from '../../model/patchProductModelsCode401One'
import type {
  PatchProductModelsCode415One
} from '../../model/patchProductModelsCode415One'
import type {
  PatchProductModelsCode422One
} from '../../model/patchProductModelsCode422One'
import type {
  PatchProductModelsCodeBody
} from '../../model/patchProductModelsCodeBody'
import type {
  PostProductModelProposal401One
} from '../../model/postProductModelProposal401One'
import type {
  PostProductModelProposal403One
} from '../../model/postProductModelProposal403One'
import type {
  PostProductModelProposal415One
} from '../../model/postProductModelProposal415One'
import type {
  PostProductModelProposal422One
} from '../../model/postProductModelProposal422One'
import type {
  PostProductModels400One
} from '../../model/postProductModels400One'
import type {
  PostProductModels401One
} from '../../model/postProductModels401One'
import type {
  PostProductModels415One
} from '../../model/postProductModels415One'
import type {
  PostProductModels422One
} from '../../model/postProductModels422One'
import type {
  PostProductModelsBody
} from '../../model/postProductModelsBody'



/**
 * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
 * @summary Get list of product models
 */
export const getProductModels = (
    params?: GetProductModelsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductModels200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/product-models`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetProductModelsQueryKey = (params?: GetProductModelsParams,) => {
    return [`/api/rest/v1/product-models`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductModelsQueryOptions = <TData = Awaited<ReturnType<typeof getProductModels>>, TError = AxiosError<GetProductModels401One | GetProductModels406One | GetProductModels422One>>(params?: GetProductModelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModels>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductModelsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductModels>>> = ({ signal }) => getProductModels(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductModels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductModelsQueryResult = NonNullable<Awaited<ReturnType<typeof getProductModels>>>
export type GetProductModelsQueryError = AxiosError<GetProductModels401One | GetProductModels406One | GetProductModels422One>


export function useGetProductModels<TData = Awaited<ReturnType<typeof getProductModels>>, TError = AxiosError<GetProductModels401One | GetProductModels406One | GetProductModels422One>>(
 params: undefined |  GetProductModelsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductModels>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductModels<TData = Awaited<ReturnType<typeof getProductModels>>, TError = AxiosError<GetProductModels401One | GetProductModels406One | GetProductModels422One>>(
 params?: GetProductModelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductModels>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductModels<TData = Awaited<ReturnType<typeof getProductModels>>, TError = AxiosError<GetProductModels401One | GetProductModels406One | GetProductModels422One>>(
 params?: GetProductModelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModels>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of product models
 */

export function useGetProductModels<TData = Awaited<ReturnType<typeof getProductModels>>, TError = AxiosError<GetProductModels401One | GetProductModels406One | GetProductModels422One>>(
 params?: GetProductModelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModels>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductModelsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several product models at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model's categories.
 * @summary Update/create several product models
 */
export const patchProductModels = (
    patchProductModelsBody: PatchProductModelsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchProductModels200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/product-models`,
      patchProductModelsBody,options
    );
  }



export const getPatchProductModelsMutationOptions = <TError = AxiosError<PatchProductModels401One | PatchProductModels403One | PatchProductModels413One | PatchProductModels415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductModels>>, TError,{data: PatchProductModelsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchProductModels>>, TError,{data: PatchProductModelsBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchProductModels>>, {data: PatchProductModelsBody}> = (props) => {
          const {data} = props ?? {};

          return  patchProductModels(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchProductModelsMutationResult = NonNullable<Awaited<ReturnType<typeof patchProductModels>>>
    export type PatchProductModelsMutationBody = PatchProductModelsBody
    export type PatchProductModelsMutationError = AxiosError<PatchProductModels401One | PatchProductModels403One | PatchProductModels413One | PatchProductModels415One>

    /**
 * @summary Update/create several product models
 */
export const usePatchProductModels = <TError = AxiosError<PatchProductModels401One | PatchProductModels403One | PatchProductModels413One | PatchProductModels415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductModels>>, TError,{data: PatchProductModelsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchProductModels>>,
        TError,
        {data: PatchProductModelsBody},
        TContext
      > => {

      const mutationOptions = getPatchProductModelsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
 * @summary Create a new product model
 */
export const postProductModels = (
    postProductModelsBody: PostProductModelsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/product-models`,
      postProductModelsBody,options
    );
  }



export const getPostProductModelsMutationOptions = <TError = AxiosError<PostProductModels400One | PostProductModels401One | PostProductModels415One | PostProductModels422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductModels>>, TError,{data: PostProductModelsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postProductModels>>, TError,{data: PostProductModelsBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductModels>>, {data: PostProductModelsBody}> = (props) => {
          const {data} = props ?? {};

          return  postProductModels(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductModelsMutationResult = NonNullable<Awaited<ReturnType<typeof postProductModels>>>
    export type PostProductModelsMutationBody = PostProductModelsBody
    export type PostProductModelsMutationError = AxiosError<PostProductModels400One | PostProductModels401One | PostProductModels415One | PostProductModels422One>

    /**
 * @summary Create a new product model
 */
export const usePostProductModels = <TError = AxiosError<PostProductModels400One | PostProductModels401One | PostProductModels415One | PostProductModels422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductModels>>, TError,{data: PostProductModelsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postProductModels>>,
        TError,
        {data: PostProductModelsBody},
        TContext
      > => {

      const mutationOptions = getPostProductModelsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
 * @summary Delete a product model
 */
export const deleteProductModelsCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/api/rest/v1/product-models/${code}`,options
    );
  }



export const getDeleteProductModelsCodeMutationOptions = <TError = AxiosError<DeleteProductModelsCode401One | DeleteProductModelsCode403One | DeleteProductModelsCode404One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductModelsCode>>, TError,{code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteProductModelsCode>>, TError,{code: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProductModelsCode>>, {code: string}> = (props) => {
          const {code} = props ?? {};

          return  deleteProductModelsCode(code,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProductModelsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProductModelsCode>>>
    
    export type DeleteProductModelsCodeMutationError = AxiosError<DeleteProductModelsCode401One | DeleteProductModelsCode403One | DeleteProductModelsCode404One>

    /**
 * @summary Delete a product model
 */
export const useDeleteProductModelsCode = <TError = AxiosError<DeleteProductModelsCode401One | DeleteProductModelsCode403One | DeleteProductModelsCode404One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProductModelsCode>>, TError,{code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteProductModelsCode>>,
        TError,
        {code: string},
        TContext
      > => {

      const mutationOptions = getDeleteProductModelsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
 * @summary Get a product model
 */
export const getProductModelsCode = (
    code: string,
    params?: GetProductModelsCodeParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductModelsCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/product-models/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetProductModelsCodeQueryKey = (code: string,
    params?: GetProductModelsCodeParams,) => {
    return [`/api/rest/v1/product-models/${code}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductModelsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getProductModelsCode>>, TError = AxiosError<GetProductModelsCode401One | GetProductModelsCode404One | GetProductModelsCode406One>>(code: string,
    params?: GetProductModelsCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelsCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductModelsCodeQueryKey(code,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductModelsCode>>> = ({ signal }) => getProductModelsCode(code,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductModelsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductModelsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getProductModelsCode>>>
export type GetProductModelsCodeQueryError = AxiosError<GetProductModelsCode401One | GetProductModelsCode404One | GetProductModelsCode406One>


export function useGetProductModelsCode<TData = Awaited<ReturnType<typeof getProductModelsCode>>, TError = AxiosError<GetProductModelsCode401One | GetProductModelsCode404One | GetProductModelsCode406One>>(
 code: string,
    params: undefined |  GetProductModelsCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductModelsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductModelsCode<TData = Awaited<ReturnType<typeof getProductModelsCode>>, TError = AxiosError<GetProductModelsCode401One | GetProductModelsCode404One | GetProductModelsCode406One>>(
 code: string,
    params?: GetProductModelsCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductModelsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductModelsCode<TData = Awaited<ReturnType<typeof getProductModelsCode>>, TError = AxiosError<GetProductModelsCode401One | GetProductModelsCode404One | GetProductModelsCode406One>>(
 code: string,
    params?: GetProductModelsCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a product model
 */

export function useGetProductModelsCode<TData = Awaited<ReturnType<typeof getProductModelsCode>>, TError = AxiosError<GetProductModelsCode401One | GetProductModelsCode404One | GetProductModelsCode406One>>(
 code: string,
    params?: GetProductModelsCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductModelsCodeQueryOptions(code,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given product model. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model's categories.
 * @summary Update/create a product model
 */
export const patchProductModelsCode = (
    code: string,
    patchProductModelsCodeBody: PatchProductModelsCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/product-models/${code}`,
      patchProductModelsCodeBody,options
    );
  }



export const getPatchProductModelsCodeMutationOptions = <TError = AxiosError<PatchProductModelsCode401One | PatchProductModelsCode415One | PatchProductModelsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductModelsCode>>, TError,{code: string;data: PatchProductModelsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchProductModelsCode>>, TError,{code: string;data: PatchProductModelsCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchProductModelsCode>>, {code: string;data: PatchProductModelsCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchProductModelsCode(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchProductModelsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchProductModelsCode>>>
    export type PatchProductModelsCodeMutationBody = PatchProductModelsCodeBody
    export type PatchProductModelsCodeMutationError = AxiosError<PatchProductModelsCode401One | PatchProductModelsCode415One | PatchProductModelsCode422One>

    /**
 * @summary Update/create a product model
 */
export const usePatchProductModelsCode = <TError = AxiosError<PatchProductModelsCode401One | PatchProductModelsCode415One | PatchProductModelsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchProductModelsCode>>, TError,{code: string;data: PatchProductModelsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchProductModelsCode>>,
        TError,
        {code: string;data: PatchProductModelsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchProductModelsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given product model draft.
 * @summary Get a draft
 */
export const getProductModelDraftCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetProductModelDraftCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/product-models/${code}/draft`,options
    );
  }


export const getGetProductModelDraftCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/product-models/${code}/draft`] as const;
    }

    
export const getGetProductModelDraftCodeQueryOptions = <TData = Awaited<ReturnType<typeof getProductModelDraftCode>>, TError = AxiosError<GetProductModelDraftCode401One | GetProductModelDraftCode403One | GetProductModelDraftCode404One | GetProductModelDraftCode406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelDraftCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductModelDraftCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductModelDraftCode>>> = ({ signal }) => getProductModelDraftCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductModelDraftCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetProductModelDraftCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getProductModelDraftCode>>>
export type GetProductModelDraftCodeQueryError = AxiosError<GetProductModelDraftCode401One | GetProductModelDraftCode403One | GetProductModelDraftCode404One | GetProductModelDraftCode406One>


export function useGetProductModelDraftCode<TData = Awaited<ReturnType<typeof getProductModelDraftCode>>, TError = AxiosError<GetProductModelDraftCode401One | GetProductModelDraftCode403One | GetProductModelDraftCode404One | GetProductModelDraftCode406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelDraftCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductModelDraftCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductModelDraftCode<TData = Awaited<ReturnType<typeof getProductModelDraftCode>>, TError = AxiosError<GetProductModelDraftCode401One | GetProductModelDraftCode403One | GetProductModelDraftCode404One | GetProductModelDraftCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelDraftCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductModelDraftCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetProductModelDraftCode<TData = Awaited<ReturnType<typeof getProductModelDraftCode>>, TError = AxiosError<GetProductModelDraftCode401One | GetProductModelDraftCode403One | GetProductModelDraftCode404One | GetProductModelDraftCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelDraftCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a draft
 */

export function useGetProductModelDraftCode<TData = Awaited<ReturnType<typeof getProductModelDraftCode>>, TError = AxiosError<GetProductModelDraftCode401One | GetProductModelDraftCode403One | GetProductModelDraftCode404One | GetProductModelDraftCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductModelDraftCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetProductModelDraftCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to submit a product model draft for approval.
 * @summary Submit a draft for approval
 */
export const postProductModelProposal = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/product-models/${code}/proposal`,undefined,options
    );
  }



export const getPostProductModelProposalMutationOptions = <TError = AxiosError<PostProductModelProposal401One | PostProductModelProposal403One | PostProductModelProposal415One | PostProductModelProposal422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductModelProposal>>, TError,{code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postProductModelProposal>>, TError,{code: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProductModelProposal>>, {code: string}> = (props) => {
          const {code} = props ?? {};

          return  postProductModelProposal(code,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProductModelProposalMutationResult = NonNullable<Awaited<ReturnType<typeof postProductModelProposal>>>
    
    export type PostProductModelProposalMutationError = AxiosError<PostProductModelProposal401One | PostProductModelProposal403One | PostProductModelProposal415One | PostProductModelProposal422One>

    /**
 * @summary Submit a draft for approval
 */
export const usePostProductModelProposal = <TError = AxiosError<PostProductModelProposal401One | PostProductModelProposal403One | PostProductModelProposal415One | PostProductModelProposal422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProductModelProposal>>, TError,{code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postProductModelProposal>>,
        TError,
        {code: string},
        TContext
      > => {

      const mutationOptions = getPostProductModelProposalMutationOptions(options);

      return useMutation(mutationOptions);
    }
    