/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetReferenceFilesChannelCodeLocaleCodeDownload401One
} from '../../model/getReferenceFilesChannelCodeLocaleCodeDownload401One'
import type {
  GetReferenceFilesChannelCodeLocaleCodeDownload403One
} from '../../model/getReferenceFilesChannelCodeLocaleCodeDownload403One'
import type {
  GetReferenceFilesChannelCodeLocaleCodeDownload404One
} from '../../model/getReferenceFilesChannelCodeLocaleCodeDownload404One'
import type {
  GetReferenceFilesLocaleCode200
} from '../../model/getReferenceFilesLocaleCode200'
import type {
  GetReferenceFilesLocaleCode401One
} from '../../model/getReferenceFilesLocaleCode401One'
import type {
  GetReferenceFilesLocaleCode403One
} from '../../model/getReferenceFilesLocaleCode403One'
import type {
  GetReferenceFilesLocaleCode404One
} from '../../model/getReferenceFilesLocaleCode404One'
import type {
  GetReferenceFilesLocaleCode406One
} from '../../model/getReferenceFilesLocaleCode406One'
import type {
  PostReferenceFilesLocaleCode201
} from '../../model/postReferenceFilesLocaleCode201'
import type {
  PostReferenceFilesLocaleCode400One
} from '../../model/postReferenceFilesLocaleCode400One'
import type {
  PostReferenceFilesLocaleCode401One
} from '../../model/postReferenceFilesLocaleCode401One'
import type {
  PostReferenceFilesLocaleCode403One
} from '../../model/postReferenceFilesLocaleCode403One'
import type {
  PostReferenceFilesLocaleCode404One
} from '../../model/postReferenceFilesLocaleCode404One'
import type {
  PostReferenceFilesLocaleCode415One
} from '../../model/postReferenceFilesLocaleCode415One'
import type {
  PostReferenceFilesLocaleCode422One
} from '../../model/postReferenceFilesLocaleCode422One'
import type {
  PostReferenceFilesLocaleCodeBodyBody
} from '../../model/postReferenceFilesLocaleCodeBodyBody'
import type {
  PostReferenceFilesLocaleCodeHeaders
} from '../../model/postReferenceFilesLocaleCodeHeaders'



/**
 * This endpoint allows you to get the information about a reference file of a given PAM asset.
 * @summary Get a reference file
 */
export const getReferenceFilesLocaleCode = (
    assetCode: string,
    localeCode: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetReferenceFilesLocaleCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`,options
    );
  }


export const getGetReferenceFilesLocaleCodeQueryKey = (assetCode: string,
    localeCode: string,) => {
    return [`/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`] as const;
    }

    
export const getGetReferenceFilesLocaleCodeQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = AxiosError<GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>>(assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceFilesLocaleCodeQueryKey(assetCode,localeCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>> = ({ signal }) => getReferenceFilesLocaleCode(assetCode,localeCode, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetCode && localeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceFilesLocaleCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>>
export type GetReferenceFilesLocaleCodeQueryError = AxiosError<GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>


export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = AxiosError<GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>>(
 assetCode: string,
    localeCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = AxiosError<GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = AxiosError<GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a reference file
 */

export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = AxiosError<GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceFilesLocaleCodeQueryOptions(assetCode,localeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
 * @summary Upload a new reference file
 */
export const postReferenceFilesLocaleCode = (
    assetCode: string,
    localeCode: string,
    postReferenceFilesLocaleCodeBodyBody: PostReferenceFilesLocaleCodeBodyBody,
    headers: PostReferenceFilesLocaleCodeHeaders, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostReferenceFilesLocaleCode201>> => {
    
    return axios.default.post(
      `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`,
      postReferenceFilesLocaleCodeBodyBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }



export const getPostReferenceFilesLocaleCodeMutationOptions = <TError = AxiosError<PostReferenceFilesLocaleCode400One | PostReferenceFilesLocaleCode401One | PostReferenceFilesLocaleCode403One | PostReferenceFilesLocaleCode404One | PostReferenceFilesLocaleCode415One | PostReferenceFilesLocaleCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, TError,{assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, TError,{assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, {assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}> = (props) => {
          const {assetCode,localeCode,data,headers} = props ?? {};

          return  postReferenceFilesLocaleCode(assetCode,localeCode,data,headers,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostReferenceFilesLocaleCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>>
    export type PostReferenceFilesLocaleCodeMutationBody = PostReferenceFilesLocaleCodeBodyBody
    export type PostReferenceFilesLocaleCodeMutationError = AxiosError<PostReferenceFilesLocaleCode400One | PostReferenceFilesLocaleCode401One | PostReferenceFilesLocaleCode403One | PostReferenceFilesLocaleCode404One | PostReferenceFilesLocaleCode415One | PostReferenceFilesLocaleCode422One>

    /**
 * @summary Upload a new reference file
 */
export const usePostReferenceFilesLocaleCode = <TError = AxiosError<PostReferenceFilesLocaleCode400One | PostReferenceFilesLocaleCode401One | PostReferenceFilesLocaleCode403One | PostReferenceFilesLocaleCode404One | PostReferenceFilesLocaleCode415One | PostReferenceFilesLocaleCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, TError,{assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>,
        TError,
        {assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders},
        TContext
      > => {

      const mutationOptions = getPostReferenceFilesLocaleCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to download a given reference file.
 * @summary Download a reference file
 */
export const getReferenceFilesChannelCodeLocaleCodeDownload = (
    assetCode: string,
    localeCode: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}/download`,options
    );
  }


export const getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryKey = (assetCode: string,
    localeCode: string,) => {
    return [`/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}/download`] as const;
    }

    
export const getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = AxiosError<GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>>(assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryKey(assetCode,localeCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>> = ({ signal }) => getReferenceFilesChannelCodeLocaleCodeDownload(assetCode,localeCode, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetCode && localeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceFilesChannelCodeLocaleCodeDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>>
export type GetReferenceFilesChannelCodeLocaleCodeDownloadQueryError = AxiosError<GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>


export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = AxiosError<GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>>(
 assetCode: string,
    localeCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = AxiosError<GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = AxiosError<GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download a reference file
 */

export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = AxiosError<GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryOptions(assetCode,localeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



