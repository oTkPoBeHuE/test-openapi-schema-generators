/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetReferenceFilesChannelCodeLocaleCodeDownload401One
} from '../../model/getReferenceFilesChannelCodeLocaleCodeDownload401One'
import type {
  GetReferenceFilesChannelCodeLocaleCodeDownload403One
} from '../../model/getReferenceFilesChannelCodeLocaleCodeDownload403One'
import type {
  GetReferenceFilesChannelCodeLocaleCodeDownload404One
} from '../../model/getReferenceFilesChannelCodeLocaleCodeDownload404One'
import type {
  GetReferenceFilesLocaleCode200
} from '../../model/getReferenceFilesLocaleCode200'
import type {
  GetReferenceFilesLocaleCode401One
} from '../../model/getReferenceFilesLocaleCode401One'
import type {
  GetReferenceFilesLocaleCode403One
} from '../../model/getReferenceFilesLocaleCode403One'
import type {
  GetReferenceFilesLocaleCode404One
} from '../../model/getReferenceFilesLocaleCode404One'
import type {
  GetReferenceFilesLocaleCode406One
} from '../../model/getReferenceFilesLocaleCode406One'
import type {
  PostReferenceFilesLocaleCode201
} from '../../model/postReferenceFilesLocaleCode201'
import type {
  PostReferenceFilesLocaleCode400One
} from '../../model/postReferenceFilesLocaleCode400One'
import type {
  PostReferenceFilesLocaleCode401One
} from '../../model/postReferenceFilesLocaleCode401One'
import type {
  PostReferenceFilesLocaleCode403One
} from '../../model/postReferenceFilesLocaleCode403One'
import type {
  PostReferenceFilesLocaleCode404One
} from '../../model/postReferenceFilesLocaleCode404One'
import type {
  PostReferenceFilesLocaleCode415One
} from '../../model/postReferenceFilesLocaleCode415One'
import type {
  PostReferenceFilesLocaleCode422One
} from '../../model/postReferenceFilesLocaleCode422One'
import type {
  PostReferenceFilesLocaleCodeBodyBody
} from '../../model/postReferenceFilesLocaleCodeBodyBody'
import type {
  PostReferenceFilesLocaleCodeHeaders
} from '../../model/postReferenceFilesLocaleCodeHeaders'



/**
 * This endpoint allows you to get the information about a reference file of a given PAM asset.
 * @summary Get a reference file
 */
export type getReferenceFilesLocaleCodeResponse = {
  data: GetReferenceFilesLocaleCode200;
  status: number;
  headers: Headers;
}

export const getGetReferenceFilesLocaleCodeUrl = (assetCode: string,
    localeCode: string,) => {


  return `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`
}

export const getReferenceFilesLocaleCode = async (assetCode: string,
    localeCode: string, options?: RequestInit): Promise<getReferenceFilesLocaleCodeResponse> => {
  
  const res = await fetch(getGetReferenceFilesLocaleCodeUrl(assetCode,localeCode),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetReferenceFilesLocaleCodeQueryKey = (assetCode: string,
    localeCode: string,) => {
    return [`/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`] as const;
    }

    
export const getGetReferenceFilesLocaleCodeQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>(assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceFilesLocaleCodeQueryKey(assetCode,localeCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>> = ({ signal }) => getReferenceFilesLocaleCode(assetCode,localeCode, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetCode && localeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceFilesLocaleCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>>
export type GetReferenceFilesLocaleCodeQueryError = GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One


export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>(
 assetCode: string,
    localeCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a reference file
 */

export function useGetReferenceFilesLocaleCode<TData = Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError = GetReferenceFilesLocaleCode401One | GetReferenceFilesLocaleCode403One | GetReferenceFilesLocaleCode404One | GetReferenceFilesLocaleCode406One>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesLocaleCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceFilesLocaleCodeQueryOptions(assetCode,localeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
 * @summary Upload a new reference file
 */
export type postReferenceFilesLocaleCodeResponse = {
  data: PostReferenceFilesLocaleCode201;
  status: number;
  headers: Headers;
}

export const getPostReferenceFilesLocaleCodeUrl = (assetCode: string,
    localeCode: string,) => {


  return `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`
}

export const postReferenceFilesLocaleCode = async (assetCode: string,
    localeCode: string,
    postReferenceFilesLocaleCodeBodyBody: PostReferenceFilesLocaleCodeBodyBody,
    headers: PostReferenceFilesLocaleCodeHeaders, options?: RequestInit): Promise<postReferenceFilesLocaleCodeResponse> => {
  
  const res = await fetch(getPostReferenceFilesLocaleCodeUrl(assetCode,localeCode),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postReferenceFilesLocaleCodeBodyBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostReferenceFilesLocaleCodeMutationOptions = <TError = PostReferenceFilesLocaleCode400One | PostReferenceFilesLocaleCode401One | PostReferenceFilesLocaleCode403One | PostReferenceFilesLocaleCode404One | PostReferenceFilesLocaleCode415One | PostReferenceFilesLocaleCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, TError,{assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, TError,{assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, {assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}> = (props) => {
          const {assetCode,localeCode,data,headers} = props ?? {};

          return  postReferenceFilesLocaleCode(assetCode,localeCode,data,headers,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostReferenceFilesLocaleCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>>
    export type PostReferenceFilesLocaleCodeMutationBody = PostReferenceFilesLocaleCodeBodyBody
    export type PostReferenceFilesLocaleCodeMutationError = PostReferenceFilesLocaleCode400One | PostReferenceFilesLocaleCode401One | PostReferenceFilesLocaleCode403One | PostReferenceFilesLocaleCode404One | PostReferenceFilesLocaleCode415One | PostReferenceFilesLocaleCode422One

    /**
 * @summary Upload a new reference file
 */
export const usePostReferenceFilesLocaleCode = <TError = PostReferenceFilesLocaleCode400One | PostReferenceFilesLocaleCode401One | PostReferenceFilesLocaleCode403One | PostReferenceFilesLocaleCode404One | PostReferenceFilesLocaleCode415One | PostReferenceFilesLocaleCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>, TError,{assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postReferenceFilesLocaleCode>>,
        TError,
        {assetCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostReferenceFilesLocaleCodeHeaders},
        TContext
      > => {

      const mutationOptions = getPostReferenceFilesLocaleCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to download a given reference file.
 * @summary Download a reference file
 */
export type getReferenceFilesChannelCodeLocaleCodeDownloadResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getGetReferenceFilesChannelCodeLocaleCodeDownloadUrl = (assetCode: string,
    localeCode: string,) => {


  return `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}/download`
}

export const getReferenceFilesChannelCodeLocaleCodeDownload = async (assetCode: string,
    localeCode: string, options?: RequestInit): Promise<getReferenceFilesChannelCodeLocaleCodeDownloadResponse> => {
  
  const res = await fetch(getGetReferenceFilesChannelCodeLocaleCodeDownloadUrl(assetCode,localeCode),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryKey = (assetCode: string,
    localeCode: string,) => {
    return [`/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}/download`] as const;
    }

    
export const getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>(assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryKey(assetCode,localeCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>> = ({ signal }) => getReferenceFilesChannelCodeLocaleCodeDownload(assetCode,localeCode, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetCode && localeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceFilesChannelCodeLocaleCodeDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>>
export type GetReferenceFilesChannelCodeLocaleCodeDownloadQueryError = GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One


export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    localeCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download a reference file
 */

export function useGetReferenceFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError = GetReferenceFilesChannelCodeLocaleCodeDownload401One | GetReferenceFilesChannelCodeLocaleCodeDownload403One | GetReferenceFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceFilesChannelCodeLocaleCodeDownloadQueryOptions(assetCode,localeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



