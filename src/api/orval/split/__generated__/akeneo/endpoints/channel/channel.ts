/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  ChannelsPatch400One
} from '../../model/channelsPatch400One'
import type {
  ChannelsPatch401One
} from '../../model/channelsPatch401One'
import type {
  ChannelsPatch403One
} from '../../model/channelsPatch403One'
import type {
  ChannelsPatch415One
} from '../../model/channelsPatch415One'
import type {
  ChannelsPatch422One
} from '../../model/channelsPatch422One'
import type {
  ChannelsPatchBody
} from '../../model/channelsPatchBody'
import type {
  ChannelsPost400One
} from '../../model/channelsPost400One'
import type {
  ChannelsPost401One
} from '../../model/channelsPost401One'
import type {
  ChannelsPost403One
} from '../../model/channelsPost403One'
import type {
  ChannelsPost415One
} from '../../model/channelsPost415One'
import type {
  ChannelsPost422One
} from '../../model/channelsPost422One'
import type {
  ChannelsPostBody
} from '../../model/channelsPostBody'
import type {
  GetChannels200One
} from '../../model/getChannels200One'
import type {
  GetChannels401One
} from '../../model/getChannels401One'
import type {
  GetChannels403One
} from '../../model/getChannels403One'
import type {
  GetChannels406One
} from '../../model/getChannels406One'
import type {
  GetChannelsCode200
} from '../../model/getChannelsCode200'
import type {
  GetChannelsCode401One
} from '../../model/getChannelsCode401One'
import type {
  GetChannelsCode403One
} from '../../model/getChannelsCode403One'
import type {
  GetChannelsCode404One
} from '../../model/getChannelsCode404One'
import type {
  GetChannelsCode406One
} from '../../model/getChannelsCode406One'
import type {
  GetChannelsParams
} from '../../model/getChannelsParams'
import type {
  SeveralChannelsPatch200One
} from '../../model/severalChannelsPatch200One'
import type {
  SeveralChannelsPatch401One
} from '../../model/severalChannelsPatch401One'
import type {
  SeveralChannelsPatch403One
} from '../../model/severalChannelsPatch403One'
import type {
  SeveralChannelsPatch413One
} from '../../model/severalChannelsPatch413One'
import type {
  SeveralChannelsPatch415One
} from '../../model/severalChannelsPatch415One'
import type {
  SeveralChannelsPatchBody
} from '../../model/severalChannelsPatchBody'



/**
 * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
 * @summary Get a list of channels
 */
export const getChannels = (
    params?: GetChannelsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetChannels200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/channels`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetChannelsQueryKey = (params?: GetChannelsParams,) => {
    return [`/api/rest/v1/channels`, ...(params ? [params]: [])] as const;
    }

    
export const getGetChannelsQueryOptions = <TData = Awaited<ReturnType<typeof getChannels>>, TError = AxiosError<GetChannels401One | GetChannels403One | GetChannels406One>>(params?: GetChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChannelsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannels>>> = ({ signal }) => getChannels(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetChannelsQueryResult = NonNullable<Awaited<ReturnType<typeof getChannels>>>
export type GetChannelsQueryError = AxiosError<GetChannels401One | GetChannels403One | GetChannels406One>


export function useGetChannels<TData = Awaited<ReturnType<typeof getChannels>>, TError = AxiosError<GetChannels401One | GetChannels403One | GetChannels406One>>(
 params: undefined |  GetChannelsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannels>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetChannels<TData = Awaited<ReturnType<typeof getChannels>>, TError = AxiosError<GetChannels401One | GetChannels403One | GetChannels406One>>(
 params?: GetChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannels>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetChannels<TData = Awaited<ReturnType<typeof getChannels>>, TError = AxiosError<GetChannels401One | GetChannels403One | GetChannels406One>>(
 params?: GetChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of channels
 */

export function useGetChannels<TData = Awaited<ReturnType<typeof getChannels>>, TError = AxiosError<GetChannels401One | GetChannels403One | GetChannels406One>>(
 params?: GetChannelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannels>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetChannelsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several channels at once.
 * @summary Update/create several channels
 */
export const severalChannelsPatch = (
    severalChannelsPatchBody: SeveralChannelsPatchBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SeveralChannelsPatch200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/channels`,
      severalChannelsPatchBody,options
    );
  }



export const getSeveralChannelsPatchMutationOptions = <TError = AxiosError<SeveralChannelsPatch401One | SeveralChannelsPatch403One | SeveralChannelsPatch413One | SeveralChannelsPatch415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof severalChannelsPatch>>, TError,{data: SeveralChannelsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof severalChannelsPatch>>, TError,{data: SeveralChannelsPatchBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof severalChannelsPatch>>, {data: SeveralChannelsPatchBody}> = (props) => {
          const {data} = props ?? {};

          return  severalChannelsPatch(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SeveralChannelsPatchMutationResult = NonNullable<Awaited<ReturnType<typeof severalChannelsPatch>>>
    export type SeveralChannelsPatchMutationBody = SeveralChannelsPatchBody
    export type SeveralChannelsPatchMutationError = AxiosError<SeveralChannelsPatch401One | SeveralChannelsPatch403One | SeveralChannelsPatch413One | SeveralChannelsPatch415One>

    /**
 * @summary Update/create several channels
 */
export const useSeveralChannelsPatch = <TError = AxiosError<SeveralChannelsPatch401One | SeveralChannelsPatch403One | SeveralChannelsPatch413One | SeveralChannelsPatch415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof severalChannelsPatch>>, TError,{data: SeveralChannelsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof severalChannelsPatch>>,
        TError,
        {data: SeveralChannelsPatchBody},
        TContext
      > => {

      const mutationOptions = getSeveralChannelsPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new channel.
 * @summary Create a new channel
 */
export const channelsPost = (
    channelsPostBody: ChannelsPostBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/channels`,
      channelsPostBody,options
    );
  }



export const getChannelsPostMutationOptions = <TError = AxiosError<ChannelsPost400One | ChannelsPost401One | ChannelsPost403One | ChannelsPost415One | ChannelsPost422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof channelsPost>>, TError,{data: ChannelsPostBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof channelsPost>>, TError,{data: ChannelsPostBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof channelsPost>>, {data: ChannelsPostBody}> = (props) => {
          const {data} = props ?? {};

          return  channelsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChannelsPostMutationResult = NonNullable<Awaited<ReturnType<typeof channelsPost>>>
    export type ChannelsPostMutationBody = ChannelsPostBody
    export type ChannelsPostMutationError = AxiosError<ChannelsPost400One | ChannelsPost401One | ChannelsPost403One | ChannelsPost415One | ChannelsPost422One>

    /**
 * @summary Create a new channel
 */
export const useChannelsPost = <TError = AxiosError<ChannelsPost400One | ChannelsPost401One | ChannelsPost403One | ChannelsPost415One | ChannelsPost422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof channelsPost>>, TError,{data: ChannelsPostBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof channelsPost>>,
        TError,
        {data: ChannelsPostBody},
        TContext
      > => {

      const mutationOptions = getChannelsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given channel.
 * @summary Get a channel
 */
export const getChannelsCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetChannelsCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/channels/${code}`,options
    );
  }


export const getGetChannelsCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/channels/${code}`] as const;
    }

    
export const getGetChannelsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getChannelsCode>>, TError = AxiosError<GetChannelsCode401One | GetChannelsCode403One | GetChannelsCode404One | GetChannelsCode406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelsCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChannelsCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelsCode>>> = ({ signal }) => getChannelsCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChannelsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetChannelsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getChannelsCode>>>
export type GetChannelsCodeQueryError = AxiosError<GetChannelsCode401One | GetChannelsCode403One | GetChannelsCode404One | GetChannelsCode406One>


export function useGetChannelsCode<TData = Awaited<ReturnType<typeof getChannelsCode>>, TError = AxiosError<GetChannelsCode401One | GetChannelsCode403One | GetChannelsCode404One | GetChannelsCode406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannelsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetChannelsCode<TData = Awaited<ReturnType<typeof getChannelsCode>>, TError = AxiosError<GetChannelsCode401One | GetChannelsCode403One | GetChannelsCode404One | GetChannelsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChannelsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetChannelsCode<TData = Awaited<ReturnType<typeof getChannelsCode>>, TError = AxiosError<GetChannelsCode401One | GetChannelsCode403One | GetChannelsCode404One | GetChannelsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a channel
 */

export function useGetChannelsCode<TData = Awaited<ReturnType<typeof getChannelsCode>>, TError = AxiosError<GetChannelsCode401One | GetChannelsCode403One | GetChannelsCode404One | GetChannelsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChannelsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetChannelsCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given channel. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
 * @summary Update/create a channel
 */
export const channelsPatch = (
    code: string,
    channelsPatchBody: ChannelsPatchBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/channels/${code}`,
      channelsPatchBody,options
    );
  }



export const getChannelsPatchMutationOptions = <TError = AxiosError<ChannelsPatch400One | ChannelsPatch401One | ChannelsPatch403One | ChannelsPatch415One | ChannelsPatch422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof channelsPatch>>, TError,{code: string;data: ChannelsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof channelsPatch>>, TError,{code: string;data: ChannelsPatchBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof channelsPatch>>, {code: string;data: ChannelsPatchBody}> = (props) => {
          const {code,data} = props ?? {};

          return  channelsPatch(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ChannelsPatchMutationResult = NonNullable<Awaited<ReturnType<typeof channelsPatch>>>
    export type ChannelsPatchMutationBody = ChannelsPatchBody
    export type ChannelsPatchMutationError = AxiosError<ChannelsPatch400One | ChannelsPatch401One | ChannelsPatch403One | ChannelsPatch415One | ChannelsPatch422One>

    /**
 * @summary Update/create a channel
 */
export const useChannelsPatch = <TError = AxiosError<ChannelsPatch400One | ChannelsPatch401One | ChannelsPatch403One | ChannelsPatch415One | ChannelsPatch422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof channelsPatch>>, TError,{code: string;data: ChannelsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof channelsPatch>>,
        TError,
        {code: string;data: ChannelsPatchBody},
        TContext
      > => {

      const mutationOptions = getChannelsPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    