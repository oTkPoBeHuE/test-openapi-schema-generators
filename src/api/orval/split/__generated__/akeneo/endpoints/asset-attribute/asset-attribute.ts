/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetAssetFamiliesCodeAttributes200Item
} from '../../model/getAssetFamiliesCodeAttributes200Item'
import type {
  GetAssetFamiliesCodeAttributes401One
} from '../../model/getAssetFamiliesCodeAttributes401One'
import type {
  GetAssetFamiliesCodeAttributes406One
} from '../../model/getAssetFamiliesCodeAttributes406One'
import type {
  GetAssetFamilyAttributesCode200
} from '../../model/getAssetFamilyAttributesCode200'
import type {
  GetAssetFamilyAttributesCode401One
} from '../../model/getAssetFamilyAttributesCode401One'
import type {
  GetAssetFamilyAttributesCode404One
} from '../../model/getAssetFamilyAttributesCode404One'
import type {
  GetAssetFamilyAttributesCode406One
} from '../../model/getAssetFamilyAttributesCode406One'
import type {
  PatchAssetFamilyAttributesCode401One
} from '../../model/patchAssetFamilyAttributesCode401One'
import type {
  PatchAssetFamilyAttributesCode415One
} from '../../model/patchAssetFamilyAttributesCode415One'
import type {
  PatchAssetFamilyAttributesCode422One
} from '../../model/patchAssetFamilyAttributesCode422One'
import type {
  PatchAssetFamilyAttributesCodeBody
} from '../../model/patchAssetFamilyAttributesCodeBody'



/**
 * This endpoint allows you to get the list of attributes of a given asset family.
 * @summary Get the list of attributes of a given asset family
 */
export type getAssetFamiliesCodeAttributesResponse = {
  data: GetAssetFamiliesCodeAttributes200Item[];
  status: number;
  headers: Headers;
}

export const getGetAssetFamiliesCodeAttributesUrl = (assetFamilyCode: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/attributes`
}

export const getAssetFamiliesCodeAttributes = async (assetFamilyCode: string, options?: RequestInit): Promise<getAssetFamiliesCodeAttributesResponse> => {
  
  const res = await fetch(getGetAssetFamiliesCodeAttributesUrl(assetFamilyCode),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetFamiliesCodeAttributesQueryKey = (assetFamilyCode: string,) => {
    return [`/api/rest/v1/asset-families/${assetFamilyCode}/attributes`] as const;
    }

    
export const getGetAssetFamiliesCodeAttributesQueryOptions = <TData = Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError = GetAssetFamiliesCodeAttributes401One | GetAssetFamiliesCodeAttributes406One>(assetFamilyCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetFamiliesCodeAttributesQueryKey(assetFamilyCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>> = ({ signal }) => getAssetFamiliesCodeAttributes(assetFamilyCode, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetFamilyCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetFamiliesCodeAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>>
export type GetAssetFamiliesCodeAttributesQueryError = GetAssetFamiliesCodeAttributes401One | GetAssetFamiliesCodeAttributes406One


export function useGetAssetFamiliesCodeAttributes<TData = Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError = GetAssetFamiliesCodeAttributes401One | GetAssetFamiliesCodeAttributes406One>(
 assetFamilyCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamiliesCodeAttributes<TData = Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError = GetAssetFamiliesCodeAttributes401One | GetAssetFamiliesCodeAttributes406One>(
 assetFamilyCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamiliesCodeAttributes<TData = Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError = GetAssetFamiliesCodeAttributes401One | GetAssetFamiliesCodeAttributes406One>(
 assetFamilyCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of attributes of a given asset family
 */

export function useGetAssetFamiliesCodeAttributes<TData = Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError = GetAssetFamiliesCodeAttributes401One | GetAssetFamiliesCodeAttributes406One>(
 assetFamilyCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamiliesCodeAttributes>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetFamiliesCodeAttributesQueryOptions(assetFamilyCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given attribute for a given asset family.
 * @summary Get an attribute of a given asset family
 */
export type getAssetFamilyAttributesCodeResponse = {
  data: GetAssetFamilyAttributesCode200;
  status: number;
  headers: Headers;
}

export const getGetAssetFamilyAttributesCodeUrl = (assetFamilyCode: string,
    code: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${code}`
}

export const getAssetFamilyAttributesCode = async (assetFamilyCode: string,
    code: string, options?: RequestInit): Promise<getAssetFamilyAttributesCodeResponse> => {
  
  const res = await fetch(getGetAssetFamilyAttributesCodeUrl(assetFamilyCode,code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetFamilyAttributesCodeQueryKey = (assetFamilyCode: string,
    code: string,) => {
    return [`/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${code}`] as const;
    }

    
export const getGetAssetFamilyAttributesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError = GetAssetFamilyAttributesCode401One | GetAssetFamilyAttributesCode404One | GetAssetFamilyAttributesCode406One>(assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetFamilyAttributesCodeQueryKey(assetFamilyCode,code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>> = ({ signal }) => getAssetFamilyAttributesCode(assetFamilyCode,code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetFamilyCode && code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetFamilyAttributesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>>
export type GetAssetFamilyAttributesCodeQueryError = GetAssetFamilyAttributesCode401One | GetAssetFamilyAttributesCode404One | GetAssetFamilyAttributesCode406One


export function useGetAssetFamilyAttributesCode<TData = Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError = GetAssetFamilyAttributesCode401One | GetAssetFamilyAttributesCode404One | GetAssetFamilyAttributesCode406One>(
 assetFamilyCode: string,
    code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamilyAttributesCode<TData = Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError = GetAssetFamilyAttributesCode401One | GetAssetFamilyAttributesCode404One | GetAssetFamilyAttributesCode406One>(
 assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamilyAttributesCode<TData = Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError = GetAssetFamilyAttributesCode401One | GetAssetFamilyAttributesCode404One | GetAssetFamilyAttributesCode406One>(
 assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an attribute of a given asset family
 */

export function useGetAssetFamilyAttributesCode<TData = Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError = GetAssetFamilyAttributesCode401One | GetAssetFamilyAttributesCode404One | GetAssetFamilyAttributesCode406One>(
 assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyAttributesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetFamilyAttributesCodeQueryOptions(assetFamilyCode,code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
 * @summary Update/create an attribute of a given asset family
 */
export type patchAssetFamilyAttributesCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchAssetFamilyAttributesCodeUrl = (assetFamilyCode: string,
    code: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${code}`
}

export const patchAssetFamilyAttributesCode = async (assetFamilyCode: string,
    code: string,
    patchAssetFamilyAttributesCodeBody: PatchAssetFamilyAttributesCodeBody, options?: RequestInit): Promise<patchAssetFamilyAttributesCodeResponse> => {
  
  const res = await fetch(getPatchAssetFamilyAttributesCodeUrl(assetFamilyCode,code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAssetFamilyAttributesCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAssetFamilyAttributesCodeMutationOptions = <TError = PatchAssetFamilyAttributesCode401One | PatchAssetFamilyAttributesCode415One | PatchAssetFamilyAttributesCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetFamilyAttributesCode>>, TError,{assetFamilyCode: string;code: string;data: PatchAssetFamilyAttributesCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetFamilyAttributesCode>>, TError,{assetFamilyCode: string;code: string;data: PatchAssetFamilyAttributesCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetFamilyAttributesCode>>, {assetFamilyCode: string;code: string;data: PatchAssetFamilyAttributesCodeBody}> = (props) => {
          const {assetFamilyCode,code,data} = props ?? {};

          return  patchAssetFamilyAttributesCode(assetFamilyCode,code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetFamilyAttributesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetFamilyAttributesCode>>>
    export type PatchAssetFamilyAttributesCodeMutationBody = PatchAssetFamilyAttributesCodeBody
    export type PatchAssetFamilyAttributesCodeMutationError = PatchAssetFamilyAttributesCode401One | PatchAssetFamilyAttributesCode415One | PatchAssetFamilyAttributesCode422One

    /**
 * @summary Update/create an attribute of a given asset family
 */
export const usePatchAssetFamilyAttributesCode = <TError = PatchAssetFamilyAttributesCode401One | PatchAssetFamilyAttributesCode415One | PatchAssetFamilyAttributesCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetFamilyAttributesCode>>, TError,{assetFamilyCode: string;code: string;data: PatchAssetFamilyAttributesCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetFamilyAttributesCode>>,
        TError,
        {assetFamilyCode: string;code: string;data: PatchAssetFamilyAttributesCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetFamilyAttributesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    