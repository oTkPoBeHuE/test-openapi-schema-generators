/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetAttributesAttributeCodeOptions200One
} from '../../model/getAttributesAttributeCodeOptions200One'
import type {
  GetAttributesAttributeCodeOptions401One
} from '../../model/getAttributesAttributeCodeOptions401One'
import type {
  GetAttributesAttributeCodeOptions403One
} from '../../model/getAttributesAttributeCodeOptions403One'
import type {
  GetAttributesAttributeCodeOptions406One
} from '../../model/getAttributesAttributeCodeOptions406One'
import type {
  GetAttributesAttributeCodeOptionsCode200
} from '../../model/getAttributesAttributeCodeOptionsCode200'
import type {
  GetAttributesAttributeCodeOptionsCode401One
} from '../../model/getAttributesAttributeCodeOptionsCode401One'
import type {
  GetAttributesAttributeCodeOptionsCode403One
} from '../../model/getAttributesAttributeCodeOptionsCode403One'
import type {
  GetAttributesAttributeCodeOptionsCode404One
} from '../../model/getAttributesAttributeCodeOptionsCode404One'
import type {
  GetAttributesAttributeCodeOptionsCode406One
} from '../../model/getAttributesAttributeCodeOptionsCode406One'
import type {
  GetAttributesAttributeCodeOptionsParams
} from '../../model/getAttributesAttributeCodeOptionsParams'
import type {
  PatchAttributesAttributeCodeOptions200One
} from '../../model/patchAttributesAttributeCodeOptions200One'
import type {
  PatchAttributesAttributeCodeOptions401One
} from '../../model/patchAttributesAttributeCodeOptions401One'
import type {
  PatchAttributesAttributeCodeOptions403One
} from '../../model/patchAttributesAttributeCodeOptions403One'
import type {
  PatchAttributesAttributeCodeOptions413One
} from '../../model/patchAttributesAttributeCodeOptions413One'
import type {
  PatchAttributesAttributeCodeOptions415One
} from '../../model/patchAttributesAttributeCodeOptions415One'
import type {
  PatchAttributesAttributeCodeOptionsBody
} from '../../model/patchAttributesAttributeCodeOptionsBody'
import type {
  PatchAttributesAttributeCodeOptionsCode400One
} from '../../model/patchAttributesAttributeCodeOptionsCode400One'
import type {
  PatchAttributesAttributeCodeOptionsCode401One
} from '../../model/patchAttributesAttributeCodeOptionsCode401One'
import type {
  PatchAttributesAttributeCodeOptionsCode403One
} from '../../model/patchAttributesAttributeCodeOptionsCode403One'
import type {
  PatchAttributesAttributeCodeOptionsCode415One
} from '../../model/patchAttributesAttributeCodeOptionsCode415One'
import type {
  PatchAttributesAttributeCodeOptionsCode422One
} from '../../model/patchAttributesAttributeCodeOptionsCode422One'
import type {
  PatchAttributesAttributeCodeOptionsCodeBody
} from '../../model/patchAttributesAttributeCodeOptionsCodeBody'
import type {
  PostAttributesAttributeCodeOptions400One
} from '../../model/postAttributesAttributeCodeOptions400One'
import type {
  PostAttributesAttributeCodeOptions401One
} from '../../model/postAttributesAttributeCodeOptions401One'
import type {
  PostAttributesAttributeCodeOptions403One
} from '../../model/postAttributesAttributeCodeOptions403One'
import type {
  PostAttributesAttributeCodeOptions415One
} from '../../model/postAttributesAttributeCodeOptions415One'
import type {
  PostAttributesAttributeCodeOptions422One
} from '../../model/postAttributesAttributeCodeOptions422One'
import type {
  PostAttributesAttributeCodeOptionsBody
} from '../../model/postAttributesAttributeCodeOptionsBody'



/**
 * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
 * @summary Get list of attribute options
 */
export type getAttributesAttributeCodeOptionsResponse = {
  data: GetAttributesAttributeCodeOptions200One;
  status: number;
  headers: Headers;
}

export const getGetAttributesAttributeCodeOptionsUrl = (attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/attributes/${attributeCode}/options?${normalizedParams.toString()}` : `/api/rest/v1/attributes/${attributeCode}/options`
}

export const getAttributesAttributeCodeOptions = async (attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams, options?: RequestInit): Promise<getAttributesAttributeCodeOptionsResponse> => {
  
  const res = await fetch(getGetAttributesAttributeCodeOptionsUrl(attributeCode,params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAttributesAttributeCodeOptionsQueryKey = (attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams,) => {
    return [`/api/rest/v1/attributes/${attributeCode}/options`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAttributesAttributeCodeOptionsQueryOptions = <TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError = GetAttributesAttributeCodeOptions401One | GetAttributesAttributeCodeOptions403One | GetAttributesAttributeCodeOptions406One>(attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAttributesAttributeCodeOptionsQueryKey(attributeCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>> = ({ signal }) => getAttributesAttributeCodeOptions(attributeCode,params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(attributeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAttributesAttributeCodeOptionsQueryResult = NonNullable<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>>
export type GetAttributesAttributeCodeOptionsQueryError = GetAttributesAttributeCodeOptions401One | GetAttributesAttributeCodeOptions403One | GetAttributesAttributeCodeOptions406One


export function useGetAttributesAttributeCodeOptions<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError = GetAttributesAttributeCodeOptions401One | GetAttributesAttributeCodeOptions403One | GetAttributesAttributeCodeOptions406One>(
 attributeCode: string,
    params: undefined |  GetAttributesAttributeCodeOptionsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributesAttributeCodeOptions<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError = GetAttributesAttributeCodeOptions401One | GetAttributesAttributeCodeOptions403One | GetAttributesAttributeCodeOptions406One>(
 attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributesAttributeCodeOptions<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError = GetAttributesAttributeCodeOptions401One | GetAttributesAttributeCodeOptions403One | GetAttributesAttributeCodeOptions406One>(
 attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of attribute options
 */

export function useGetAttributesAttributeCodeOptions<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError = GetAttributesAttributeCodeOptions401One | GetAttributesAttributeCodeOptions403One | GetAttributesAttributeCodeOptions406One>(
 attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptions>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAttributesAttributeCodeOptionsQueryOptions(attributeCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update several attribute options at once.
 * @summary Update/create several attribute options
 */
export type patchAttributesAttributeCodeOptionsResponse = {
  data: PatchAttributesAttributeCodeOptions200One;
  status: number;
  headers: Headers;
}

export const getPatchAttributesAttributeCodeOptionsUrl = (attributeCode: string,) => {


  return `/api/rest/v1/attributes/${attributeCode}/options`
}

export const patchAttributesAttributeCodeOptions = async (attributeCode: string,
    patchAttributesAttributeCodeOptionsBody: PatchAttributesAttributeCodeOptionsBody, options?: RequestInit): Promise<patchAttributesAttributeCodeOptionsResponse> => {
  
  const res = await fetch(getPatchAttributesAttributeCodeOptionsUrl(attributeCode),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAttributesAttributeCodeOptionsBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAttributesAttributeCodeOptionsMutationOptions = <TError = PatchAttributesAttributeCodeOptions401One | PatchAttributesAttributeCodeOptions403One | PatchAttributesAttributeCodeOptions413One | PatchAttributesAttributeCodeOptions415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptions>>, TError,{attributeCode: string;data: PatchAttributesAttributeCodeOptionsBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptions>>, TError,{attributeCode: string;data: PatchAttributesAttributeCodeOptionsBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptions>>, {attributeCode: string;data: PatchAttributesAttributeCodeOptionsBody}> = (props) => {
          const {attributeCode,data} = props ?? {};

          return  patchAttributesAttributeCodeOptions(attributeCode,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAttributesAttributeCodeOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptions>>>
    export type PatchAttributesAttributeCodeOptionsMutationBody = PatchAttributesAttributeCodeOptionsBody
    export type PatchAttributesAttributeCodeOptionsMutationError = PatchAttributesAttributeCodeOptions401One | PatchAttributesAttributeCodeOptions403One | PatchAttributesAttributeCodeOptions413One | PatchAttributesAttributeCodeOptions415One

    /**
 * @summary Update/create several attribute options
 */
export const usePatchAttributesAttributeCodeOptions = <TError = PatchAttributesAttributeCodeOptions401One | PatchAttributesAttributeCodeOptions403One | PatchAttributesAttributeCodeOptions413One | PatchAttributesAttributeCodeOptions415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptions>>, TError,{attributeCode: string;data: PatchAttributesAttributeCodeOptionsBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAttributesAttributeCodeOptions>>,
        TError,
        {attributeCode: string;data: PatchAttributesAttributeCodeOptionsBody},
        TContext
      > => {

      const mutationOptions = getPatchAttributesAttributeCodeOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new attribute option.
 * @summary Create a new attribute option
 */
export type postAttributesAttributeCodeOptionsResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostAttributesAttributeCodeOptionsUrl = (attributeCode: string,) => {


  return `/api/rest/v1/attributes/${attributeCode}/options`
}

export const postAttributesAttributeCodeOptions = async (attributeCode: string,
    postAttributesAttributeCodeOptionsBody: PostAttributesAttributeCodeOptionsBody, options?: RequestInit): Promise<postAttributesAttributeCodeOptionsResponse> => {
  
  const res = await fetch(getPostAttributesAttributeCodeOptionsUrl(attributeCode),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAttributesAttributeCodeOptionsBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostAttributesAttributeCodeOptionsMutationOptions = <TError = PostAttributesAttributeCodeOptions400One | PostAttributesAttributeCodeOptions401One | PostAttributesAttributeCodeOptions403One | PostAttributesAttributeCodeOptions415One | PostAttributesAttributeCodeOptions422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAttributesAttributeCodeOptions>>, TError,{attributeCode: string;data: PostAttributesAttributeCodeOptionsBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAttributesAttributeCodeOptions>>, TError,{attributeCode: string;data: PostAttributesAttributeCodeOptionsBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAttributesAttributeCodeOptions>>, {attributeCode: string;data: PostAttributesAttributeCodeOptionsBody}> = (props) => {
          const {attributeCode,data} = props ?? {};

          return  postAttributesAttributeCodeOptions(attributeCode,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAttributesAttributeCodeOptionsMutationResult = NonNullable<Awaited<ReturnType<typeof postAttributesAttributeCodeOptions>>>
    export type PostAttributesAttributeCodeOptionsMutationBody = PostAttributesAttributeCodeOptionsBody
    export type PostAttributesAttributeCodeOptionsMutationError = PostAttributesAttributeCodeOptions400One | PostAttributesAttributeCodeOptions401One | PostAttributesAttributeCodeOptions403One | PostAttributesAttributeCodeOptions415One | PostAttributesAttributeCodeOptions422One

    /**
 * @summary Create a new attribute option
 */
export const usePostAttributesAttributeCodeOptions = <TError = PostAttributesAttributeCodeOptions400One | PostAttributesAttributeCodeOptions401One | PostAttributesAttributeCodeOptions403One | PostAttributesAttributeCodeOptions415One | PostAttributesAttributeCodeOptions422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAttributesAttributeCodeOptions>>, TError,{attributeCode: string;data: PostAttributesAttributeCodeOptionsBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postAttributesAttributeCodeOptions>>,
        TError,
        {attributeCode: string;data: PostAttributesAttributeCodeOptionsBody},
        TContext
      > => {

      const mutationOptions = getPostAttributesAttributeCodeOptionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given attribute option.
 * @summary Get an attribute option
 */
export type getAttributesAttributeCodeOptionsCodeResponse = {
  data: GetAttributesAttributeCodeOptionsCode200;
  status: number;
  headers: Headers;
}

export const getGetAttributesAttributeCodeOptionsCodeUrl = (attributeCode: string,
    code: string,) => {


  return `/api/rest/v1/attributes/${attributeCode}/options/${code}`
}

export const getAttributesAttributeCodeOptionsCode = async (attributeCode: string,
    code: string, options?: RequestInit): Promise<getAttributesAttributeCodeOptionsCodeResponse> => {
  
  const res = await fetch(getGetAttributesAttributeCodeOptionsCodeUrl(attributeCode,code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAttributesAttributeCodeOptionsCodeQueryKey = (attributeCode: string,
    code: string,) => {
    return [`/api/rest/v1/attributes/${attributeCode}/options/${code}`] as const;
    }

    
export const getGetAttributesAttributeCodeOptionsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError = GetAttributesAttributeCodeOptionsCode401One | GetAttributesAttributeCodeOptionsCode403One | GetAttributesAttributeCodeOptionsCode404One | GetAttributesAttributeCodeOptionsCode406One>(attributeCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAttributesAttributeCodeOptionsCodeQueryKey(attributeCode,code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>> = ({ signal }) => getAttributesAttributeCodeOptionsCode(attributeCode,code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(attributeCode && code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAttributesAttributeCodeOptionsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>>
export type GetAttributesAttributeCodeOptionsCodeQueryError = GetAttributesAttributeCodeOptionsCode401One | GetAttributesAttributeCodeOptionsCode403One | GetAttributesAttributeCodeOptionsCode404One | GetAttributesAttributeCodeOptionsCode406One


export function useGetAttributesAttributeCodeOptionsCode<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError = GetAttributesAttributeCodeOptionsCode401One | GetAttributesAttributeCodeOptionsCode403One | GetAttributesAttributeCodeOptionsCode404One | GetAttributesAttributeCodeOptionsCode406One>(
 attributeCode: string,
    code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributesAttributeCodeOptionsCode<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError = GetAttributesAttributeCodeOptionsCode401One | GetAttributesAttributeCodeOptionsCode403One | GetAttributesAttributeCodeOptionsCode404One | GetAttributesAttributeCodeOptionsCode406One>(
 attributeCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributesAttributeCodeOptionsCode<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError = GetAttributesAttributeCodeOptionsCode401One | GetAttributesAttributeCodeOptionsCode403One | GetAttributesAttributeCodeOptionsCode404One | GetAttributesAttributeCodeOptionsCode406One>(
 attributeCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an attribute option
 */

export function useGetAttributesAttributeCodeOptionsCode<TData = Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError = GetAttributesAttributeCodeOptionsCode401One | GetAttributesAttributeCodeOptionsCode403One | GetAttributesAttributeCodeOptionsCode404One | GetAttributesAttributeCodeOptionsCode406One>(
 attributeCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesAttributeCodeOptionsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAttributesAttributeCodeOptionsCodeQueryOptions(attributeCode,code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given attribute option. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
 * @summary Update/create an attribute option
 */
export type patchAttributesAttributeCodeOptionsCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchAttributesAttributeCodeOptionsCodeUrl = (attributeCode: string,
    code: string,) => {


  return `/api/rest/v1/attributes/${attributeCode}/options/${code}`
}

export const patchAttributesAttributeCodeOptionsCode = async (attributeCode: string,
    code: string,
    patchAttributesAttributeCodeOptionsCodeBody: PatchAttributesAttributeCodeOptionsCodeBody, options?: RequestInit): Promise<patchAttributesAttributeCodeOptionsCodeResponse> => {
  
  const res = await fetch(getPatchAttributesAttributeCodeOptionsCodeUrl(attributeCode,code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAttributesAttributeCodeOptionsCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAttributesAttributeCodeOptionsCodeMutationOptions = <TError = PatchAttributesAttributeCodeOptionsCode400One | PatchAttributesAttributeCodeOptionsCode401One | PatchAttributesAttributeCodeOptionsCode403One | PatchAttributesAttributeCodeOptionsCode415One | PatchAttributesAttributeCodeOptionsCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptionsCode>>, TError,{attributeCode: string;code: string;data: PatchAttributesAttributeCodeOptionsCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptionsCode>>, TError,{attributeCode: string;code: string;data: PatchAttributesAttributeCodeOptionsCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptionsCode>>, {attributeCode: string;code: string;data: PatchAttributesAttributeCodeOptionsCodeBody}> = (props) => {
          const {attributeCode,code,data} = props ?? {};

          return  patchAttributesAttributeCodeOptionsCode(attributeCode,code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAttributesAttributeCodeOptionsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptionsCode>>>
    export type PatchAttributesAttributeCodeOptionsCodeMutationBody = PatchAttributesAttributeCodeOptionsCodeBody
    export type PatchAttributesAttributeCodeOptionsCodeMutationError = PatchAttributesAttributeCodeOptionsCode400One | PatchAttributesAttributeCodeOptionsCode401One | PatchAttributesAttributeCodeOptionsCode403One | PatchAttributesAttributeCodeOptionsCode415One | PatchAttributesAttributeCodeOptionsCode422One

    /**
 * @summary Update/create an attribute option
 */
export const usePatchAttributesAttributeCodeOptionsCode = <TError = PatchAttributesAttributeCodeOptionsCode400One | PatchAttributesAttributeCodeOptionsCode401One | PatchAttributesAttributeCodeOptionsCode403One | PatchAttributesAttributeCodeOptionsCode415One | PatchAttributesAttributeCodeOptionsCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributesAttributeCodeOptionsCode>>, TError,{attributeCode: string;code: string;data: PatchAttributesAttributeCodeOptionsCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAttributesAttributeCodeOptionsCode>>,
        TError,
        {attributeCode: string;code: string;data: PatchAttributesAttributeCodeOptionsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAttributesAttributeCodeOptionsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    