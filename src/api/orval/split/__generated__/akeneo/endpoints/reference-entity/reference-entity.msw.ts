/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetReferenceEntities200One,
  GetReferenceEntitiesCode200
} from '../../model'

export const getGetReferenceEntitiesResponseMock = (): GetReferenceEntities200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{image_download: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),code: faker.string.alpha(20), image: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), labels: faker.helpers.arrayElement([{localeCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined])}, undefined])})

export const getGetReferenceEntitiesCodeResponseMock = (): GetReferenceEntitiesCode200 => ({"_links":{"image_download":{"href":"https://demo.akeneo.com/api/rest/v1/reference-entities-media-files/0/2/d/6/54d81dc888ba1501a8g765f3ab5797569f3bv756c_ref_img.png"}},"code":"brands","image":"0/2/d/6/54d81dc888ba1501a8g765f3ab5797569f3bv756c_ref_img.png","labels":{"en_US":"Brands","fr_FR":"Marques"}})


export const getGetReferenceEntitiesMockHandler = (overrideResponse?: GetReferenceEntities200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetReferenceEntities200One> | GetReferenceEntities200One)) => {
  return http.get('*/api/rest/v1/reference-entities', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReferenceEntitiesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetReferenceEntitiesCodeMockHandler = (overrideResponse?: GetReferenceEntitiesCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetReferenceEntitiesCode200> | GetReferenceEntitiesCode200)) => {
  return http.get('*/api/rest/v1/reference-entities/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReferenceEntitiesCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchReferenceEntityCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/reference-entities/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getReferenceEntityMock = () => [
  getGetReferenceEntitiesMockHandler(),
  getGetReferenceEntitiesCodeMockHandler(),
  getPatchReferenceEntityCodeMockHandler()
]
