/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetAssetAttributesAttributeCodeOptionsCode200,
  GetAssetFamilyAttributesAttributeCodeOptions200Item
} from '../../model'

export const getGetAssetFamilyAttributesAttributeCodeOptionsResponseMock = (): GetAssetFamilyAttributesAttributeCodeOptions200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.string.alpha(20), labels: faker.helpers.arrayElement([{localeCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})))

export const getGetAssetAttributesAttributeCodeOptionsCodeResponseMock = (): GetAssetAttributesAttributeCodeOptionsCode200 => ({"code":"small","labels":{"en_US":"S","fr_FR":"S"}})


export const getGetAssetFamilyAttributesAttributeCodeOptionsMockHandler = (overrideResponse?: GetAssetFamilyAttributesAttributeCodeOptions200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAssetFamilyAttributesAttributeCodeOptions200Item[]> | GetAssetFamilyAttributesAttributeCodeOptions200Item[])) => {
  return http.get('*/api/rest/v1/asset-families/:assetFamilyCode/attributes/:attributeCode/options', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssetFamilyAttributesAttributeCodeOptionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAssetAttributesAttributeCodeOptionsCodeMockHandler = (overrideResponse?: GetAssetAttributesAttributeCodeOptionsCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAssetAttributesAttributeCodeOptionsCode200> | GetAssetAttributesAttributeCodeOptionsCode200)) => {
  return http.get('*/api/rest/v1/asset-families/:assetFamilyCode/attributes/:attributeCode/options/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssetAttributesAttributeCodeOptionsCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchAssetAttributesAttributeCodeOptionsCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/asset-families/:assetFamilyCode/attributes/:attributeCode/options/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getAssetAttributeOptionMock = () => [
  getGetAssetFamilyAttributesAttributeCodeOptionsMockHandler(),
  getGetAssetAttributesAttributeCodeOptionsCodeMockHandler(),
  getPatchAssetAttributesAttributeCodeOptionsCodeMockHandler()
]
