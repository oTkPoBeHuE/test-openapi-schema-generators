/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetCategories200One,
  GetCategoriesCode200,
  PatchCategories200One
} from '../../model'

export const getGetCategoriesResponseMock = (): GetCategories200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), previous: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]), current_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),code: faker.string.alpha(20), labels: faker.helpers.arrayElement([{localeCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), parent: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), position: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), updated: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), values: faker.helpers.arrayElement([{'attributeCode|attributeUuid|channelCode|localeCode': faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({attribute_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), channel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{}, undefined]), locale: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])}, undefined])})), undefined])}, undefined])})

export const getPatchCategoriesResponseMock = (overrideResponse: Partial< PatchCategories200One > = {}): PatchCategories200One => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), identifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), line: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status_code: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetCategoriesCodeResponseMock = (): GetCategoriesCode200 => ({"code":"winter_collection","labels":{"en_US":"Winter collection","fr_FR":"Collection hiver"},"parent":null,"position":1,"updated":"2024-12-14T16:37:10.508Z","values":{"description|96b88bf4-c2b7-4b64-a1f9-5d4876c02c26|ecommerce|en_US":{"attribute_code":"description|96b88bf4-c2b7-4b64-a1f9-5d4876c02c26","channel":"ecommerce","data":"<p>Winter collection description</p>\n","locale":"en_US","type":"textarea"}}})


export const getGetCategoriesMockHandler = (overrideResponse?: GetCategories200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetCategories200One> | GetCategories200One)) => {
  return http.get('*/api/rest/v1/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCategoriesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchCategoriesMockHandler = (overrideResponse?: PatchCategories200One | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchCategories200One> | PatchCategories200One)) => {
  return http.patch('*/api/rest/v1/categories', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchCategoriesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostCategoriesMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/rest/v1/categories', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getGetCategoriesCodeMockHandler = (overrideResponse?: GetCategoriesCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetCategoriesCode200> | GetCategoriesCode200)) => {
  return http.get('*/api/rest/v1/categories/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCategoriesCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchCategoriesCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/categories/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getGetCategoryMediaFilesCodeDownloadMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/rest/v1/category-media-files/:code/download', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}
export const getCategoryMock = () => [
  getGetCategoriesMockHandler(),
  getPatchCategoriesMockHandler(),
  getPostCategoriesMockHandler(),
  getGetCategoriesCodeMockHandler(),
  getPatchCategoriesCodeMockHandler(),
  getGetCategoryMediaFilesCodeDownloadMockHandler()
]
