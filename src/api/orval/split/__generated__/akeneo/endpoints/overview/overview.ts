/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetEndpoints200One
} from '../../model/getEndpoints200One'
import type {
  GetEndpoints406One
} from '../../model/getEndpoints406One'



/**
 * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
 * @summary Get list of all endpoints
 */
export const getEndpoints = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetEndpoints200One>> => {
    
    return axios.default.get(
      `/api/rest/v1`,options
    );
  }


export const getGetEndpointsQueryKey = () => {
    return [`/api/rest/v1`] as const;
    }

    
export const getGetEndpointsQueryOptions = <TData = Awaited<ReturnType<typeof getEndpoints>>, TError = AxiosError<GetEndpoints406One>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEndpoints>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEndpointsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEndpoints>>> = ({ signal }) => getEndpoints({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEndpoints>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetEndpointsQueryResult = NonNullable<Awaited<ReturnType<typeof getEndpoints>>>
export type GetEndpointsQueryError = AxiosError<GetEndpoints406One>


export function useGetEndpoints<TData = Awaited<ReturnType<typeof getEndpoints>>, TError = AxiosError<GetEndpoints406One>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEndpoints>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEndpoints>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEndpoints<TData = Awaited<ReturnType<typeof getEndpoints>>, TError = AxiosError<GetEndpoints406One>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEndpoints>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEndpoints>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetEndpoints<TData = Awaited<ReturnType<typeof getEndpoints>>, TError = AxiosError<GetEndpoints406One>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEndpoints>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of all endpoints
 */

export function useGetEndpoints<TData = Awaited<ReturnType<typeof getEndpoints>>, TError = AxiosError<GetEndpoints406One>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEndpoints>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetEndpointsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



