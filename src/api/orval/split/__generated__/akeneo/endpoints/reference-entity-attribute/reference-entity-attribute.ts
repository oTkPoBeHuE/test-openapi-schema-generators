/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetReferenceEntitiesCodeAttributes200Item
} from '../../model/getReferenceEntitiesCodeAttributes200Item'
import type {
  GetReferenceEntitiesCodeAttributes401One
} from '../../model/getReferenceEntitiesCodeAttributes401One'
import type {
  GetReferenceEntitiesCodeAttributes406One
} from '../../model/getReferenceEntitiesCodeAttributes406One'
import type {
  GetReferenceEntityAttributesCode200
} from '../../model/getReferenceEntityAttributesCode200'
import type {
  GetReferenceEntityAttributesCode401One
} from '../../model/getReferenceEntityAttributesCode401One'
import type {
  GetReferenceEntityAttributesCode404One
} from '../../model/getReferenceEntityAttributesCode404One'
import type {
  GetReferenceEntityAttributesCode406One
} from '../../model/getReferenceEntityAttributesCode406One'
import type {
  PatchReferenceEntityAttributesCode401One
} from '../../model/patchReferenceEntityAttributesCode401One'
import type {
  PatchReferenceEntityAttributesCode415One
} from '../../model/patchReferenceEntityAttributesCode415One'
import type {
  PatchReferenceEntityAttributesCode422One
} from '../../model/patchReferenceEntityAttributesCode422One'
import type {
  PatchReferenceEntityAttributesCodeBody
} from '../../model/patchReferenceEntityAttributesCodeBody'



/**
 * This endpoint allows you to get the list of attributes of a given reference entity.
 * @summary Get the list of attributes of a given reference entity
 */
export const getReferenceEntitiesCodeAttributes = (
    referenceEntityCode: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetReferenceEntitiesCodeAttributes200Item[]>> => {
    
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes`,options
    );
  }


export const getGetReferenceEntitiesCodeAttributesQueryKey = (referenceEntityCode: string,) => {
    return [`/api/rest/v1/reference-entities/${referenceEntityCode}/attributes`] as const;
    }

    
export const getGetReferenceEntitiesCodeAttributesQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError = AxiosError<GetReferenceEntitiesCodeAttributes401One | GetReferenceEntitiesCodeAttributes406One>>(referenceEntityCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceEntitiesCodeAttributesQueryKey(referenceEntityCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>> = ({ signal }) => getReferenceEntitiesCodeAttributes(referenceEntityCode, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(referenceEntityCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceEntitiesCodeAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>>
export type GetReferenceEntitiesCodeAttributesQueryError = AxiosError<GetReferenceEntitiesCodeAttributes401One | GetReferenceEntitiesCodeAttributes406One>


export function useGetReferenceEntitiesCodeAttributes<TData = Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError = AxiosError<GetReferenceEntitiesCodeAttributes401One | GetReferenceEntitiesCodeAttributes406One>>(
 referenceEntityCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntitiesCodeAttributes<TData = Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError = AxiosError<GetReferenceEntitiesCodeAttributes401One | GetReferenceEntitiesCodeAttributes406One>>(
 referenceEntityCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntitiesCodeAttributes<TData = Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError = AxiosError<GetReferenceEntitiesCodeAttributes401One | GetReferenceEntitiesCodeAttributes406One>>(
 referenceEntityCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of attributes of a given reference entity
 */

export function useGetReferenceEntitiesCodeAttributes<TData = Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError = AxiosError<GetReferenceEntitiesCodeAttributes401One | GetReferenceEntitiesCodeAttributes406One>>(
 referenceEntityCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntitiesCodeAttributes>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceEntitiesCodeAttributesQueryOptions(referenceEntityCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given attribute for a given reference entity.
 * @summary Get an attribute of a given reference entity
 */
export const getReferenceEntityAttributesCode = (
    referenceEntityCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetReferenceEntityAttributesCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${code}`,options
    );
  }


export const getGetReferenceEntityAttributesCodeQueryKey = (referenceEntityCode: string,
    code: string,) => {
    return [`/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${code}`] as const;
    }

    
export const getGetReferenceEntityAttributesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError = AxiosError<GetReferenceEntityAttributesCode401One | GetReferenceEntityAttributesCode404One | GetReferenceEntityAttributesCode406One>>(referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceEntityAttributesCodeQueryKey(referenceEntityCode,code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>> = ({ signal }) => getReferenceEntityAttributesCode(referenceEntityCode,code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(referenceEntityCode && code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceEntityAttributesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>>
export type GetReferenceEntityAttributesCodeQueryError = AxiosError<GetReferenceEntityAttributesCode401One | GetReferenceEntityAttributesCode404One | GetReferenceEntityAttributesCode406One>


export function useGetReferenceEntityAttributesCode<TData = Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError = AxiosError<GetReferenceEntityAttributesCode401One | GetReferenceEntityAttributesCode404One | GetReferenceEntityAttributesCode406One>>(
 referenceEntityCode: string,
    code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityAttributesCode<TData = Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError = AxiosError<GetReferenceEntityAttributesCode401One | GetReferenceEntityAttributesCode404One | GetReferenceEntityAttributesCode406One>>(
 referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityAttributesCode<TData = Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError = AxiosError<GetReferenceEntityAttributesCode401One | GetReferenceEntityAttributesCode404One | GetReferenceEntityAttributesCode406One>>(
 referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an attribute of a given reference entity
 */

export function useGetReferenceEntityAttributesCode<TData = Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError = AxiosError<GetReferenceEntityAttributesCode401One | GetReferenceEntityAttributesCode404One | GetReferenceEntityAttributesCode406One>>(
 referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityAttributesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceEntityAttributesCodeQueryOptions(referenceEntityCode,code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
 * @summary Update/create an attribute of a given reference entity
 */
export const patchReferenceEntityAttributesCode = (
    referenceEntityCode: string,
    code: string,
    patchReferenceEntityAttributesCodeBody: PatchReferenceEntityAttributesCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${code}`,
      patchReferenceEntityAttributesCodeBody,options
    );
  }



export const getPatchReferenceEntityAttributesCodeMutationOptions = <TError = AxiosError<PatchReferenceEntityAttributesCode401One | PatchReferenceEntityAttributesCode415One | PatchReferenceEntityAttributesCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityAttributesCode>>, TError,{referenceEntityCode: string;code: string;data: PatchReferenceEntityAttributesCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityAttributesCode>>, TError,{referenceEntityCode: string;code: string;data: PatchReferenceEntityAttributesCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchReferenceEntityAttributesCode>>, {referenceEntityCode: string;code: string;data: PatchReferenceEntityAttributesCodeBody}> = (props) => {
          const {referenceEntityCode,code,data} = props ?? {};

          return  patchReferenceEntityAttributesCode(referenceEntityCode,code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchReferenceEntityAttributesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchReferenceEntityAttributesCode>>>
    export type PatchReferenceEntityAttributesCodeMutationBody = PatchReferenceEntityAttributesCodeBody
    export type PatchReferenceEntityAttributesCodeMutationError = AxiosError<PatchReferenceEntityAttributesCode401One | PatchReferenceEntityAttributesCode415One | PatchReferenceEntityAttributesCode422One>

    /**
 * @summary Update/create an attribute of a given reference entity
 */
export const usePatchReferenceEntityAttributesCode = <TError = AxiosError<PatchReferenceEntityAttributesCode401One | PatchReferenceEntityAttributesCode415One | PatchReferenceEntityAttributesCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityAttributesCode>>, TError,{referenceEntityCode: string;code: string;data: PatchReferenceEntityAttributesCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchReferenceEntityAttributesCode>>,
        TError,
        {referenceEntityCode: string;code: string;data: PatchReferenceEntityAttributesCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchReferenceEntityAttributesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    