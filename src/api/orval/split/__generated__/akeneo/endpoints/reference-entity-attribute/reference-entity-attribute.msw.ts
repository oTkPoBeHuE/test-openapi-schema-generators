/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetReferenceEntitiesCodeAttributes200Item,
  GetReferenceEntityAttributesCode200
} from '../../model'

export const getGetReferenceEntitiesCodeAttributesResponseMock = (): GetReferenceEntitiesCodeAttributes200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({allowed_extensions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), code: faker.string.alpha(20), decimals_allowed: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_required_for_completeness: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_rich_text_editor: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), is_textarea: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), labels: faker.helpers.arrayElement([{localeCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), max_characters: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), max_file_size: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), max_value: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), min_value: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), reference_entity_code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), type: faker.helpers.arrayElement(['text','image','number','single_option','multiple_options','reference_entity_single_link','reference_entity_multiple_links'] as const), validation_regexp: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), validation_rule: faker.helpers.arrayElement([faker.helpers.arrayElement(['email','url','regexp','none'] as const), undefined]), value_per_channel: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), value_per_locale: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetReferenceEntityAttributesCodeResponseMock = (): GetReferenceEntityAttributesCode200 => ({"code":"description","is_required_for_completeness":true,"is_rich_text_editor":true,"is_textarea":true,"labels":{"en_US":"Description","fr_FR":"Description"},"max_characters":null,"type":"text","validation_regexp":null,"validation_rule":"none","value_per_channel":false,"value_per_locale":true})


export const getGetReferenceEntitiesCodeAttributesMockHandler = (overrideResponse?: GetReferenceEntitiesCodeAttributes200Item[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetReferenceEntitiesCodeAttributes200Item[]> | GetReferenceEntitiesCodeAttributes200Item[])) => {
  return http.get('*/api/rest/v1/reference-entities/:referenceEntityCode/attributes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReferenceEntitiesCodeAttributesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetReferenceEntityAttributesCodeMockHandler = (overrideResponse?: GetReferenceEntityAttributesCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetReferenceEntityAttributesCode200> | GetReferenceEntityAttributesCode200)) => {
  return http.get('*/api/rest/v1/reference-entities/:referenceEntityCode/attributes/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReferenceEntityAttributesCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchReferenceEntityAttributesCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/reference-entities/:referenceEntityCode/attributes/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getReferenceEntityAttributeMock = () => [
  getGetReferenceEntitiesCodeAttributesMockHandler(),
  getGetReferenceEntityAttributesCodeMockHandler(),
  getPatchReferenceEntityAttributesCodeMockHandler()
]
