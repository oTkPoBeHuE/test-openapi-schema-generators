/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetMediaFiles200One
} from '../../model/getMediaFiles200One'
import type {
  GetMediaFiles401One
} from '../../model/getMediaFiles401One'
import type {
  GetMediaFiles403One
} from '../../model/getMediaFiles403One'
import type {
  GetMediaFiles406One
} from '../../model/getMediaFiles406One'
import type {
  GetMediaFilesCode200
} from '../../model/getMediaFilesCode200'
import type {
  GetMediaFilesCode401One
} from '../../model/getMediaFilesCode401One'
import type {
  GetMediaFilesCode403One
} from '../../model/getMediaFilesCode403One'
import type {
  GetMediaFilesCode404One
} from '../../model/getMediaFilesCode404One'
import type {
  GetMediaFilesCode406One
} from '../../model/getMediaFilesCode406One'
import type {
  GetMediaFilesCodeDownload401One
} from '../../model/getMediaFilesCodeDownload401One'
import type {
  GetMediaFilesCodeDownload403One
} from '../../model/getMediaFilesCodeDownload403One'
import type {
  GetMediaFilesCodeDownload404One
} from '../../model/getMediaFilesCodeDownload404One'
import type {
  GetMediaFilesParams
} from '../../model/getMediaFilesParams'
import type {
  PostMediaFiles400One
} from '../../model/postMediaFiles400One'
import type {
  PostMediaFiles401One
} from '../../model/postMediaFiles401One'
import type {
  PostMediaFiles403One
} from '../../model/postMediaFiles403One'
import type {
  PostMediaFiles415One
} from '../../model/postMediaFiles415One'
import type {
  PostMediaFiles422One
} from '../../model/postMediaFiles422One'
import type {
  PostMediaFilesBody
} from '../../model/postMediaFilesBody'
import type {
  PostMediaFilesHeaders
} from '../../model/postMediaFilesHeaders'



/**
 * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
 * @summary Get a list of product media files
 */
export const getMediaFiles = (
    params?: GetMediaFilesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetMediaFiles200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/media-files`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMediaFilesQueryKey = (params?: GetMediaFilesParams,) => {
    return [`/api/rest/v1/media-files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMediaFilesQueryOptions = <TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = AxiosError<GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>>(params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMediaFilesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMediaFiles>>> = ({ signal }) => getMediaFiles(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMediaFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getMediaFiles>>>
export type GetMediaFilesQueryError = AxiosError<GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>


export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = AxiosError<GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>>(
 params: undefined |  GetMediaFilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFiles>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = AxiosError<GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>>(
 params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFiles>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = AxiosError<GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>>(
 params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of product media files
 */

export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = AxiosError<GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>>(
 params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMediaFilesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
 * @summary Create a new product media file
 */
export const postMediaFiles = (
    postMediaFilesBody: PostMediaFilesBody,
    headers: PostMediaFilesHeaders, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/media-files`,
      postMediaFilesBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }



export const getPostMediaFilesMutationOptions = <TError = AxiosError<PostMediaFiles400One | PostMediaFiles401One | PostMediaFiles403One | PostMediaFiles415One | PostMediaFiles422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMediaFiles>>, TError,{data: PostMediaFilesBody;headers: PostMediaFilesHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postMediaFiles>>, TError,{data: PostMediaFilesBody;headers: PostMediaFilesHeaders}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMediaFiles>>, {data: PostMediaFilesBody;headers: PostMediaFilesHeaders}> = (props) => {
          const {data,headers} = props ?? {};

          return  postMediaFiles(data,headers,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMediaFilesMutationResult = NonNullable<Awaited<ReturnType<typeof postMediaFiles>>>
    export type PostMediaFilesMutationBody = PostMediaFilesBody
    export type PostMediaFilesMutationError = AxiosError<PostMediaFiles400One | PostMediaFiles401One | PostMediaFiles403One | PostMediaFiles415One | PostMediaFiles422One>

    /**
 * @summary Create a new product media file
 */
export const usePostMediaFiles = <TError = AxiosError<PostMediaFiles400One | PostMediaFiles401One | PostMediaFiles403One | PostMediaFiles415One | PostMediaFiles422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMediaFiles>>, TError,{data: PostMediaFilesBody;headers: PostMediaFilesHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postMediaFiles>>,
        TError,
        {data: PostMediaFilesBody;headers: PostMediaFilesHeaders},
        TContext
      > => {

      const mutationOptions = getPostMediaFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
 * @summary Get a product media file
 */
export const getMediaFilesCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetMediaFilesCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/media-files/${code}`,options
    );
  }


export const getGetMediaFilesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/media-files/${code}`] as const;
    }

    
export const getGetMediaFilesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = AxiosError<GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMediaFilesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMediaFilesCode>>> = ({ signal }) => getMediaFilesCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMediaFilesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getMediaFilesCode>>>
export type GetMediaFilesCodeQueryError = AxiosError<GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>


export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = AxiosError<GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = AxiosError<GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = AxiosError<GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a product media file
 */

export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = AxiosError<GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMediaFilesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
 * @summary Download a product media file
 */
export const getMediaFilesCodeDownload = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/api/rest/v1/media-files/${code}/download`,options
    );
  }


export const getGetMediaFilesCodeDownloadQueryKey = (code: string,) => {
    return [`/api/rest/v1/media-files/${code}/download`] as const;
    }

    
export const getGetMediaFilesCodeDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = AxiosError<GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMediaFilesCodeDownloadQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>> = ({ signal }) => getMediaFilesCodeDownload(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMediaFilesCodeDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>>
export type GetMediaFilesCodeDownloadQueryError = AxiosError<GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>


export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = AxiosError<GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = AxiosError<GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = AxiosError<GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download a product media file
 */

export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = AxiosError<GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMediaFilesCodeDownloadQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



