/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetMediaFiles200One
} from '../../model/getMediaFiles200One'
import type {
  GetMediaFiles401One
} from '../../model/getMediaFiles401One'
import type {
  GetMediaFiles403One
} from '../../model/getMediaFiles403One'
import type {
  GetMediaFiles406One
} from '../../model/getMediaFiles406One'
import type {
  GetMediaFilesCode200
} from '../../model/getMediaFilesCode200'
import type {
  GetMediaFilesCode401One
} from '../../model/getMediaFilesCode401One'
import type {
  GetMediaFilesCode403One
} from '../../model/getMediaFilesCode403One'
import type {
  GetMediaFilesCode404One
} from '../../model/getMediaFilesCode404One'
import type {
  GetMediaFilesCode406One
} from '../../model/getMediaFilesCode406One'
import type {
  GetMediaFilesCodeDownload401One
} from '../../model/getMediaFilesCodeDownload401One'
import type {
  GetMediaFilesCodeDownload403One
} from '../../model/getMediaFilesCodeDownload403One'
import type {
  GetMediaFilesCodeDownload404One
} from '../../model/getMediaFilesCodeDownload404One'
import type {
  GetMediaFilesParams
} from '../../model/getMediaFilesParams'
import type {
  PostMediaFiles400One
} from '../../model/postMediaFiles400One'
import type {
  PostMediaFiles401One
} from '../../model/postMediaFiles401One'
import type {
  PostMediaFiles403One
} from '../../model/postMediaFiles403One'
import type {
  PostMediaFiles415One
} from '../../model/postMediaFiles415One'
import type {
  PostMediaFiles422One
} from '../../model/postMediaFiles422One'
import type {
  PostMediaFilesBody
} from '../../model/postMediaFilesBody'
import type {
  PostMediaFilesHeaders
} from '../../model/postMediaFilesHeaders'



/**
 * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
 * @summary Get a list of product media files
 */
export type getMediaFilesResponse = {
  data: GetMediaFiles200One;
  status: number;
  headers: Headers;
}

export const getGetMediaFilesUrl = (params?: GetMediaFilesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/media-files?${normalizedParams.toString()}` : `/api/rest/v1/media-files`
}

export const getMediaFiles = async (params?: GetMediaFilesParams, options?: RequestInit): Promise<getMediaFilesResponse> => {
  
  const res = await fetch(getGetMediaFilesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetMediaFilesQueryKey = (params?: GetMediaFilesParams,) => {
    return [`/api/rest/v1/media-files`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMediaFilesQueryOptions = <TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>(params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMediaFilesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMediaFiles>>> = ({ signal }) => getMediaFiles(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMediaFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getMediaFiles>>>
export type GetMediaFilesQueryError = GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One


export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>(
 params: undefined |  GetMediaFilesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFiles>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>(
 params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFiles>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>(
 params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of product media files
 */

export function useGetMediaFiles<TData = Awaited<ReturnType<typeof getMediaFiles>>, TError = GetMediaFiles401One | GetMediaFiles403One | GetMediaFiles406One>(
 params?: GetMediaFilesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFiles>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMediaFilesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
 * @summary Create a new product media file
 */
export type postMediaFilesResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostMediaFilesUrl = () => {


  return `/api/rest/v1/media-files`
}

export const postMediaFiles = async (postMediaFilesBody: PostMediaFilesBody,
    headers: PostMediaFilesHeaders, options?: RequestInit): Promise<postMediaFilesResponse> => {
  
  const res = await fetch(getPostMediaFilesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postMediaFilesBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostMediaFilesMutationOptions = <TError = PostMediaFiles400One | PostMediaFiles401One | PostMediaFiles403One | PostMediaFiles415One | PostMediaFiles422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMediaFiles>>, TError,{data: PostMediaFilesBody;headers: PostMediaFilesHeaders}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postMediaFiles>>, TError,{data: PostMediaFilesBody;headers: PostMediaFilesHeaders}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMediaFiles>>, {data: PostMediaFilesBody;headers: PostMediaFilesHeaders}> = (props) => {
          const {data,headers} = props ?? {};

          return  postMediaFiles(data,headers,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMediaFilesMutationResult = NonNullable<Awaited<ReturnType<typeof postMediaFiles>>>
    export type PostMediaFilesMutationBody = PostMediaFilesBody
    export type PostMediaFilesMutationError = PostMediaFiles400One | PostMediaFiles401One | PostMediaFiles403One | PostMediaFiles415One | PostMediaFiles422One

    /**
 * @summary Create a new product media file
 */
export const usePostMediaFiles = <TError = PostMediaFiles400One | PostMediaFiles401One | PostMediaFiles403One | PostMediaFiles415One | PostMediaFiles422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMediaFiles>>, TError,{data: PostMediaFilesBody;headers: PostMediaFilesHeaders}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postMediaFiles>>,
        TError,
        {data: PostMediaFilesBody;headers: PostMediaFilesHeaders},
        TContext
      > => {

      const mutationOptions = getPostMediaFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
 * @summary Get a product media file
 */
export type getMediaFilesCodeResponse = {
  data: GetMediaFilesCode200;
  status: number;
  headers: Headers;
}

export const getGetMediaFilesCodeUrl = (code: string,) => {


  return `/api/rest/v1/media-files/${code}`
}

export const getMediaFilesCode = async (code: string, options?: RequestInit): Promise<getMediaFilesCodeResponse> => {
  
  const res = await fetch(getGetMediaFilesCodeUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetMediaFilesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/media-files/${code}`] as const;
    }

    
export const getGetMediaFilesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMediaFilesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMediaFilesCode>>> = ({ signal }) => getMediaFilesCode(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMediaFilesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getMediaFilesCode>>>
export type GetMediaFilesCodeQueryError = GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One


export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a product media file
 */

export function useGetMediaFilesCode<TData = Awaited<ReturnType<typeof getMediaFilesCode>>, TError = GetMediaFilesCode401One | GetMediaFilesCode403One | GetMediaFilesCode404One | GetMediaFilesCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMediaFilesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
 * @summary Download a product media file
 */
export type getMediaFilesCodeDownloadResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getGetMediaFilesCodeDownloadUrl = (code: string,) => {


  return `/api/rest/v1/media-files/${code}/download`
}

export const getMediaFilesCodeDownload = async (code: string, options?: RequestInit): Promise<getMediaFilesCodeDownloadResponse> => {
  
  const res = await fetch(getGetMediaFilesCodeDownloadUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetMediaFilesCodeDownloadQueryKey = (code: string,) => {
    return [`/api/rest/v1/media-files/${code}/download`] as const;
    }

    
export const getGetMediaFilesCodeDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMediaFilesCodeDownloadQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>> = ({ signal }) => getMediaFilesCodeDownload(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMediaFilesCodeDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>>
export type GetMediaFilesCodeDownloadQueryError = GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One


export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMediaFilesCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download a product media file
 */

export function useGetMediaFilesCodeDownload<TData = Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError = GetMediaFilesCodeDownload401One | GetMediaFilesCodeDownload403One | GetMediaFilesCodeDownload404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMediaFilesCodeDownload>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMediaFilesCodeDownloadQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



