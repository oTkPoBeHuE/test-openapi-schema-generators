/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  PostToken200One
} from '../../model/postToken200One'
import type {
  PostToken400One
} from '../../model/postToken400One'
import type {
  PostToken415One
} from '../../model/postToken415One'
import type {
  PostToken422One
} from '../../model/postToken422One'
import type {
  PostTokenBody
} from '../../model/postTokenBody'
import type {
  PostTokenHeaders
} from '../../model/postTokenHeaders'



/**
 * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
 * @summary Get authentication token
 */
export const postToken = (
    postTokenBody: PostTokenBody,
    headers: PostTokenHeaders, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostToken200One>> => {
    
    return axios.default.post(
      `/api/oauth/v1/token`,
      postTokenBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }



export const getPostTokenMutationOptions = <TError = AxiosError<PostToken400One | PostToken415One | PostToken422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postToken>>, TError,{data: PostTokenBody;headers: PostTokenHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postToken>>, TError,{data: PostTokenBody;headers: PostTokenHeaders}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postToken>>, {data: PostTokenBody;headers: PostTokenHeaders}> = (props) => {
          const {data,headers} = props ?? {};

          return  postToken(data,headers,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postToken>>>
    export type PostTokenMutationBody = PostTokenBody
    export type PostTokenMutationError = AxiosError<PostToken400One | PostToken415One | PostToken422One>

    /**
 * @summary Get authentication token
 */
export const usePostToken = <TError = AxiosError<PostToken400One | PostToken415One | PostToken422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postToken>>, TError,{data: PostTokenBody;headers: PostTokenHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postToken>>,
        TError,
        {data: PostTokenBody;headers: PostTokenHeaders},
        TContext
      > => {

      const mutationOptions = getPostTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    