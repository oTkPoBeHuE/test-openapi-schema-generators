/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  PostToken200One
} from '../../model'

export const getPostTokenResponseMock = (overrideResponse: Partial< PostToken200One > = {}): PostToken200One => ({access_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), expires_in: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), refresh_token: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scope: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), token_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getPostTokenMockHandler = (overrideResponse?: PostToken200One | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PostToken200One> | PostToken200One)) => {
  return http.post('*/api/oauth/v1/token', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostTokenResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthenticationMock = () => [
  getPostTokenMockHandler()
]
