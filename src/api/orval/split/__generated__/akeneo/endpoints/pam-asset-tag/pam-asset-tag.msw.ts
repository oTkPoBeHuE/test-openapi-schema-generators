/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetAssetTags200One,
  GetAssetTagsCode200
} from '../../model'

export const getGetAssetTagsResponseMock = (): GetAssetTags200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), previous: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]), current_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),code: faker.string.alpha(20)})), undefined])}, undefined])})

export const getGetAssetTagsCodeResponseMock = (): GetAssetTagsCode200 => ({"code":"tshirt"})


export const getGetAssetTagsMockHandler = (overrideResponse?: GetAssetTags200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAssetTags200One> | GetAssetTags200One)) => {
  return http.get('*/api/rest/v1/asset-tags', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssetTagsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAssetTagsCodeMockHandler = (overrideResponse?: GetAssetTagsCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAssetTagsCode200> | GetAssetTagsCode200)) => {
  return http.get('*/api/rest/v1/asset-tags/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssetTagsCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchAssetTagsCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/asset-tags/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getPamAssetTagMock = () => [
  getGetAssetTagsMockHandler(),
  getGetAssetTagsCodeMockHandler(),
  getPatchAssetTagsCodeMockHandler()
]
