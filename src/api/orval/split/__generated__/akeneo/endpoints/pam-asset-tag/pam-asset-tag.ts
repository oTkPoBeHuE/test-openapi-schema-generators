/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetAssetTags200One
} from '../../model/getAssetTags200One'
import type {
  GetAssetTags401One
} from '../../model/getAssetTags401One'
import type {
  GetAssetTags403One
} from '../../model/getAssetTags403One'
import type {
  GetAssetTags406One
} from '../../model/getAssetTags406One'
import type {
  GetAssetTagsCode200
} from '../../model/getAssetTagsCode200'
import type {
  GetAssetTagsCode401One
} from '../../model/getAssetTagsCode401One'
import type {
  GetAssetTagsCode403One
} from '../../model/getAssetTagsCode403One'
import type {
  GetAssetTagsCode404One
} from '../../model/getAssetTagsCode404One'
import type {
  GetAssetTagsCode406One
} from '../../model/getAssetTagsCode406One'
import type {
  GetAssetTagsParams
} from '../../model/getAssetTagsParams'
import type {
  PatchAssetTagsCode400One
} from '../../model/patchAssetTagsCode400One'
import type {
  PatchAssetTagsCode401One
} from '../../model/patchAssetTagsCode401One'
import type {
  PatchAssetTagsCode403One
} from '../../model/patchAssetTagsCode403One'
import type {
  PatchAssetTagsCode415One
} from '../../model/patchAssetTagsCode415One'
import type {
  PatchAssetTagsCode422One
} from '../../model/patchAssetTagsCode422One'
import type {
  PatchAssetTagsCodeBody
} from '../../model/patchAssetTagsCodeBody'



/**
 * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
 * @summary Get list of PAM asset tags
 */
export const getAssetTags = (
    params?: GetAssetTagsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAssetTags200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/asset-tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAssetTagsQueryKey = (params?: GetAssetTagsParams,) => {
    return [`/api/rest/v1/asset-tags`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAssetTagsQueryOptions = <TData = Awaited<ReturnType<typeof getAssetTags>>, TError = AxiosError<GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>>(params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetTags>>> = ({ signal }) => getAssetTags(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetTags>>>
export type GetAssetTagsQueryError = AxiosError<GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>


export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = AxiosError<GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>>(
 params: undefined |  GetAssetTagsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTags>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = AxiosError<GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>>(
 params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTags>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = AxiosError<GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>>(
 params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of PAM asset tags
 */

export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = AxiosError<GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>>(
 params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetTagsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given PAM asset tag.
 * @summary Get a PAM asset tag
 */
export const getAssetTagsCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAssetTagsCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/asset-tags/${code}`,options
    );
  }


export const getGetAssetTagsCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/asset-tags/${code}`] as const;
    }

    
export const getGetAssetTagsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = AxiosError<GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetTagsCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetTagsCode>>> = ({ signal }) => getAssetTagsCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetTagsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetTagsCode>>>
export type GetAssetTagsCodeQueryError = AxiosError<GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>


export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = AxiosError<GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTagsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = AxiosError<GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTagsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = AxiosError<GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a PAM asset tag
 */

export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = AxiosError<GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetTagsCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given PAM asset tag. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
 * @summary Update/create a PAM asset tag
 */
export const patchAssetTagsCode = (
    code: string,
    patchAssetTagsCodeBody: PatchAssetTagsCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/asset-tags/${code}`,
      patchAssetTagsCodeBody,options
    );
  }



export const getPatchAssetTagsCodeMutationOptions = <TError = AxiosError<PatchAssetTagsCode400One | PatchAssetTagsCode401One | PatchAssetTagsCode403One | PatchAssetTagsCode415One | PatchAssetTagsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetTagsCode>>, TError,{code: string;data: PatchAssetTagsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetTagsCode>>, TError,{code: string;data: PatchAssetTagsCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetTagsCode>>, {code: string;data: PatchAssetTagsCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchAssetTagsCode(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetTagsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetTagsCode>>>
    export type PatchAssetTagsCodeMutationBody = PatchAssetTagsCodeBody
    export type PatchAssetTagsCodeMutationError = AxiosError<PatchAssetTagsCode400One | PatchAssetTagsCode401One | PatchAssetTagsCode403One | PatchAssetTagsCode415One | PatchAssetTagsCode422One>

    /**
 * @summary Update/create a PAM asset tag
 */
export const usePatchAssetTagsCode = <TError = AxiosError<PatchAssetTagsCode400One | PatchAssetTagsCode401One | PatchAssetTagsCode403One | PatchAssetTagsCode415One | PatchAssetTagsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetTagsCode>>, TError,{code: string;data: PatchAssetTagsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetTagsCode>>,
        TError,
        {code: string;data: PatchAssetTagsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetTagsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    