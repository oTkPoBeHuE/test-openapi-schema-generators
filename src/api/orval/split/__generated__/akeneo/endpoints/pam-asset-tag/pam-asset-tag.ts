/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetAssetTags200One
} from '../../model/getAssetTags200One'
import type {
  GetAssetTags401One
} from '../../model/getAssetTags401One'
import type {
  GetAssetTags403One
} from '../../model/getAssetTags403One'
import type {
  GetAssetTags406One
} from '../../model/getAssetTags406One'
import type {
  GetAssetTagsCode200
} from '../../model/getAssetTagsCode200'
import type {
  GetAssetTagsCode401One
} from '../../model/getAssetTagsCode401One'
import type {
  GetAssetTagsCode403One
} from '../../model/getAssetTagsCode403One'
import type {
  GetAssetTagsCode404One
} from '../../model/getAssetTagsCode404One'
import type {
  GetAssetTagsCode406One
} from '../../model/getAssetTagsCode406One'
import type {
  GetAssetTagsParams
} from '../../model/getAssetTagsParams'
import type {
  PatchAssetTagsCode400One
} from '../../model/patchAssetTagsCode400One'
import type {
  PatchAssetTagsCode401One
} from '../../model/patchAssetTagsCode401One'
import type {
  PatchAssetTagsCode403One
} from '../../model/patchAssetTagsCode403One'
import type {
  PatchAssetTagsCode415One
} from '../../model/patchAssetTagsCode415One'
import type {
  PatchAssetTagsCode422One
} from '../../model/patchAssetTagsCode422One'
import type {
  PatchAssetTagsCodeBody
} from '../../model/patchAssetTagsCodeBody'



/**
 * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
 * @summary Get list of PAM asset tags
 */
export type getAssetTagsResponse = {
  data: GetAssetTags200One;
  status: number;
  headers: Headers;
}

export const getGetAssetTagsUrl = (params?: GetAssetTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/asset-tags?${normalizedParams.toString()}` : `/api/rest/v1/asset-tags`
}

export const getAssetTags = async (params?: GetAssetTagsParams, options?: RequestInit): Promise<getAssetTagsResponse> => {
  
  const res = await fetch(getGetAssetTagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetTagsQueryKey = (params?: GetAssetTagsParams,) => {
    return [`/api/rest/v1/asset-tags`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAssetTagsQueryOptions = <TData = Awaited<ReturnType<typeof getAssetTags>>, TError = GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>(params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetTags>>> = ({ signal }) => getAssetTags(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetTagsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetTags>>>
export type GetAssetTagsQueryError = GetAssetTags401One | GetAssetTags403One | GetAssetTags406One


export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>(
 params: undefined |  GetAssetTagsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTags>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>(
 params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTags>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>(
 params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of PAM asset tags
 */

export function useGetAssetTags<TData = Awaited<ReturnType<typeof getAssetTags>>, TError = GetAssetTags401One | GetAssetTags403One | GetAssetTags406One>(
 params?: GetAssetTagsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTags>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetTagsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given PAM asset tag.
 * @summary Get a PAM asset tag
 */
export type getAssetTagsCodeResponse = {
  data: GetAssetTagsCode200;
  status: number;
  headers: Headers;
}

export const getGetAssetTagsCodeUrl = (code: string,) => {


  return `/api/rest/v1/asset-tags/${code}`
}

export const getAssetTagsCode = async (code: string, options?: RequestInit): Promise<getAssetTagsCodeResponse> => {
  
  const res = await fetch(getGetAssetTagsCodeUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetTagsCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/asset-tags/${code}`] as const;
    }

    
export const getGetAssetTagsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetTagsCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetTagsCode>>> = ({ signal }) => getAssetTagsCode(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetTagsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetTagsCode>>>
export type GetAssetTagsCodeQueryError = GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One


export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTagsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetTagsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a PAM asset tag
 */

export function useGetAssetTagsCode<TData = Awaited<ReturnType<typeof getAssetTagsCode>>, TError = GetAssetTagsCode401One | GetAssetTagsCode403One | GetAssetTagsCode404One | GetAssetTagsCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetTagsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetTagsCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given PAM asset tag. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
 * @summary Update/create a PAM asset tag
 */
export type patchAssetTagsCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchAssetTagsCodeUrl = (code: string,) => {


  return `/api/rest/v1/asset-tags/${code}`
}

export const patchAssetTagsCode = async (code: string,
    patchAssetTagsCodeBody: PatchAssetTagsCodeBody, options?: RequestInit): Promise<patchAssetTagsCodeResponse> => {
  
  const res = await fetch(getPatchAssetTagsCodeUrl(code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAssetTagsCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAssetTagsCodeMutationOptions = <TError = PatchAssetTagsCode400One | PatchAssetTagsCode401One | PatchAssetTagsCode403One | PatchAssetTagsCode415One | PatchAssetTagsCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetTagsCode>>, TError,{code: string;data: PatchAssetTagsCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetTagsCode>>, TError,{code: string;data: PatchAssetTagsCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetTagsCode>>, {code: string;data: PatchAssetTagsCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchAssetTagsCode(code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetTagsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetTagsCode>>>
    export type PatchAssetTagsCodeMutationBody = PatchAssetTagsCodeBody
    export type PatchAssetTagsCodeMutationError = PatchAssetTagsCode400One | PatchAssetTagsCode401One | PatchAssetTagsCode403One | PatchAssetTagsCode415One | PatchAssetTagsCode422One

    /**
 * @summary Update/create a PAM asset tag
 */
export const usePatchAssetTagsCode = <TError = PatchAssetTagsCode400One | PatchAssetTagsCode401One | PatchAssetTagsCode403One | PatchAssetTagsCode415One | PatchAssetTagsCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetTagsCode>>, TError,{code: string;data: PatchAssetTagsCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetTagsCode>>,
        TError,
        {code: string;data: PatchAssetTagsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetTagsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    