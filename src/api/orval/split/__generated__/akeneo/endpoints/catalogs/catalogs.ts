/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteAppCatalog401One
} from '../../model/deleteAppCatalog401One'
import type {
  DeleteAppCatalog403One
} from '../../model/deleteAppCatalog403One'
import type {
  DeleteAppCatalog404One
} from '../../model/deleteAppCatalog404One'
import type {
  GetAppCatalog200
} from '../../model/getAppCatalog200'
import type {
  GetAppCatalog401One
} from '../../model/getAppCatalog401One'
import type {
  GetAppCatalog403One
} from '../../model/getAppCatalog403One'
import type {
  GetAppCatalog404One
} from '../../model/getAppCatalog404One'
import type {
  GetAppCatalogs200
} from '../../model/getAppCatalogs200'
import type {
  GetAppCatalogs401One
} from '../../model/getAppCatalogs401One'
import type {
  GetAppCatalogs403One
} from '../../model/getAppCatalogs403One'
import type {
  GetAppCatalogsParams
} from '../../model/getAppCatalogsParams'
import type {
  PatchAppCatalog200
} from '../../model/patchAppCatalog200'
import type {
  PatchAppCatalog401One
} from '../../model/patchAppCatalog401One'
import type {
  PatchAppCatalog403One
} from '../../model/patchAppCatalog403One'
import type {
  PatchAppCatalog404One
} from '../../model/patchAppCatalog404One'
import type {
  PatchAppCatalog415One
} from '../../model/patchAppCatalog415One'
import type {
  PatchAppCatalog422
} from '../../model/patchAppCatalog422'
import type {
  PostAppCatalog201
} from '../../model/postAppCatalog201'
import type {
  PostAppCatalog401One
} from '../../model/postAppCatalog401One'
import type {
  PostAppCatalog403One
} from '../../model/postAppCatalog403One'
import type {
  PostAppCatalog415One
} from '../../model/postAppCatalog415One'
import type {
  PostAppCatalog422
} from '../../model/postAppCatalog422'
import type {
  PostAppCatalogBodyBody
} from '../../model/postAppCatalogBodyBody'



/**
 * This endpoint allows you to get the list of catalogs you owned.
 * @summary Get the list of owned catalogs
 */
export type getAppCatalogsResponse = {
  data: GetAppCatalogs200;
  status: number;
  headers: Headers;
}

export const getGetAppCatalogsUrl = (params?: GetAppCatalogsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/catalogs?${normalizedParams.toString()}` : `/api/rest/v1/catalogs`
}

export const getAppCatalogs = async (params?: GetAppCatalogsParams, options?: RequestInit): Promise<getAppCatalogsResponse> => {
  
  const res = await fetch(getGetAppCatalogsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAppCatalogsQueryKey = (params?: GetAppCatalogsParams,) => {
    return [`/api/rest/v1/catalogs`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAppCatalogsQueryOptions = <TData = Awaited<ReturnType<typeof getAppCatalogs>>, TError = GetAppCatalogs401One | GetAppCatalogs403One>(params?: GetAppCatalogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalogs>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAppCatalogsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppCatalogs>>> = ({ signal }) => getAppCatalogs(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAppCatalogs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAppCatalogsQueryResult = NonNullable<Awaited<ReturnType<typeof getAppCatalogs>>>
export type GetAppCatalogsQueryError = GetAppCatalogs401One | GetAppCatalogs403One


export function useGetAppCatalogs<TData = Awaited<ReturnType<typeof getAppCatalogs>>, TError = GetAppCatalogs401One | GetAppCatalogs403One>(
 params: undefined |  GetAppCatalogsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalogs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppCatalogs>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAppCatalogs<TData = Awaited<ReturnType<typeof getAppCatalogs>>, TError = GetAppCatalogs401One | GetAppCatalogs403One>(
 params?: GetAppCatalogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalogs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppCatalogs>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAppCatalogs<TData = Awaited<ReturnType<typeof getAppCatalogs>>, TError = GetAppCatalogs401One | GetAppCatalogs403One>(
 params?: GetAppCatalogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalogs>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of owned catalogs
 */

export function useGetAppCatalogs<TData = Awaited<ReturnType<typeof getAppCatalogs>>, TError = GetAppCatalogs401One | GetAppCatalogs403One>(
 params?: GetAppCatalogsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalogs>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAppCatalogsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to create a new catalog.
 * @summary Create a new catalog
 */
export type postAppCatalogResponse = {
  data: PostAppCatalog201;
  status: number;
  headers: Headers;
}

export const getPostAppCatalogUrl = () => {


  return `/api/rest/v1/catalogs`
}

export const postAppCatalog = async (postAppCatalogBodyBody: PostAppCatalogBodyBody, options?: RequestInit): Promise<postAppCatalogResponse> => {
  
  const res = await fetch(getPostAppCatalogUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAppCatalogBodyBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostAppCatalogMutationOptions = <TError = PostAppCatalog401One | PostAppCatalog403One | PostAppCatalog415One | PostAppCatalog422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAppCatalog>>, TError,{data: PostAppCatalogBodyBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAppCatalog>>, TError,{data: PostAppCatalogBodyBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAppCatalog>>, {data: PostAppCatalogBodyBody}> = (props) => {
          const {data} = props ?? {};

          return  postAppCatalog(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAppCatalogMutationResult = NonNullable<Awaited<ReturnType<typeof postAppCatalog>>>
    export type PostAppCatalogMutationBody = PostAppCatalogBodyBody
    export type PostAppCatalogMutationError = PostAppCatalog401One | PostAppCatalog403One | PostAppCatalog415One | PostAppCatalog422

    /**
 * @summary Create a new catalog
 */
export const usePostAppCatalog = <TError = PostAppCatalog401One | PostAppCatalog403One | PostAppCatalog415One | PostAppCatalog422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAppCatalog>>, TError,{data: PostAppCatalogBodyBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postAppCatalog>>,
        TError,
        {data: PostAppCatalogBodyBody},
        TContext
      > => {

      const mutationOptions = getPostAppCatalogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to delete a catalog.
 * @summary Delete a catalog
 */
export type deleteAppCatalogResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getDeleteAppCatalogUrl = (id: string,) => {


  return `/api/rest/v1/catalogs/${id}`
}

export const deleteAppCatalog = async (id: string, options?: RequestInit): Promise<deleteAppCatalogResponse> => {
  
  const res = await fetch(getDeleteAppCatalogUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getDeleteAppCatalogMutationOptions = <TError = DeleteAppCatalog401One | DeleteAppCatalog403One | DeleteAppCatalog404One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAppCatalog>>, TError,{id: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAppCatalog>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAppCatalog>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteAppCatalog(id,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAppCatalogMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAppCatalog>>>
    
    export type DeleteAppCatalogMutationError = DeleteAppCatalog401One | DeleteAppCatalog403One | DeleteAppCatalog404One

    /**
 * @summary Delete a catalog
 */
export const useDeleteAppCatalog = <TError = DeleteAppCatalog401One | DeleteAppCatalog403One | DeleteAppCatalog404One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAppCatalog>>, TError,{id: string}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAppCatalog>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteAppCatalogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a catalog.
 * @summary Get a catalog
 */
export type getAppCatalogResponse = {
  data: GetAppCatalog200;
  status: number;
  headers: Headers;
}

export const getGetAppCatalogUrl = (id: string,) => {


  return `/api/rest/v1/catalogs/${id}`
}

export const getAppCatalog = async (id: string, options?: RequestInit): Promise<getAppCatalogResponse> => {
  
  const res = await fetch(getGetAppCatalogUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAppCatalogQueryKey = (id: string,) => {
    return [`/api/rest/v1/catalogs/${id}`] as const;
    }

    
export const getGetAppCatalogQueryOptions = <TData = Awaited<ReturnType<typeof getAppCatalog>>, TError = GetAppCatalog401One | GetAppCatalog403One | GetAppCatalog404One>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalog>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAppCatalogQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppCatalog>>> = ({ signal }) => getAppCatalog(id, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAppCatalog>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAppCatalogQueryResult = NonNullable<Awaited<ReturnType<typeof getAppCatalog>>>
export type GetAppCatalogQueryError = GetAppCatalog401One | GetAppCatalog403One | GetAppCatalog404One


export function useGetAppCatalog<TData = Awaited<ReturnType<typeof getAppCatalog>>, TError = GetAppCatalog401One | GetAppCatalog403One | GetAppCatalog404One>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalog>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppCatalog>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAppCatalog<TData = Awaited<ReturnType<typeof getAppCatalog>>, TError = GetAppCatalog401One | GetAppCatalog403One | GetAppCatalog404One>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalog>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppCatalog>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAppCatalog<TData = Awaited<ReturnType<typeof getAppCatalog>>, TError = GetAppCatalog401One | GetAppCatalog403One | GetAppCatalog404One>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalog>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a catalog
 */

export function useGetAppCatalog<TData = Awaited<ReturnType<typeof getAppCatalog>>, TError = GetAppCatalog401One | GetAppCatalog403One | GetAppCatalog404One>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAppCatalog>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAppCatalogQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a catalog.
 * @summary Update a catalog
 */
export type patchAppCatalogResponse = {
  data: PatchAppCatalog200;
  status: number;
  headers: Headers;
}

export const getPatchAppCatalogUrl = (id: string,) => {


  return `/api/rest/v1/catalogs/${id}`
}

export const patchAppCatalog = async (id: string,
    postAppCatalogBodyBody: PostAppCatalogBodyBody, options?: RequestInit): Promise<patchAppCatalogResponse> => {
  
  const res = await fetch(getPatchAppCatalogUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAppCatalogBodyBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAppCatalogMutationOptions = <TError = PatchAppCatalog401One | PatchAppCatalog403One | PatchAppCatalog404One | PatchAppCatalog415One | PatchAppCatalog422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAppCatalog>>, TError,{id: string;data: PostAppCatalogBodyBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAppCatalog>>, TError,{id: string;data: PostAppCatalogBodyBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAppCatalog>>, {id: string;data: PostAppCatalogBodyBody}> = (props) => {
          const {id,data} = props ?? {};

          return  patchAppCatalog(id,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAppCatalogMutationResult = NonNullable<Awaited<ReturnType<typeof patchAppCatalog>>>
    export type PatchAppCatalogMutationBody = PostAppCatalogBodyBody
    export type PatchAppCatalogMutationError = PatchAppCatalog401One | PatchAppCatalog403One | PatchAppCatalog404One | PatchAppCatalog415One | PatchAppCatalog422

    /**
 * @summary Update a catalog
 */
export const usePatchAppCatalog = <TError = PatchAppCatalog401One | PatchAppCatalog403One | PatchAppCatalog404One | PatchAppCatalog415One | PatchAppCatalog422,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAppCatalog>>, TError,{id: string;data: PostAppCatalogBodyBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAppCatalog>>,
        TError,
        {id: string;data: PostAppCatalogBodyBody},
        TContext
      > => {

      const mutationOptions = getPatchAppCatalogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    