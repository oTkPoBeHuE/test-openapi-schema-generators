/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AttributeGroupsGet200
} from '../../model/attributeGroupsGet200'
import type {
  AttributeGroupsGet401One
} from '../../model/attributeGroupsGet401One'
import type {
  AttributeGroupsGet403One
} from '../../model/attributeGroupsGet403One'
import type {
  AttributeGroupsGet404One
} from '../../model/attributeGroupsGet404One'
import type {
  AttributeGroupsGet406One
} from '../../model/attributeGroupsGet406One'
import type {
  AttributeGroupsGetList200One
} from '../../model/attributeGroupsGetList200One'
import type {
  AttributeGroupsGetList401One
} from '../../model/attributeGroupsGetList401One'
import type {
  AttributeGroupsGetList403One
} from '../../model/attributeGroupsGetList403One'
import type {
  AttributeGroupsGetList406One
} from '../../model/attributeGroupsGetList406One'
import type {
  AttributeGroupsGetListParams
} from '../../model/attributeGroupsGetListParams'
import type {
  AttributeGroupsPatch400One
} from '../../model/attributeGroupsPatch400One'
import type {
  AttributeGroupsPatch401One
} from '../../model/attributeGroupsPatch401One'
import type {
  AttributeGroupsPatch403One
} from '../../model/attributeGroupsPatch403One'
import type {
  AttributeGroupsPatch415One
} from '../../model/attributeGroupsPatch415One'
import type {
  AttributeGroupsPatch422One
} from '../../model/attributeGroupsPatch422One'
import type {
  AttributeGroupsPatchBody
} from '../../model/attributeGroupsPatchBody'
import type {
  AttributeGroupsPost400One
} from '../../model/attributeGroupsPost400One'
import type {
  AttributeGroupsPost401One
} from '../../model/attributeGroupsPost401One'
import type {
  AttributeGroupsPost403One
} from '../../model/attributeGroupsPost403One'
import type {
  AttributeGroupsPost415One
} from '../../model/attributeGroupsPost415One'
import type {
  AttributeGroupsPost422One
} from '../../model/attributeGroupsPost422One'
import type {
  AttributeGroupsPostBody
} from '../../model/attributeGroupsPostBody'
import type {
  SeveralAttributeGroupsPatch200One
} from '../../model/severalAttributeGroupsPatch200One'
import type {
  SeveralAttributeGroupsPatch401One
} from '../../model/severalAttributeGroupsPatch401One'
import type {
  SeveralAttributeGroupsPatch403One
} from '../../model/severalAttributeGroupsPatch403One'
import type {
  SeveralAttributeGroupsPatch413One
} from '../../model/severalAttributeGroupsPatch413One'
import type {
  SeveralAttributeGroupsPatch415One
} from '../../model/severalAttributeGroupsPatch415One'
import type {
  SeveralAttributeGroupsPatchBody
} from '../../model/severalAttributeGroupsPatchBody'



/**
 * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
 * @summary Get list of attribute groups
 */
export type attributeGroupsGetListResponse = {
  data: AttributeGroupsGetList200One;
  status: number;
  headers: Headers;
}

export const getAttributeGroupsGetListUrl = (params?: AttributeGroupsGetListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/attribute-groups?${normalizedParams.toString()}` : `/api/rest/v1/attribute-groups`
}

export const attributeGroupsGetList = async (params?: AttributeGroupsGetListParams, options?: RequestInit): Promise<attributeGroupsGetListResponse> => {
  
  const res = await fetch(getAttributeGroupsGetListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getAttributeGroupsGetListQueryKey = (params?: AttributeGroupsGetListParams,) => {
    return [`/api/rest/v1/attribute-groups`, ...(params ? [params]: [])] as const;
    }

    
export const getAttributeGroupsGetListQueryOptions = <TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>(params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAttributeGroupsGetListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof attributeGroupsGetList>>> = ({ signal }) => attributeGroupsGetList(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type AttributeGroupsGetListQueryResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsGetList>>>
export type AttributeGroupsGetListQueryError = AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One


export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>(
 params: undefined |  AttributeGroupsGetListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGetList>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>(
 params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGetList>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>(
 params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of attribute groups
 */

export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>(
 params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getAttributeGroupsGetListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several attribute groups at once.
 * @summary Update/create several attribute groups
 */
export type severalAttributeGroupsPatchResponse = {
  data: SeveralAttributeGroupsPatch200One;
  status: number;
  headers: Headers;
}

export const getSeveralAttributeGroupsPatchUrl = () => {


  return `/api/rest/v1/attribute-groups`
}

export const severalAttributeGroupsPatch = async (severalAttributeGroupsPatchBody: SeveralAttributeGroupsPatchBody, options?: RequestInit): Promise<severalAttributeGroupsPatchResponse> => {
  
  const res = await fetch(getSeveralAttributeGroupsPatchUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      severalAttributeGroupsPatchBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getSeveralAttributeGroupsPatchMutationOptions = <TError = SeveralAttributeGroupsPatch401One | SeveralAttributeGroupsPatch403One | SeveralAttributeGroupsPatch413One | SeveralAttributeGroupsPatch415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, TError,{data: SeveralAttributeGroupsPatchBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, TError,{data: SeveralAttributeGroupsPatchBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, {data: SeveralAttributeGroupsPatchBody}> = (props) => {
          const {data} = props ?? {};

          return  severalAttributeGroupsPatch(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SeveralAttributeGroupsPatchMutationResult = NonNullable<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>>
    export type SeveralAttributeGroupsPatchMutationBody = SeveralAttributeGroupsPatchBody
    export type SeveralAttributeGroupsPatchMutationError = SeveralAttributeGroupsPatch401One | SeveralAttributeGroupsPatch403One | SeveralAttributeGroupsPatch413One | SeveralAttributeGroupsPatch415One

    /**
 * @summary Update/create several attribute groups
 */
export const useSeveralAttributeGroupsPatch = <TError = SeveralAttributeGroupsPatch401One | SeveralAttributeGroupsPatch403One | SeveralAttributeGroupsPatch413One | SeveralAttributeGroupsPatch415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, TError,{data: SeveralAttributeGroupsPatchBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof severalAttributeGroupsPatch>>,
        TError,
        {data: SeveralAttributeGroupsPatchBody},
        TContext
      > => {

      const mutationOptions = getSeveralAttributeGroupsPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new attribute group.
 * @summary Create a new attribute group
 */
export type attributeGroupsPostResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getAttributeGroupsPostUrl = () => {


  return `/api/rest/v1/attribute-groups`
}

export const attributeGroupsPost = async (attributeGroupsPostBody: AttributeGroupsPostBody, options?: RequestInit): Promise<attributeGroupsPostResponse> => {
  
  const res = await fetch(getAttributeGroupsPostUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attributeGroupsPostBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getAttributeGroupsPostMutationOptions = <TError = AttributeGroupsPost400One | AttributeGroupsPost401One | AttributeGroupsPost403One | AttributeGroupsPost415One | AttributeGroupsPost422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPost>>, TError,{data: AttributeGroupsPostBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPost>>, TError,{data: AttributeGroupsPostBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof attributeGroupsPost>>, {data: AttributeGroupsPostBody}> = (props) => {
          const {data} = props ?? {};

          return  attributeGroupsPost(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AttributeGroupsPostMutationResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsPost>>>
    export type AttributeGroupsPostMutationBody = AttributeGroupsPostBody
    export type AttributeGroupsPostMutationError = AttributeGroupsPost400One | AttributeGroupsPost401One | AttributeGroupsPost403One | AttributeGroupsPost415One | AttributeGroupsPost422One

    /**
 * @summary Create a new attribute group
 */
export const useAttributeGroupsPost = <TError = AttributeGroupsPost400One | AttributeGroupsPost401One | AttributeGroupsPost403One | AttributeGroupsPost415One | AttributeGroupsPost422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPost>>, TError,{data: AttributeGroupsPostBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof attributeGroupsPost>>,
        TError,
        {data: AttributeGroupsPostBody},
        TContext
      > => {

      const mutationOptions = getAttributeGroupsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given attribute group.
 * @summary Get an attribute group
 */
export type attributeGroupsGetResponse = {
  data: AttributeGroupsGet200;
  status: number;
  headers: Headers;
}

export const getAttributeGroupsGetUrl = (code: string,) => {


  return `/api/rest/v1/attribute-groups/${code}`
}

export const attributeGroupsGet = async (code: string, options?: RequestInit): Promise<attributeGroupsGetResponse> => {
  
  const res = await fetch(getAttributeGroupsGetUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getAttributeGroupsGetQueryKey = (code: string,) => {
    return [`/api/rest/v1/attribute-groups/${code}`] as const;
    }

    
export const getAttributeGroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAttributeGroupsGetQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof attributeGroupsGet>>> = ({ signal }) => attributeGroupsGet(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type AttributeGroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsGet>>>
export type AttributeGroupsGetQueryError = AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One


export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGet>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGet>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an attribute group
 */

export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getAttributeGroupsGetQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given attribute group. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
 * @summary Update/create an attribute group
 */
export type attributeGroupsPatchResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getAttributeGroupsPatchUrl = (code: string,) => {


  return `/api/rest/v1/attribute-groups/${code}`
}

export const attributeGroupsPatch = async (code: string,
    attributeGroupsPatchBody: AttributeGroupsPatchBody, options?: RequestInit): Promise<attributeGroupsPatchResponse> => {
  
  const res = await fetch(getAttributeGroupsPatchUrl(code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      attributeGroupsPatchBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getAttributeGroupsPatchMutationOptions = <TError = AttributeGroupsPatch400One | AttributeGroupsPatch401One | AttributeGroupsPatch403One | AttributeGroupsPatch415One | AttributeGroupsPatch422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPatch>>, TError,{code: string;data: AttributeGroupsPatchBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPatch>>, TError,{code: string;data: AttributeGroupsPatchBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof attributeGroupsPatch>>, {code: string;data: AttributeGroupsPatchBody}> = (props) => {
          const {code,data} = props ?? {};

          return  attributeGroupsPatch(code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AttributeGroupsPatchMutationResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsPatch>>>
    export type AttributeGroupsPatchMutationBody = AttributeGroupsPatchBody
    export type AttributeGroupsPatchMutationError = AttributeGroupsPatch400One | AttributeGroupsPatch401One | AttributeGroupsPatch403One | AttributeGroupsPatch415One | AttributeGroupsPatch422One

    /**
 * @summary Update/create an attribute group
 */
export const useAttributeGroupsPatch = <TError = AttributeGroupsPatch400One | AttributeGroupsPatch401One | AttributeGroupsPatch403One | AttributeGroupsPatch415One | AttributeGroupsPatch422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPatch>>, TError,{code: string;data: AttributeGroupsPatchBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof attributeGroupsPatch>>,
        TError,
        {code: string;data: AttributeGroupsPatchBody},
        TContext
      > => {

      const mutationOptions = getAttributeGroupsPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    