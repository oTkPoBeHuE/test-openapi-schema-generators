/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AttributeGroupsGet200
} from '../../model/attributeGroupsGet200'
import type {
  AttributeGroupsGet401One
} from '../../model/attributeGroupsGet401One'
import type {
  AttributeGroupsGet403One
} from '../../model/attributeGroupsGet403One'
import type {
  AttributeGroupsGet404One
} from '../../model/attributeGroupsGet404One'
import type {
  AttributeGroupsGet406One
} from '../../model/attributeGroupsGet406One'
import type {
  AttributeGroupsGetList200One
} from '../../model/attributeGroupsGetList200One'
import type {
  AttributeGroupsGetList401One
} from '../../model/attributeGroupsGetList401One'
import type {
  AttributeGroupsGetList403One
} from '../../model/attributeGroupsGetList403One'
import type {
  AttributeGroupsGetList406One
} from '../../model/attributeGroupsGetList406One'
import type {
  AttributeGroupsGetListParams
} from '../../model/attributeGroupsGetListParams'
import type {
  AttributeGroupsPatch400One
} from '../../model/attributeGroupsPatch400One'
import type {
  AttributeGroupsPatch401One
} from '../../model/attributeGroupsPatch401One'
import type {
  AttributeGroupsPatch403One
} from '../../model/attributeGroupsPatch403One'
import type {
  AttributeGroupsPatch415One
} from '../../model/attributeGroupsPatch415One'
import type {
  AttributeGroupsPatch422One
} from '../../model/attributeGroupsPatch422One'
import type {
  AttributeGroupsPatchBody
} from '../../model/attributeGroupsPatchBody'
import type {
  AttributeGroupsPost400One
} from '../../model/attributeGroupsPost400One'
import type {
  AttributeGroupsPost401One
} from '../../model/attributeGroupsPost401One'
import type {
  AttributeGroupsPost403One
} from '../../model/attributeGroupsPost403One'
import type {
  AttributeGroupsPost415One
} from '../../model/attributeGroupsPost415One'
import type {
  AttributeGroupsPost422One
} from '../../model/attributeGroupsPost422One'
import type {
  AttributeGroupsPostBody
} from '../../model/attributeGroupsPostBody'
import type {
  SeveralAttributeGroupsPatch200One
} from '../../model/severalAttributeGroupsPatch200One'
import type {
  SeveralAttributeGroupsPatch401One
} from '../../model/severalAttributeGroupsPatch401One'
import type {
  SeveralAttributeGroupsPatch403One
} from '../../model/severalAttributeGroupsPatch403One'
import type {
  SeveralAttributeGroupsPatch413One
} from '../../model/severalAttributeGroupsPatch413One'
import type {
  SeveralAttributeGroupsPatch415One
} from '../../model/severalAttributeGroupsPatch415One'
import type {
  SeveralAttributeGroupsPatchBody
} from '../../model/severalAttributeGroupsPatchBody'



/**
 * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
 * @summary Get list of attribute groups
 */
export const attributeGroupsGetList = (
    params?: AttributeGroupsGetListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AttributeGroupsGetList200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/attribute-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getAttributeGroupsGetListQueryKey = (params?: AttributeGroupsGetListParams,) => {
    return [`/api/rest/v1/attribute-groups`, ...(params ? [params]: [])] as const;
    }

    
export const getAttributeGroupsGetListQueryOptions = <TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AxiosError<AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>>(params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAttributeGroupsGetListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof attributeGroupsGetList>>> = ({ signal }) => attributeGroupsGetList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type AttributeGroupsGetListQueryResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsGetList>>>
export type AttributeGroupsGetListQueryError = AxiosError<AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>


export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AxiosError<AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>>(
 params: undefined |  AttributeGroupsGetListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGetList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AxiosError<AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>>(
 params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGetList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AxiosError<AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>>(
 params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of attribute groups
 */

export function useAttributeGroupsGetList<TData = Awaited<ReturnType<typeof attributeGroupsGetList>>, TError = AxiosError<AttributeGroupsGetList401One | AttributeGroupsGetList403One | AttributeGroupsGetList406One>>(
 params?: AttributeGroupsGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGetList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getAttributeGroupsGetListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several attribute groups at once.
 * @summary Update/create several attribute groups
 */
export const severalAttributeGroupsPatch = (
    severalAttributeGroupsPatchBody: SeveralAttributeGroupsPatchBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<SeveralAttributeGroupsPatch200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/attribute-groups`,
      severalAttributeGroupsPatchBody,options
    );
  }



export const getSeveralAttributeGroupsPatchMutationOptions = <TError = AxiosError<SeveralAttributeGroupsPatch401One | SeveralAttributeGroupsPatch403One | SeveralAttributeGroupsPatch413One | SeveralAttributeGroupsPatch415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, TError,{data: SeveralAttributeGroupsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, TError,{data: SeveralAttributeGroupsPatchBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, {data: SeveralAttributeGroupsPatchBody}> = (props) => {
          const {data} = props ?? {};

          return  severalAttributeGroupsPatch(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SeveralAttributeGroupsPatchMutationResult = NonNullable<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>>
    export type SeveralAttributeGroupsPatchMutationBody = SeveralAttributeGroupsPatchBody
    export type SeveralAttributeGroupsPatchMutationError = AxiosError<SeveralAttributeGroupsPatch401One | SeveralAttributeGroupsPatch403One | SeveralAttributeGroupsPatch413One | SeveralAttributeGroupsPatch415One>

    /**
 * @summary Update/create several attribute groups
 */
export const useSeveralAttributeGroupsPatch = <TError = AxiosError<SeveralAttributeGroupsPatch401One | SeveralAttributeGroupsPatch403One | SeveralAttributeGroupsPatch413One | SeveralAttributeGroupsPatch415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof severalAttributeGroupsPatch>>, TError,{data: SeveralAttributeGroupsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof severalAttributeGroupsPatch>>,
        TError,
        {data: SeveralAttributeGroupsPatchBody},
        TContext
      > => {

      const mutationOptions = getSeveralAttributeGroupsPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new attribute group.
 * @summary Create a new attribute group
 */
export const attributeGroupsPost = (
    attributeGroupsPostBody: AttributeGroupsPostBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/attribute-groups`,
      attributeGroupsPostBody,options
    );
  }



export const getAttributeGroupsPostMutationOptions = <TError = AxiosError<AttributeGroupsPost400One | AttributeGroupsPost401One | AttributeGroupsPost403One | AttributeGroupsPost415One | AttributeGroupsPost422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPost>>, TError,{data: AttributeGroupsPostBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPost>>, TError,{data: AttributeGroupsPostBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof attributeGroupsPost>>, {data: AttributeGroupsPostBody}> = (props) => {
          const {data} = props ?? {};

          return  attributeGroupsPost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AttributeGroupsPostMutationResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsPost>>>
    export type AttributeGroupsPostMutationBody = AttributeGroupsPostBody
    export type AttributeGroupsPostMutationError = AxiosError<AttributeGroupsPost400One | AttributeGroupsPost401One | AttributeGroupsPost403One | AttributeGroupsPost415One | AttributeGroupsPost422One>

    /**
 * @summary Create a new attribute group
 */
export const useAttributeGroupsPost = <TError = AxiosError<AttributeGroupsPost400One | AttributeGroupsPost401One | AttributeGroupsPost403One | AttributeGroupsPost415One | AttributeGroupsPost422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPost>>, TError,{data: AttributeGroupsPostBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof attributeGroupsPost>>,
        TError,
        {data: AttributeGroupsPostBody},
        TContext
      > => {

      const mutationOptions = getAttributeGroupsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given attribute group.
 * @summary Get an attribute group
 */
export const attributeGroupsGet = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<AttributeGroupsGet200>> => {
    
    return axios.default.get(
      `/api/rest/v1/attribute-groups/${code}`,options
    );
  }


export const getAttributeGroupsGetQueryKey = (code: string,) => {
    return [`/api/rest/v1/attribute-groups/${code}`] as const;
    }

    
export const getAttributeGroupsGetQueryOptions = <TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AxiosError<AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAttributeGroupsGetQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof attributeGroupsGet>>> = ({ signal }) => attributeGroupsGet(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type AttributeGroupsGetQueryResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsGet>>>
export type AttributeGroupsGetQueryError = AxiosError<AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>


export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AxiosError<AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AxiosError<AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof attributeGroupsGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AxiosError<AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an attribute group
 */

export function useAttributeGroupsGet<TData = Awaited<ReturnType<typeof attributeGroupsGet>>, TError = AxiosError<AttributeGroupsGet401One | AttributeGroupsGet403One | AttributeGroupsGet404One | AttributeGroupsGet406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof attributeGroupsGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getAttributeGroupsGetQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given attribute group. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
 * @summary Update/create an attribute group
 */
export const attributeGroupsPatch = (
    code: string,
    attributeGroupsPatchBody: AttributeGroupsPatchBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/attribute-groups/${code}`,
      attributeGroupsPatchBody,options
    );
  }



export const getAttributeGroupsPatchMutationOptions = <TError = AxiosError<AttributeGroupsPatch400One | AttributeGroupsPatch401One | AttributeGroupsPatch403One | AttributeGroupsPatch415One | AttributeGroupsPatch422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPatch>>, TError,{code: string;data: AttributeGroupsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPatch>>, TError,{code: string;data: AttributeGroupsPatchBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof attributeGroupsPatch>>, {code: string;data: AttributeGroupsPatchBody}> = (props) => {
          const {code,data} = props ?? {};

          return  attributeGroupsPatch(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AttributeGroupsPatchMutationResult = NonNullable<Awaited<ReturnType<typeof attributeGroupsPatch>>>
    export type AttributeGroupsPatchMutationBody = AttributeGroupsPatchBody
    export type AttributeGroupsPatchMutationError = AxiosError<AttributeGroupsPatch400One | AttributeGroupsPatch401One | AttributeGroupsPatch403One | AttributeGroupsPatch415One | AttributeGroupsPatch422One>

    /**
 * @summary Update/create an attribute group
 */
export const useAttributeGroupsPatch = <TError = AxiosError<AttributeGroupsPatch400One | AttributeGroupsPatch401One | AttributeGroupsPatch403One | AttributeGroupsPatch415One | AttributeGroupsPatch422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof attributeGroupsPatch>>, TError,{code: string;data: AttributeGroupsPatchBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof attributeGroupsPatch>>,
        TError,
        {code: string;data: AttributeGroupsPatchBody},
        TContext
      > => {

      const mutationOptions = getAttributeGroupsPatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    