/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetPublishedProducts200One,
  GetPublishedProductsCode200
} from '../../model'

export const getGetPublishedProductsResponseMock = (): GetPublishedProducts200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), previous: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]), current_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),associations: faker.helpers.arrayElement([{associationTypeCode: faker.helpers.arrayElement([{groups: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), product_models: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), products: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined])}, undefined])}, undefined]), categories: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), created: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), enabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), family: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), groups: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), identifier: faker.string.alpha(20), quantified_associations: faker.helpers.arrayElement([{}, undefined]), updated: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), values: faker.helpers.arrayElement([{attributeCode: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({data: faker.helpers.arrayElement([{}, undefined]), locale: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), scope: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])}, undefined])})), undefined])}, undefined])})

export const getGetPublishedProductsCodeResponseMock = (): GetPublishedProductsCode200 => ({"associations":{"PACK":{"groups":[],"product_models":[],"products":["sunglass"]}},"categories":["summer_collection"],"created":"2024-12-15T12:31:08.236Z","enabled":true,"family":"tshirt","groups":[],"identifier":"top","updated":"2024-12-15T12:31:08.236Z","values":{"color":[{"data":"black","locale":null,"scope":null}],"description":[{"data":"Summer top","locale":"en_US","scope":"ecommerce"},{"data":"Top","locale":"en_US","scope":"tablet"},{"data":"D√©bardeur pour l'√©t√©","locale":"fr_FR","scope":"ecommerce"},{"data":"D√©bardeur","locale":"fr_FR","scope":"tablet"}],"name":[{"data":"Top","locale":"en_US","scope":null},{"data":"D√©bardeur","locale":"fr_FR","scope":null}],"price":[{"data":[{"amount":"15.5","currency":"EUR"},{"amount":"15","currency":"USD"}],"locale":null,"scope":null}],"size":[{"data":"m","locale":null,"scope":null}]}})


export const getGetPublishedProductsMockHandler = (overrideResponse?: GetPublishedProducts200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetPublishedProducts200One> | GetPublishedProducts200One)) => {
  return http.get('*/api/rest/v1/published-products', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPublishedProductsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetPublishedProductsCodeMockHandler = (overrideResponse?: GetPublishedProductsCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetPublishedProductsCode200> | GetPublishedProductsCode200)) => {
  return http.get('*/api/rest/v1/published-products/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPublishedProductsCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getPublishedProductMock = () => [
  getGetPublishedProductsMockHandler(),
  getGetPublishedProductsCodeMockHandler()
]
