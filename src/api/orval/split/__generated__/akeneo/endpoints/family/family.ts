/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetFamilies200One
} from '../../model/getFamilies200One'
import type {
  GetFamilies401One
} from '../../model/getFamilies401One'
import type {
  GetFamilies403One
} from '../../model/getFamilies403One'
import type {
  GetFamilies406One
} from '../../model/getFamilies406One'
import type {
  GetFamiliesCode200
} from '../../model/getFamiliesCode200'
import type {
  GetFamiliesCode401One
} from '../../model/getFamiliesCode401One'
import type {
  GetFamiliesCode403One
} from '../../model/getFamiliesCode403One'
import type {
  GetFamiliesCode404One
} from '../../model/getFamiliesCode404One'
import type {
  GetFamiliesCode406One
} from '../../model/getFamiliesCode406One'
import type {
  GetFamiliesParams
} from '../../model/getFamiliesParams'
import type {
  PatchFamilies200One
} from '../../model/patchFamilies200One'
import type {
  PatchFamilies401One
} from '../../model/patchFamilies401One'
import type {
  PatchFamilies403One
} from '../../model/patchFamilies403One'
import type {
  PatchFamilies413One
} from '../../model/patchFamilies413One'
import type {
  PatchFamilies415One
} from '../../model/patchFamilies415One'
import type {
  PatchFamiliesBody
} from '../../model/patchFamiliesBody'
import type {
  PatchFamiliesCode400One
} from '../../model/patchFamiliesCode400One'
import type {
  PatchFamiliesCode401One
} from '../../model/patchFamiliesCode401One'
import type {
  PatchFamiliesCode403One
} from '../../model/patchFamiliesCode403One'
import type {
  PatchFamiliesCode415One
} from '../../model/patchFamiliesCode415One'
import type {
  PatchFamiliesCode422One
} from '../../model/patchFamiliesCode422One'
import type {
  PatchFamiliesCodeBody
} from '../../model/patchFamiliesCodeBody'
import type {
  PostFamilies400One
} from '../../model/postFamilies400One'
import type {
  PostFamilies401One
} from '../../model/postFamilies401One'
import type {
  PostFamilies403One
} from '../../model/postFamilies403One'
import type {
  PostFamilies415One
} from '../../model/postFamilies415One'
import type {
  PostFamilies422One
} from '../../model/postFamilies422One'
import type {
  PostFamiliesBody
} from '../../model/postFamiliesBody'
import type {
  PostFamiliesFamilyCodeVariants400One
} from '../../model/postFamiliesFamilyCodeVariants400One'
import type {
  PostFamiliesFamilyCodeVariants401One
} from '../../model/postFamiliesFamilyCodeVariants401One'
import type {
  PostFamiliesFamilyCodeVariants403One
} from '../../model/postFamiliesFamilyCodeVariants403One'
import type {
  PostFamiliesFamilyCodeVariants415One
} from '../../model/postFamiliesFamilyCodeVariants415One'
import type {
  PostFamiliesFamilyCodeVariants422One
} from '../../model/postFamiliesFamilyCodeVariants422One'
import type {
  PostFamiliesFamilyCodeVariantsBody
} from '../../model/postFamiliesFamilyCodeVariantsBody'



/**
 * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
 * @summary Get list of families
 */
export type getFamiliesResponse = {
  data: GetFamilies200One;
  status: number;
  headers: Headers;
}

export const getGetFamiliesUrl = (params?: GetFamiliesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/families?${normalizedParams.toString()}` : `/api/rest/v1/families`
}

export const getFamilies = async (params?: GetFamiliesParams, options?: RequestInit): Promise<getFamiliesResponse> => {
  
  const res = await fetch(getGetFamiliesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetFamiliesQueryKey = (params?: GetFamiliesParams,) => {
    return [`/api/rest/v1/families`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFamiliesQueryOptions = <TData = Awaited<ReturnType<typeof getFamilies>>, TError = GetFamilies401One | GetFamilies403One | GetFamilies406One>(params?: GetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamilies>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFamiliesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFamilies>>> = ({ signal }) => getFamilies(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFamilies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFamiliesQueryResult = NonNullable<Awaited<ReturnType<typeof getFamilies>>>
export type GetFamiliesQueryError = GetFamilies401One | GetFamilies403One | GetFamilies406One


export function useGetFamilies<TData = Awaited<ReturnType<typeof getFamilies>>, TError = GetFamilies401One | GetFamilies403One | GetFamilies406One>(
 params: undefined |  GetFamiliesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamilies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamilies>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamilies<TData = Awaited<ReturnType<typeof getFamilies>>, TError = GetFamilies401One | GetFamilies403One | GetFamilies406One>(
 params?: GetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamilies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamilies>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamilies<TData = Awaited<ReturnType<typeof getFamilies>>, TError = GetFamilies401One | GetFamilies403One | GetFamilies406One>(
 params?: GetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamilies>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of families
 */

export function useGetFamilies<TData = Awaited<ReturnType<typeof getFamilies>>, TError = GetFamilies401One | GetFamilies403One | GetFamilies406One>(
 params?: GetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamilies>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFamiliesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several families at once.
 * @summary Update/create several families
 */
export type patchFamiliesResponse = {
  data: PatchFamilies200One;
  status: number;
  headers: Headers;
}

export const getPatchFamiliesUrl = () => {


  return `/api/rest/v1/families`
}

export const patchFamilies = async (patchFamiliesBody: PatchFamiliesBody, options?: RequestInit): Promise<patchFamiliesResponse> => {
  
  const res = await fetch(getPatchFamiliesUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchFamiliesBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchFamiliesMutationOptions = <TError = PatchFamilies401One | PatchFamilies403One | PatchFamilies413One | PatchFamilies415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamilies>>, TError,{data: PatchFamiliesBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchFamilies>>, TError,{data: PatchFamiliesBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchFamilies>>, {data: PatchFamiliesBody}> = (props) => {
          const {data} = props ?? {};

          return  patchFamilies(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchFamiliesMutationResult = NonNullable<Awaited<ReturnType<typeof patchFamilies>>>
    export type PatchFamiliesMutationBody = PatchFamiliesBody
    export type PatchFamiliesMutationError = PatchFamilies401One | PatchFamilies403One | PatchFamilies413One | PatchFamilies415One

    /**
 * @summary Update/create several families
 */
export const usePatchFamilies = <TError = PatchFamilies401One | PatchFamilies403One | PatchFamilies413One | PatchFamilies415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamilies>>, TError,{data: PatchFamiliesBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchFamilies>>,
        TError,
        {data: PatchFamiliesBody},
        TContext
      > => {

      const mutationOptions = getPatchFamiliesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new family.
 * @summary Create a new family
 */
export type postFamiliesResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostFamiliesUrl = () => {


  return `/api/rest/v1/families`
}

export const postFamilies = async (postFamiliesBody: PostFamiliesBody, options?: RequestInit): Promise<postFamiliesResponse> => {
  
  const res = await fetch(getPostFamiliesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postFamiliesBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostFamiliesMutationOptions = <TError = PostFamilies400One | PostFamilies401One | PostFamilies403One | PostFamilies415One | PostFamilies422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFamilies>>, TError,{data: PostFamiliesBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postFamilies>>, TError,{data: PostFamiliesBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFamilies>>, {data: PostFamiliesBody}> = (props) => {
          const {data} = props ?? {};

          return  postFamilies(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFamiliesMutationResult = NonNullable<Awaited<ReturnType<typeof postFamilies>>>
    export type PostFamiliesMutationBody = PostFamiliesBody
    export type PostFamiliesMutationError = PostFamilies400One | PostFamilies401One | PostFamilies403One | PostFamilies415One | PostFamilies422One

    /**
 * @summary Create a new family
 */
export const usePostFamilies = <TError = PostFamilies400One | PostFamilies401One | PostFamilies403One | PostFamilies415One | PostFamilies422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFamilies>>, TError,{data: PostFamiliesBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postFamilies>>,
        TError,
        {data: PostFamiliesBody},
        TContext
      > => {

      const mutationOptions = getPostFamiliesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given family.
 * @summary Get a family
 */
export type getFamiliesCodeResponse = {
  data: GetFamiliesCode200;
  status: number;
  headers: Headers;
}

export const getGetFamiliesCodeUrl = (code: string,) => {


  return `/api/rest/v1/families/${code}`
}

export const getFamiliesCode = async (code: string, options?: RequestInit): Promise<getFamiliesCodeResponse> => {
  
  const res = await fetch(getGetFamiliesCodeUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetFamiliesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/families/${code}`] as const;
    }

    
export const getGetFamiliesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getFamiliesCode>>, TError = GetFamiliesCode401One | GetFamiliesCode403One | GetFamiliesCode404One | GetFamiliesCode406One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFamiliesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFamiliesCode>>> = ({ signal }) => getFamiliesCode(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFamiliesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFamiliesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getFamiliesCode>>>
export type GetFamiliesCodeQueryError = GetFamiliesCode401One | GetFamiliesCode403One | GetFamiliesCode404One | GetFamiliesCode406One


export function useGetFamiliesCode<TData = Awaited<ReturnType<typeof getFamiliesCode>>, TError = GetFamiliesCode401One | GetFamiliesCode403One | GetFamiliesCode404One | GetFamiliesCode406One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamiliesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamiliesCode<TData = Awaited<ReturnType<typeof getFamiliesCode>>, TError = GetFamiliesCode401One | GetFamiliesCode403One | GetFamiliesCode404One | GetFamiliesCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamiliesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamiliesCode<TData = Awaited<ReturnType<typeof getFamiliesCode>>, TError = GetFamiliesCode401One | GetFamiliesCode403One | GetFamiliesCode404One | GetFamiliesCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a family
 */

export function useGetFamiliesCode<TData = Awaited<ReturnType<typeof getFamiliesCode>>, TError = GetFamiliesCode401One | GetFamiliesCode403One | GetFamiliesCode404One | GetFamiliesCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFamiliesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given family. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family exists for the given code, it creates it.
 * @summary Update/create a family
 */
export type patchFamiliesCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchFamiliesCodeUrl = (code: string,) => {


  return `/api/rest/v1/families/${code}`
}

export const patchFamiliesCode = async (code: string,
    patchFamiliesCodeBody: PatchFamiliesCodeBody, options?: RequestInit): Promise<patchFamiliesCodeResponse> => {
  
  const res = await fetch(getPatchFamiliesCodeUrl(code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchFamiliesCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchFamiliesCodeMutationOptions = <TError = PatchFamiliesCode400One | PatchFamiliesCode401One | PatchFamiliesCode403One | PatchFamiliesCode415One | PatchFamiliesCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesCode>>, TError,{code: string;data: PatchFamiliesCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesCode>>, TError,{code: string;data: PatchFamiliesCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchFamiliesCode>>, {code: string;data: PatchFamiliesCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchFamiliesCode(code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchFamiliesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchFamiliesCode>>>
    export type PatchFamiliesCodeMutationBody = PatchFamiliesCodeBody
    export type PatchFamiliesCodeMutationError = PatchFamiliesCode400One | PatchFamiliesCode401One | PatchFamiliesCode403One | PatchFamiliesCode415One | PatchFamiliesCode422One

    /**
 * @summary Update/create a family
 */
export const usePatchFamiliesCode = <TError = PatchFamiliesCode400One | PatchFamiliesCode401One | PatchFamiliesCode403One | PatchFamiliesCode415One | PatchFamiliesCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesCode>>, TError,{code: string;data: PatchFamiliesCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchFamiliesCode>>,
        TError,
        {code: string;data: PatchFamiliesCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchFamiliesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a family variant.
 * @summary Create a new family variant
 */
export type postFamiliesFamilyCodeVariantsResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostFamiliesFamilyCodeVariantsUrl = (familyCode: string,) => {


  return `/api/rest/v1/families/${familyCode}/variants`
}

export const postFamiliesFamilyCodeVariants = async (familyCode: string,
    postFamiliesFamilyCodeVariantsBody: PostFamiliesFamilyCodeVariantsBody, options?: RequestInit): Promise<postFamiliesFamilyCodeVariantsResponse> => {
  
  const res = await fetch(getPostFamiliesFamilyCodeVariantsUrl(familyCode),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postFamiliesFamilyCodeVariantsBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostFamiliesFamilyCodeVariantsMutationOptions = <TError = PostFamiliesFamilyCodeVariants400One | PostFamiliesFamilyCodeVariants401One | PostFamiliesFamilyCodeVariants403One | PostFamiliesFamilyCodeVariants415One | PostFamiliesFamilyCodeVariants422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFamiliesFamilyCodeVariants>>, TError,{familyCode: string;data: PostFamiliesFamilyCodeVariantsBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postFamiliesFamilyCodeVariants>>, TError,{familyCode: string;data: PostFamiliesFamilyCodeVariantsBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postFamiliesFamilyCodeVariants>>, {familyCode: string;data: PostFamiliesFamilyCodeVariantsBody}> = (props) => {
          const {familyCode,data} = props ?? {};

          return  postFamiliesFamilyCodeVariants(familyCode,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostFamiliesFamilyCodeVariantsMutationResult = NonNullable<Awaited<ReturnType<typeof postFamiliesFamilyCodeVariants>>>
    export type PostFamiliesFamilyCodeVariantsMutationBody = PostFamiliesFamilyCodeVariantsBody
    export type PostFamiliesFamilyCodeVariantsMutationError = PostFamiliesFamilyCodeVariants400One | PostFamiliesFamilyCodeVariants401One | PostFamiliesFamilyCodeVariants403One | PostFamiliesFamilyCodeVariants415One | PostFamiliesFamilyCodeVariants422One

    /**
 * @summary Create a new family variant
 */
export const usePostFamiliesFamilyCodeVariants = <TError = PostFamiliesFamilyCodeVariants400One | PostFamiliesFamilyCodeVariants401One | PostFamiliesFamilyCodeVariants403One | PostFamiliesFamilyCodeVariants415One | PostFamiliesFamilyCodeVariants422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postFamiliesFamilyCodeVariants>>, TError,{familyCode: string;data: PostFamiliesFamilyCodeVariantsBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postFamiliesFamilyCodeVariants>>,
        TError,
        {familyCode: string;data: PostFamiliesFamilyCodeVariantsBody},
        TContext
      > => {

      const mutationOptions = getPostFamiliesFamilyCodeVariantsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    