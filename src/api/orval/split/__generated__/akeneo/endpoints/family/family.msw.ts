/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetFamilies200One,
  GetFamiliesCode200,
  PatchFamilies200One
} from '../../model'

export const getGetFamiliesResponseMock = (): GetFamilies200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), previous: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]), current_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),attribute_as_image: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), attribute_as_label: faker.string.alpha(20), attribute_requirements: faker.helpers.arrayElement([{channelCode: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined])}, undefined]), attributes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), code: faker.string.alpha(20), labels: faker.helpers.arrayElement([{localeCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined])}, undefined])})

export const getPatchFamiliesResponseMock = (overrideResponse: Partial< PatchFamilies200One > = {}): PatchFamilies200One => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), identifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), line: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status_code: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetFamiliesCodeResponseMock = (): GetFamiliesCode200 => ({"attribute_as_image":"picture","attribute_as_label":"name","attribute_requirements":{"ecommerce":["sku","name","description","price","color"],"tablet":["sku","name","description","price"]},"attributes":["sku","name","description","price","color","picture"],"code":"caps","labels":{"en_US":"Caps","fr_FR":"Casquettes"}})


export const getGetFamiliesMockHandler = (overrideResponse?: GetFamilies200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFamilies200One> | GetFamilies200One)) => {
  return http.get('*/api/rest/v1/families', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFamiliesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchFamiliesMockHandler = (overrideResponse?: PatchFamilies200One | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchFamilies200One> | PatchFamilies200One)) => {
  return http.patch('*/api/rest/v1/families', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchFamiliesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostFamiliesMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/rest/v1/families', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getGetFamiliesCodeMockHandler = (overrideResponse?: GetFamiliesCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFamiliesCode200> | GetFamiliesCode200)) => {
  return http.get('*/api/rest/v1/families/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFamiliesCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchFamiliesCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/families/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getPostFamiliesFamilyCodeVariantsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/rest/v1/families/:familyCode/variants', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getFamilyMock = () => [
  getGetFamiliesMockHandler(),
  getPatchFamiliesMockHandler(),
  getPostFamiliesMockHandler(),
  getGetFamiliesCodeMockHandler(),
  getPatchFamiliesCodeMockHandler(),
  getPostFamiliesFamilyCodeVariantsMockHandler()
]
