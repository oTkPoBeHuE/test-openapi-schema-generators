/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  MeasurementFamiliesGetList200
} from '../../model/measurementFamiliesGetList200'
import type {
  MeasurementFamiliesGetList401One
} from '../../model/measurementFamiliesGetList401One'
import type {
  MeasurementFamiliesGetList406One
} from '../../model/measurementFamiliesGetList406One'
import type {
  PatchMeasurementFamilies200Item
} from '../../model/patchMeasurementFamilies200Item'
import type {
  PatchMeasurementFamilies401One
} from '../../model/patchMeasurementFamilies401One'
import type {
  PatchMeasurementFamilies413One
} from '../../model/patchMeasurementFamilies413One'
import type {
  PatchMeasurementFamilies415One
} from '../../model/patchMeasurementFamilies415One'
import type {
  PatchMeasurementFamiliesBodyItem
} from '../../model/patchMeasurementFamiliesBodyItem'



/**
 * This endpoint allows you to get a list of measurement families.
 * @summary Get list of measurement families
 */
export const measurementFamiliesGetList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MeasurementFamiliesGetList200>> => {
    
    return axios.default.get(
      `/api/rest/v1/measurement-families`,options
    );
  }


export const getMeasurementFamiliesGetListQueryKey = () => {
    return [`/api/rest/v1/measurement-families`] as const;
    }

    
export const getMeasurementFamiliesGetListQueryOptions = <TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = AxiosError<MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeasurementFamiliesGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof measurementFamiliesGetList>>> = ({ signal }) => measurementFamiliesGetList({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MeasurementFamiliesGetListQueryResult = NonNullable<Awaited<ReturnType<typeof measurementFamiliesGetList>>>
export type MeasurementFamiliesGetListQueryError = AxiosError<MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>


export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = AxiosError<MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof measurementFamiliesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = AxiosError<MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof measurementFamiliesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = AxiosError<MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of measurement families
 */

export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = AxiosError<MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMeasurementFamiliesGetListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several measurement families at once.
 * @summary Update/create several measurement families
 */
export const patchMeasurementFamilies = (
    patchMeasurementFamiliesBodyItem: PatchMeasurementFamiliesBodyItem[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchMeasurementFamilies200Item[]>> => {
    
    return axios.default.patch(
      `/api/rest/v1/measurement-families`,
      patchMeasurementFamiliesBodyItem,options
    );
  }



export const getPatchMeasurementFamiliesMutationOptions = <TError = AxiosError<PatchMeasurementFamilies401One | PatchMeasurementFamilies413One | PatchMeasurementFamilies415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasurementFamilies>>, TError,{data: PatchMeasurementFamiliesBodyItem[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchMeasurementFamilies>>, TError,{data: PatchMeasurementFamiliesBodyItem[]}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMeasurementFamilies>>, {data: PatchMeasurementFamiliesBodyItem[]}> = (props) => {
          const {data} = props ?? {};

          return  patchMeasurementFamilies(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMeasurementFamiliesMutationResult = NonNullable<Awaited<ReturnType<typeof patchMeasurementFamilies>>>
    export type PatchMeasurementFamiliesMutationBody = PatchMeasurementFamiliesBodyItem[]
    export type PatchMeasurementFamiliesMutationError = AxiosError<PatchMeasurementFamilies401One | PatchMeasurementFamilies413One | PatchMeasurementFamilies415One>

    /**
 * @summary Update/create several measurement families
 */
export const usePatchMeasurementFamilies = <TError = AxiosError<PatchMeasurementFamilies401One | PatchMeasurementFamilies413One | PatchMeasurementFamilies415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasurementFamilies>>, TError,{data: PatchMeasurementFamiliesBodyItem[]}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchMeasurementFamilies>>,
        TError,
        {data: PatchMeasurementFamiliesBodyItem[]},
        TContext
      > => {

      const mutationOptions = getPatchMeasurementFamiliesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    