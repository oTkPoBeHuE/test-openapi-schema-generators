/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  MeasurementFamiliesGetList200
} from '../../model/measurementFamiliesGetList200'
import type {
  MeasurementFamiliesGetList401One
} from '../../model/measurementFamiliesGetList401One'
import type {
  MeasurementFamiliesGetList406One
} from '../../model/measurementFamiliesGetList406One'
import type {
  PatchMeasurementFamilies200Item
} from '../../model/patchMeasurementFamilies200Item'
import type {
  PatchMeasurementFamilies401One
} from '../../model/patchMeasurementFamilies401One'
import type {
  PatchMeasurementFamilies413One
} from '../../model/patchMeasurementFamilies413One'
import type {
  PatchMeasurementFamilies415One
} from '../../model/patchMeasurementFamilies415One'
import type {
  PatchMeasurementFamiliesBodyItem
} from '../../model/patchMeasurementFamiliesBodyItem'



/**
 * This endpoint allows you to get a list of measurement families.
 * @summary Get list of measurement families
 */
export type measurementFamiliesGetListResponse = {
  data: MeasurementFamiliesGetList200;
  status: number;
  headers: Headers;
}

export const getMeasurementFamiliesGetListUrl = () => {


  return `/api/rest/v1/measurement-families`
}

export const measurementFamiliesGetList = async ( options?: RequestInit): Promise<measurementFamiliesGetListResponse> => {
  
  const res = await fetch(getMeasurementFamiliesGetListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getMeasurementFamiliesGetListQueryKey = () => {
    return [`/api/rest/v1/measurement-families`] as const;
    }

    
export const getMeasurementFamiliesGetListQueryOptions = <TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeasurementFamiliesGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof measurementFamiliesGetList>>> = ({ signal }) => measurementFamiliesGetList({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MeasurementFamiliesGetListQueryResult = NonNullable<Awaited<ReturnType<typeof measurementFamiliesGetList>>>
export type MeasurementFamiliesGetListQueryError = MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One


export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof measurementFamiliesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof measurementFamiliesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of measurement families
 */

export function useMeasurementFamiliesGetList<TData = Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError = MeasurementFamiliesGetList401One | MeasurementFamiliesGetList406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measurementFamiliesGetList>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMeasurementFamiliesGetListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several measurement families at once.
 * @summary Update/create several measurement families
 */
export type patchMeasurementFamiliesResponse = {
  data: PatchMeasurementFamilies200Item[];
  status: number;
  headers: Headers;
}

export const getPatchMeasurementFamiliesUrl = () => {


  return `/api/rest/v1/measurement-families`
}

export const patchMeasurementFamilies = async (patchMeasurementFamiliesBodyItem: PatchMeasurementFamiliesBodyItem[], options?: RequestInit): Promise<patchMeasurementFamiliesResponse> => {
  
  const res = await fetch(getPatchMeasurementFamiliesUrl(),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchMeasurementFamiliesBodyItem,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchMeasurementFamiliesMutationOptions = <TError = PatchMeasurementFamilies401One | PatchMeasurementFamilies413One | PatchMeasurementFamilies415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasurementFamilies>>, TError,{data: PatchMeasurementFamiliesBodyItem[]}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchMeasurementFamilies>>, TError,{data: PatchMeasurementFamiliesBodyItem[]}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMeasurementFamilies>>, {data: PatchMeasurementFamiliesBodyItem[]}> = (props) => {
          const {data} = props ?? {};

          return  patchMeasurementFamilies(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchMeasurementFamiliesMutationResult = NonNullable<Awaited<ReturnType<typeof patchMeasurementFamilies>>>
    export type PatchMeasurementFamiliesMutationBody = PatchMeasurementFamiliesBodyItem[]
    export type PatchMeasurementFamiliesMutationError = PatchMeasurementFamilies401One | PatchMeasurementFamilies413One | PatchMeasurementFamilies415One

    /**
 * @summary Update/create several measurement families
 */
export const usePatchMeasurementFamilies = <TError = PatchMeasurementFamilies401One | PatchMeasurementFamilies413One | PatchMeasurementFamilies415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchMeasurementFamilies>>, TError,{data: PatchMeasurementFamiliesBodyItem[]}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchMeasurementFamilies>>,
        TError,
        {data: PatchMeasurementFamiliesBodyItem[]},
        TContext
      > => {

      const mutationOptions = getPatchMeasurementFamiliesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    