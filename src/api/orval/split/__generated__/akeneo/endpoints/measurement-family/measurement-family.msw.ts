/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  MeasurementFamiliesGetList200,
  PatchMeasurementFamilies200Item
} from '../../model'

export const getMeasurementFamiliesGetListResponseMock = (): MeasurementFamiliesGetList200 => ({"code":"AREA","labels":{"en_US":"Area","fr_FR":"Surface"},"standard_unit_code":"SQUARE_METER","units":{"SQUARE_CENTIMETER":{"code":"SQUARE_CENTIMETER","convert_from_standard":[{"operator":"mul","value":"0.0001"}],"labels":{"en_US":"Square centimeter","fr_FR":"Centimètre carré"},"symbol":"cm²"},"SQUARE_METER":{"code":"SQUARE_METER","convert_from_standard":[{"operator":"mul","value":"1"}],"labels":{"en_US":"Square meter","fr_FR":"Mètre carré"},"symbol":"m²"},"SQUARE_MILLIMETER":{"code":"SQUARE_MILLIMETER","convert_from_standard":[{"operator":"mul","value":"0.000001"}],"labels":{"en_US":"Square millimeter","fr_FR":"Millimètre carré"},"symbol":"mm²"}}})

export const getPatchMeasurementFamiliesResponseMock = (): PatchMeasurementFamilies200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), errors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), property: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status_code: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))


export const getMeasurementFamiliesGetListMockHandler = (overrideResponse?: MeasurementFamiliesGetList200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<MeasurementFamiliesGetList200> | MeasurementFamiliesGetList200)) => {
  return http.get('*/api/rest/v1/measurement-families', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getMeasurementFamiliesGetListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchMeasurementFamiliesMockHandler = (overrideResponse?: PatchMeasurementFamilies200Item[] | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchMeasurementFamilies200Item[]> | PatchMeasurementFamilies200Item[])) => {
  return http.patch('*/api/rest/v1/measurement-families', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchMeasurementFamiliesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getMeasurementFamilyMock = () => [
  getMeasurementFamiliesGetListMockHandler(),
  getPatchMeasurementFamiliesMockHandler()
]
