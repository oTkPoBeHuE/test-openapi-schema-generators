/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetReferenceEntityMediaFilesCode401One
} from '../../model/getReferenceEntityMediaFilesCode401One'
import type {
  GetReferenceEntityMediaFilesCode404One
} from '../../model/getReferenceEntityMediaFilesCode404One'
import type {
  PostAssetMediaFilesBodyBody
} from '../../model/postAssetMediaFilesBodyBody'
import type {
  PostReferenceEntityMediaFiles401One
} from '../../model/postReferenceEntityMediaFiles401One'
import type {
  PostReferenceEntityMediaFiles415One
} from '../../model/postReferenceEntityMediaFiles415One'
import type {
  PostReferenceEntityMediaFiles422One
} from '../../model/postReferenceEntityMediaFiles422One'
import type {
  PostReferenceEntityMediaFilesHeaders
} from '../../model/postReferenceEntityMediaFilesHeaders'



/**
 * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
 * @summary Create a new media file for a reference entity or a record
 */
export type postReferenceEntityMediaFilesResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostReferenceEntityMediaFilesUrl = () => {


  return `/api/rest/v1/reference-entities-media-files`
}

export const postReferenceEntityMediaFiles = async (postAssetMediaFilesBodyBody: PostAssetMediaFilesBodyBody,
    headers: PostReferenceEntityMediaFilesHeaders, options?: RequestInit): Promise<postReferenceEntityMediaFilesResponse> => {
  
  const res = await fetch(getPostReferenceEntityMediaFilesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAssetMediaFilesBodyBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostReferenceEntityMediaFilesMutationOptions = <TError = PostReferenceEntityMediaFiles401One | PostReferenceEntityMediaFiles415One | PostReferenceEntityMediaFiles422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postReferenceEntityMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostReferenceEntityMediaFilesHeaders}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postReferenceEntityMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostReferenceEntityMediaFilesHeaders}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postReferenceEntityMediaFiles>>, {data: PostAssetMediaFilesBodyBody;headers: PostReferenceEntityMediaFilesHeaders}> = (props) => {
          const {data,headers} = props ?? {};

          return  postReferenceEntityMediaFiles(data,headers,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostReferenceEntityMediaFilesMutationResult = NonNullable<Awaited<ReturnType<typeof postReferenceEntityMediaFiles>>>
    export type PostReferenceEntityMediaFilesMutationBody = PostAssetMediaFilesBodyBody
    export type PostReferenceEntityMediaFilesMutationError = PostReferenceEntityMediaFiles401One | PostReferenceEntityMediaFiles415One | PostReferenceEntityMediaFiles422One

    /**
 * @summary Create a new media file for a reference entity or a record
 */
export const usePostReferenceEntityMediaFiles = <TError = PostReferenceEntityMediaFiles401One | PostReferenceEntityMediaFiles415One | PostReferenceEntityMediaFiles422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postReferenceEntityMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostReferenceEntityMediaFilesHeaders}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postReferenceEntityMediaFiles>>,
        TError,
        {data: PostAssetMediaFilesBodyBody;headers: PostReferenceEntityMediaFilesHeaders},
        TContext
      > => {

      const mutationOptions = getPostReferenceEntityMediaFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
 * @summary Download the media file associated to a reference entity or a record
 */
export type getReferenceEntityMediaFilesCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getGetReferenceEntityMediaFilesCodeUrl = (code: string,) => {


  return `/api/rest/v1/reference-entities-media-files/${code}`
}

export const getReferenceEntityMediaFilesCode = async (code: string, options?: RequestInit): Promise<getReferenceEntityMediaFilesCodeResponse> => {
  
  const res = await fetch(getGetReferenceEntityMediaFilesCodeUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetReferenceEntityMediaFilesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/reference-entities-media-files/${code}`] as const;
    }

    
export const getGetReferenceEntityMediaFilesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError = GetReferenceEntityMediaFilesCode401One | GetReferenceEntityMediaFilesCode404One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceEntityMediaFilesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>> = ({ signal }) => getReferenceEntityMediaFilesCode(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceEntityMediaFilesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>>
export type GetReferenceEntityMediaFilesCodeQueryError = GetReferenceEntityMediaFilesCode401One | GetReferenceEntityMediaFilesCode404One


export function useGetReferenceEntityMediaFilesCode<TData = Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError = GetReferenceEntityMediaFilesCode401One | GetReferenceEntityMediaFilesCode404One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityMediaFilesCode<TData = Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError = GetReferenceEntityMediaFilesCode401One | GetReferenceEntityMediaFilesCode404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityMediaFilesCode<TData = Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError = GetReferenceEntityMediaFilesCode401One | GetReferenceEntityMediaFilesCode404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download the media file associated to a reference entity or a record
 */

export function useGetReferenceEntityMediaFilesCode<TData = Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError = GetReferenceEntityMediaFilesCode401One | GetReferenceEntityMediaFilesCode404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceEntityMediaFilesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



