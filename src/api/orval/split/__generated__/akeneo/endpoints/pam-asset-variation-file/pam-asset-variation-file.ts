/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetVariationFilesChannelCodeLocaleCode200
} from '../../model/getVariationFilesChannelCodeLocaleCode200'
import type {
  GetVariationFilesChannelCodeLocaleCode401One
} from '../../model/getVariationFilesChannelCodeLocaleCode401One'
import type {
  GetVariationFilesChannelCodeLocaleCode403One
} from '../../model/getVariationFilesChannelCodeLocaleCode403One'
import type {
  GetVariationFilesChannelCodeLocaleCode404One
} from '../../model/getVariationFilesChannelCodeLocaleCode404One'
import type {
  GetVariationFilesChannelCodeLocaleCode406One
} from '../../model/getVariationFilesChannelCodeLocaleCode406One'
import type {
  GetVariationFilesChannelCodeLocaleCodeDownload401One
} from '../../model/getVariationFilesChannelCodeLocaleCodeDownload401One'
import type {
  GetVariationFilesChannelCodeLocaleCodeDownload403One
} from '../../model/getVariationFilesChannelCodeLocaleCodeDownload403One'
import type {
  GetVariationFilesChannelCodeLocaleCodeDownload404One
} from '../../model/getVariationFilesChannelCodeLocaleCodeDownload404One'
import type {
  PostReferenceFilesLocaleCodeBodyBody
} from '../../model/postReferenceFilesLocaleCodeBodyBody'
import type {
  PostVariationFilesChannelCodeLocaleCode400One
} from '../../model/postVariationFilesChannelCodeLocaleCode400One'
import type {
  PostVariationFilesChannelCodeLocaleCode401One
} from '../../model/postVariationFilesChannelCodeLocaleCode401One'
import type {
  PostVariationFilesChannelCodeLocaleCode403One
} from '../../model/postVariationFilesChannelCodeLocaleCode403One'
import type {
  PostVariationFilesChannelCodeLocaleCode404One
} from '../../model/postVariationFilesChannelCodeLocaleCode404One'
import type {
  PostVariationFilesChannelCodeLocaleCode415One
} from '../../model/postVariationFilesChannelCodeLocaleCode415One'
import type {
  PostVariationFilesChannelCodeLocaleCode422One
} from '../../model/postVariationFilesChannelCodeLocaleCode422One'
import type {
  PostVariationFilesChannelCodeLocaleCodeHeaders
} from '../../model/postVariationFilesChannelCodeLocaleCodeHeaders'



/**
 * This endpoint allows you to get the information about a variation file of a given PAM asset.
 * @summary Get a variation file
 */
export type getVariationFilesChannelCodeLocaleCodeResponse = {
  data: GetVariationFilesChannelCodeLocaleCode200;
  status: number;
  headers: Headers;
}

export const getGetVariationFilesChannelCodeLocaleCodeUrl = (assetCode: string,
    channelCode: string,
    localeCode: string,) => {


  return `/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}`
}

export const getVariationFilesChannelCodeLocaleCode = async (assetCode: string,
    channelCode: string,
    localeCode: string, options?: RequestInit): Promise<getVariationFilesChannelCodeLocaleCodeResponse> => {
  
  const res = await fetch(getGetVariationFilesChannelCodeLocaleCodeUrl(assetCode,channelCode,localeCode),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetVariationFilesChannelCodeLocaleCodeQueryKey = (assetCode: string,
    channelCode: string,
    localeCode: string,) => {
    return [`/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}`] as const;
    }

    
export const getGetVariationFilesChannelCodeLocaleCodeQueryOptions = <TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError = GetVariationFilesChannelCodeLocaleCode401One | GetVariationFilesChannelCodeLocaleCode403One | GetVariationFilesChannelCodeLocaleCode404One | GetVariationFilesChannelCodeLocaleCode406One>(assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVariationFilesChannelCodeLocaleCodeQueryKey(assetCode,channelCode,localeCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>> = ({ signal }) => getVariationFilesChannelCodeLocaleCode(assetCode,channelCode,localeCode, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetCode && channelCode && localeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVariationFilesChannelCodeLocaleCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>>
export type GetVariationFilesChannelCodeLocaleCodeQueryError = GetVariationFilesChannelCodeLocaleCode401One | GetVariationFilesChannelCodeLocaleCode403One | GetVariationFilesChannelCodeLocaleCode404One | GetVariationFilesChannelCodeLocaleCode406One


export function useGetVariationFilesChannelCodeLocaleCode<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError = GetVariationFilesChannelCodeLocaleCode401One | GetVariationFilesChannelCodeLocaleCode403One | GetVariationFilesChannelCodeLocaleCode404One | GetVariationFilesChannelCodeLocaleCode406One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVariationFilesChannelCodeLocaleCode<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError = GetVariationFilesChannelCodeLocaleCode401One | GetVariationFilesChannelCodeLocaleCode403One | GetVariationFilesChannelCodeLocaleCode404One | GetVariationFilesChannelCodeLocaleCode406One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVariationFilesChannelCodeLocaleCode<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError = GetVariationFilesChannelCodeLocaleCode401One | GetVariationFilesChannelCodeLocaleCode403One | GetVariationFilesChannelCodeLocaleCode404One | GetVariationFilesChannelCodeLocaleCode406One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a variation file
 */

export function useGetVariationFilesChannelCodeLocaleCode<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError = GetVariationFilesChannelCodeLocaleCode401One | GetVariationFilesChannelCodeLocaleCode403One | GetVariationFilesChannelCodeLocaleCode404One | GetVariationFilesChannelCodeLocaleCode406One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVariationFilesChannelCodeLocaleCodeQueryOptions(assetCode,channelCode,localeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
 * @summary Upload a new variation file
 */
export type postVariationFilesChannelCodeLocaleCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostVariationFilesChannelCodeLocaleCodeUrl = (assetCode: string,
    channelCode: string,
    localeCode: string,) => {


  return `/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}`
}

export const postVariationFilesChannelCodeLocaleCode = async (assetCode: string,
    channelCode: string,
    localeCode: string,
    postReferenceFilesLocaleCodeBodyBody: PostReferenceFilesLocaleCodeBodyBody,
    headers: PostVariationFilesChannelCodeLocaleCodeHeaders, options?: RequestInit): Promise<postVariationFilesChannelCodeLocaleCodeResponse> => {
  
  const res = await fetch(getPostVariationFilesChannelCodeLocaleCodeUrl(assetCode,channelCode,localeCode),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postReferenceFilesLocaleCodeBodyBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostVariationFilesChannelCodeLocaleCodeMutationOptions = <TError = PostVariationFilesChannelCodeLocaleCode400One | PostVariationFilesChannelCodeLocaleCode401One | PostVariationFilesChannelCodeLocaleCode403One | PostVariationFilesChannelCodeLocaleCode404One | PostVariationFilesChannelCodeLocaleCode415One | PostVariationFilesChannelCodeLocaleCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVariationFilesChannelCodeLocaleCode>>, TError,{assetCode: string;channelCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostVariationFilesChannelCodeLocaleCodeHeaders}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postVariationFilesChannelCodeLocaleCode>>, TError,{assetCode: string;channelCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostVariationFilesChannelCodeLocaleCodeHeaders}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postVariationFilesChannelCodeLocaleCode>>, {assetCode: string;channelCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostVariationFilesChannelCodeLocaleCodeHeaders}> = (props) => {
          const {assetCode,channelCode,localeCode,data,headers} = props ?? {};

          return  postVariationFilesChannelCodeLocaleCode(assetCode,channelCode,localeCode,data,headers,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostVariationFilesChannelCodeLocaleCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postVariationFilesChannelCodeLocaleCode>>>
    export type PostVariationFilesChannelCodeLocaleCodeMutationBody = PostReferenceFilesLocaleCodeBodyBody
    export type PostVariationFilesChannelCodeLocaleCodeMutationError = PostVariationFilesChannelCodeLocaleCode400One | PostVariationFilesChannelCodeLocaleCode401One | PostVariationFilesChannelCodeLocaleCode403One | PostVariationFilesChannelCodeLocaleCode404One | PostVariationFilesChannelCodeLocaleCode415One | PostVariationFilesChannelCodeLocaleCode422One

    /**
 * @summary Upload a new variation file
 */
export const usePostVariationFilesChannelCodeLocaleCode = <TError = PostVariationFilesChannelCodeLocaleCode400One | PostVariationFilesChannelCodeLocaleCode401One | PostVariationFilesChannelCodeLocaleCode403One | PostVariationFilesChannelCodeLocaleCode404One | PostVariationFilesChannelCodeLocaleCode415One | PostVariationFilesChannelCodeLocaleCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postVariationFilesChannelCodeLocaleCode>>, TError,{assetCode: string;channelCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostVariationFilesChannelCodeLocaleCodeHeaders}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postVariationFilesChannelCodeLocaleCode>>,
        TError,
        {assetCode: string;channelCode: string;localeCode: string;data: PostReferenceFilesLocaleCodeBodyBody;headers: PostVariationFilesChannelCodeLocaleCodeHeaders},
        TContext
      > => {

      const mutationOptions = getPostVariationFilesChannelCodeLocaleCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to download a given variation file.
 * @summary Download a variation file
 */
export type getVariationFilesChannelCodeLocaleCodeDownloadResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getGetVariationFilesChannelCodeLocaleCodeDownloadUrl = (assetCode: string,
    channelCode: string,
    localeCode: string,) => {


  return `/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}/download`
}

export const getVariationFilesChannelCodeLocaleCodeDownload = async (assetCode: string,
    channelCode: string,
    localeCode: string, options?: RequestInit): Promise<getVariationFilesChannelCodeLocaleCodeDownloadResponse> => {
  
  const res = await fetch(getGetVariationFilesChannelCodeLocaleCodeDownloadUrl(assetCode,channelCode,localeCode),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetVariationFilesChannelCodeLocaleCodeDownloadQueryKey = (assetCode: string,
    channelCode: string,
    localeCode: string,) => {
    return [`/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}/download`] as const;
    }

    
export const getGetVariationFilesChannelCodeLocaleCodeDownloadQueryOptions = <TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError = GetVariationFilesChannelCodeLocaleCodeDownload401One | GetVariationFilesChannelCodeLocaleCodeDownload403One | GetVariationFilesChannelCodeLocaleCodeDownload404One>(assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetVariationFilesChannelCodeLocaleCodeDownloadQueryKey(assetCode,channelCode,localeCode);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>> = ({ signal }) => getVariationFilesChannelCodeLocaleCodeDownload(assetCode,channelCode,localeCode, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetCode && channelCode && localeCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetVariationFilesChannelCodeLocaleCodeDownloadQueryResult = NonNullable<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>>
export type GetVariationFilesChannelCodeLocaleCodeDownloadQueryError = GetVariationFilesChannelCodeLocaleCodeDownload401One | GetVariationFilesChannelCodeLocaleCodeDownload403One | GetVariationFilesChannelCodeLocaleCodeDownload404One


export function useGetVariationFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError = GetVariationFilesChannelCodeLocaleCodeDownload401One | GetVariationFilesChannelCodeLocaleCodeDownload403One | GetVariationFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVariationFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError = GetVariationFilesChannelCodeLocaleCodeDownload401One | GetVariationFilesChannelCodeLocaleCodeDownload403One | GetVariationFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetVariationFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError = GetVariationFilesChannelCodeLocaleCodeDownload401One | GetVariationFilesChannelCodeLocaleCodeDownload403One | GetVariationFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download a variation file
 */

export function useGetVariationFilesChannelCodeLocaleCodeDownload<TData = Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError = GetVariationFilesChannelCodeLocaleCodeDownload401One | GetVariationFilesChannelCodeLocaleCodeDownload403One | GetVariationFilesChannelCodeLocaleCodeDownload404One>(
 assetCode: string,
    channelCode: string,
    localeCode: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getVariationFilesChannelCodeLocaleCodeDownload>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetVariationFilesChannelCodeLocaleCodeDownloadQueryOptions(assetCode,channelCode,localeCode,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



