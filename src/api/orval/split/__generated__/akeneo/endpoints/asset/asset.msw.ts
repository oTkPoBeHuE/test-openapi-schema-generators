/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetAssets200One,
  GetAssetsCode200,
  PatchAssets200Item
} from '../../model'

export const getGetAssetsResponseMock = (): GetAssets200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),..._embedded: faker.helpers.arrayElement([{_items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),code: faker.string.alpha(20), created: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), values: faker.helpers.arrayElement([{attributeCode: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({channel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{}, undefined]), locale: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])}, undefined])})), undefined])}, undefined])})

export const getPatchAssetsResponseMock = (): PatchAssets200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status_code: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetAssetsCodeResponseMock = (): GetAssetsCode200 => ({"code":"sku_54628_picture1","created":"2024-12-15T12:31:08.227Z","updated":"2024-12-15T12:31:08.227Z","values":{"end_of_use_date":[{"channel":null,"data":"02/03/2021","locale":null}],"main_colors":[{"channel":null,"data":["red","purple"],"locale":null}],"media_preview":[{"channel":null,"data":"sku_54628_picture1.jpg","locale":null}],"model_wears_size":[{"channel":null,"data":"s","locale":null}],"photographer":[{"channel":null,"data":"ben_levy","locale":null}]}})


export const getGetAssetsMockHandler = (overrideResponse?: GetAssets200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAssets200One> | GetAssets200One)) => {
  return http.get('*/api/rest/v1/asset-families/:assetFamilyCode/assets', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssetsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchAssetsMockHandler = (overrideResponse?: PatchAssets200Item[] | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchAssets200Item[]> | PatchAssets200Item[])) => {
  return http.patch('*/api/rest/v1/asset-families/:assetFamilyCode/assets', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchAssetsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteAssetsCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/rest/v1/asset-families/:assetFamilyCode/assets/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetAssetsCodeMockHandler = (overrideResponse?: GetAssetsCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetAssetsCode200> | GetAssetsCode200)) => {
  return http.get('*/api/rest/v1/asset-families/:assetFamilyCode/assets/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAssetsCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchAssetCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/asset-families/:assetFamilyCode/assets/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getAssetMock = () => [
  getGetAssetsMockHandler(),
  getPatchAssetsMockHandler(),
  getDeleteAssetsCodeMockHandler(),
  getGetAssetsCodeMockHandler(),
  getPatchAssetCodeMockHandler()
]
