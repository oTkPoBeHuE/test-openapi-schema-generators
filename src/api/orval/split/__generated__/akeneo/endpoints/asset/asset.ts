/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DeleteAssetsCode401One
} from '../../model/deleteAssetsCode401One'
import type {
  DeleteAssetsCode404One
} from '../../model/deleteAssetsCode404One'
import type {
  GetAssets200One
} from '../../model/getAssets200One'
import type {
  GetAssets401One
} from '../../model/getAssets401One'
import type {
  GetAssets406One
} from '../../model/getAssets406One'
import type {
  GetAssetsCode200
} from '../../model/getAssetsCode200'
import type {
  GetAssetsCode401One
} from '../../model/getAssetsCode401One'
import type {
  GetAssetsCode404One
} from '../../model/getAssetsCode404One'
import type {
  GetAssetsCode406One
} from '../../model/getAssetsCode406One'
import type {
  GetAssetsParams
} from '../../model/getAssetsParams'
import type {
  PatchAssetCode400One
} from '../../model/patchAssetCode400One'
import type {
  PatchAssetCode401One
} from '../../model/patchAssetCode401One'
import type {
  PatchAssetCode415One
} from '../../model/patchAssetCode415One'
import type {
  PatchAssetCode422One
} from '../../model/patchAssetCode422One'
import type {
  PatchAssetCodeBody
} from '../../model/patchAssetCodeBody'
import type {
  PatchAssets200Item
} from '../../model/patchAssets200Item'
import type {
  PatchAssets400One
} from '../../model/patchAssets400One'
import type {
  PatchAssets401One
} from '../../model/patchAssets401One'
import type {
  PatchAssets413One
} from '../../model/patchAssets413One'
import type {
  PatchAssets415One
} from '../../model/patchAssets415One'
import type {
  PatchAssetsBodyItem
} from '../../model/patchAssetsBodyItem'



/**
 * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
 * @summary Get the list of the assets of a given asset family
 */
export type getAssetsResponse = {
  data: GetAssets200One;
  status: number;
  headers: Headers;
}

export const getGetAssetsUrl = (assetFamilyCode: string,
    params?: GetAssetsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/asset-families/${assetFamilyCode}/assets?${normalizedParams.toString()}` : `/api/rest/v1/asset-families/${assetFamilyCode}/assets`
}

export const getAssets = async (assetFamilyCode: string,
    params?: GetAssetsParams, options?: RequestInit): Promise<getAssetsResponse> => {
  
  const res = await fetch(getGetAssetsUrl(assetFamilyCode,params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetsQueryKey = (assetFamilyCode: string,
    params?: GetAssetsParams,) => {
    return [`/api/rest/v1/asset-families/${assetFamilyCode}/assets`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAssetsQueryOptions = <TData = Awaited<ReturnType<typeof getAssets>>, TError = GetAssets401One | GetAssets406One>(assetFamilyCode: string,
    params?: GetAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsQueryKey(assetFamilyCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssets>>> = ({ signal }) => getAssets(assetFamilyCode,params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetFamilyCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetsQueryResult = NonNullable<Awaited<ReturnType<typeof getAssets>>>
export type GetAssetsQueryError = GetAssets401One | GetAssets406One


export function useGetAssets<TData = Awaited<ReturnType<typeof getAssets>>, TError = GetAssets401One | GetAssets406One>(
 assetFamilyCode: string,
    params: undefined |  GetAssetsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssets>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssets<TData = Awaited<ReturnType<typeof getAssets>>, TError = GetAssets401One | GetAssets406One>(
 assetFamilyCode: string,
    params?: GetAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssets>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssets<TData = Awaited<ReturnType<typeof getAssets>>, TError = GetAssets401One | GetAssets406One>(
 assetFamilyCode: string,
    params?: GetAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of the assets of a given asset family
 */

export function useGetAssets<TData = Awaited<ReturnType<typeof getAssets>>, TError = GetAssets401One | GetAssets406One>(
 assetFamilyCode: string,
    params?: GetAssetsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssets>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetsQueryOptions(assetFamilyCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href="/documentation/update.html#patch-asset-attribute-values">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
 * @summary Update/create several assets
 */
export type patchAssetsResponse = {
  data: PatchAssets200Item[];
  status: number;
  headers: Headers;
}

export const getPatchAssetsUrl = (assetFamilyCode: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/assets`
}

export const patchAssets = async (assetFamilyCode: string,
    patchAssetsBodyItem: PatchAssetsBodyItem[], options?: RequestInit): Promise<patchAssetsResponse> => {
  
  const res = await fetch(getPatchAssetsUrl(assetFamilyCode),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAssetsBodyItem,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAssetsMutationOptions = <TError = PatchAssets400One | PatchAssets401One | PatchAssets413One | PatchAssets415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssets>>, TError,{assetFamilyCode: string;data: PatchAssetsBodyItem[]}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssets>>, TError,{assetFamilyCode: string;data: PatchAssetsBodyItem[]}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssets>>, {assetFamilyCode: string;data: PatchAssetsBodyItem[]}> = (props) => {
          const {assetFamilyCode,data} = props ?? {};

          return  patchAssets(assetFamilyCode,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetsMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssets>>>
    export type PatchAssetsMutationBody = PatchAssetsBodyItem[]
    export type PatchAssetsMutationError = PatchAssets400One | PatchAssets401One | PatchAssets413One | PatchAssets415One

    /**
 * @summary Update/create several assets
 */
export const usePatchAssets = <TError = PatchAssets400One | PatchAssets401One | PatchAssets413One | PatchAssets415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssets>>, TError,{assetFamilyCode: string;data: PatchAssetsBodyItem[]}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssets>>,
        TError,
        {assetFamilyCode: string;data: PatchAssetsBodyItem[]},
        TContext
      > => {

      const mutationOptions = getPatchAssetsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
 * @summary Delete an asset
 */
export type deleteAssetsCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getDeleteAssetsCodeUrl = (assetFamilyCode: string,
    code: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`
}

export const deleteAssetsCode = async (assetFamilyCode: string,
    code: string, options?: RequestInit): Promise<deleteAssetsCodeResponse> => {
  
  const res = await fetch(getDeleteAssetsCodeUrl(assetFamilyCode,code),
  {      
    ...options,
    method: 'DELETE'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getDeleteAssetsCodeMutationOptions = <TError = DeleteAssetsCode401One | DeleteAssetsCode404One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsCode>>, TError,{assetFamilyCode: string;code: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsCode>>, TError,{assetFamilyCode: string;code: string}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAssetsCode>>, {assetFamilyCode: string;code: string}> = (props) => {
          const {assetFamilyCode,code} = props ?? {};

          return  deleteAssetsCode(assetFamilyCode,code,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAssetsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAssetsCode>>>
    
    export type DeleteAssetsCodeMutationError = DeleteAssetsCode401One | DeleteAssetsCode404One

    /**
 * @summary Delete an asset
 */
export const useDeleteAssetsCode = <TError = DeleteAssetsCode401One | DeleteAssetsCode404One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAssetsCode>>, TError,{assetFamilyCode: string;code: string}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAssetsCode>>,
        TError,
        {assetFamilyCode: string;code: string},
        TContext
      > => {

      const mutationOptions = getDeleteAssetsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
 * @summary Get an asset of a given asset family
 */
export type getAssetsCodeResponse = {
  data: GetAssetsCode200;
  status: number;
  headers: Headers;
}

export const getGetAssetsCodeUrl = (assetFamilyCode: string,
    code: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`
}

export const getAssetsCode = async (assetFamilyCode: string,
    code: string, options?: RequestInit): Promise<getAssetsCodeResponse> => {
  
  const res = await fetch(getGetAssetsCodeUrl(assetFamilyCode,code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetsCodeQueryKey = (assetFamilyCode: string,
    code: string,) => {
    return [`/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`] as const;
    }

    
export const getGetAssetsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetsCode>>, TError = GetAssetsCode401One | GetAssetsCode404One | GetAssetsCode406One>(assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetsCodeQueryKey(assetFamilyCode,code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetsCode>>> = ({ signal }) => getAssetsCode(assetFamilyCode,code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(assetFamilyCode && code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetsCode>>>
export type GetAssetsCodeQueryError = GetAssetsCode401One | GetAssetsCode404One | GetAssetsCode406One


export function useGetAssetsCode<TData = Awaited<ReturnType<typeof getAssetsCode>>, TError = GetAssetsCode401One | GetAssetsCode404One | GetAssetsCode406One>(
 assetFamilyCode: string,
    code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetsCode<TData = Awaited<ReturnType<typeof getAssetsCode>>, TError = GetAssetsCode401One | GetAssetsCode404One | GetAssetsCode406One>(
 assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetsCode<TData = Awaited<ReturnType<typeof getAssetsCode>>, TError = GetAssetsCode401One | GetAssetsCode404One | GetAssetsCode406One>(
 assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an asset of a given asset family
 */

export function useGetAssetsCode<TData = Awaited<ReturnType<typeof getAssetsCode>>, TError = GetAssetsCode401One | GetAssetsCode404One | GetAssetsCode406One>(
 assetFamilyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetsCodeQueryOptions(assetFamilyCode,code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href="/documentation/update.html#patch-asset-attribute-values">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
 * @summary Update/create an asset
 */
export type patchAssetCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchAssetCodeUrl = (assetFamilyCode: string,
    code: string,) => {


  return `/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`
}

export const patchAssetCode = async (assetFamilyCode: string,
    code: string,
    patchAssetCodeBody: PatchAssetCodeBody, options?: RequestInit): Promise<patchAssetCodeResponse> => {
  
  const res = await fetch(getPatchAssetCodeUrl(assetFamilyCode,code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAssetCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAssetCodeMutationOptions = <TError = PatchAssetCode400One | PatchAssetCode401One | PatchAssetCode415One | PatchAssetCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetCode>>, TError,{assetFamilyCode: string;code: string;data: PatchAssetCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetCode>>, TError,{assetFamilyCode: string;code: string;data: PatchAssetCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetCode>>, {assetFamilyCode: string;code: string;data: PatchAssetCodeBody}> = (props) => {
          const {assetFamilyCode,code,data} = props ?? {};

          return  patchAssetCode(assetFamilyCode,code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetCode>>>
    export type PatchAssetCodeMutationBody = PatchAssetCodeBody
    export type PatchAssetCodeMutationError = PatchAssetCode400One | PatchAssetCode401One | PatchAssetCode415One | PatchAssetCode422One

    /**
 * @summary Update/create an asset
 */
export const usePatchAssetCode = <TError = PatchAssetCode400One | PatchAssetCode401One | PatchAssetCode415One | PatchAssetCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetCode>>, TError,{assetFamilyCode: string;code: string;data: PatchAssetCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetCode>>,
        TError,
        {assetFamilyCode: string;code: string;data: PatchAssetCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    