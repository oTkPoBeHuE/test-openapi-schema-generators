/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetAssetFamilies200One
} from '../../model/getAssetFamilies200One'
import type {
  GetAssetFamilies401One
} from '../../model/getAssetFamilies401One'
import type {
  GetAssetFamilies406One
} from '../../model/getAssetFamilies406One'
import type {
  GetAssetFamiliesParams
} from '../../model/getAssetFamiliesParams'
import type {
  GetAssetFamilyCode200
} from '../../model/getAssetFamilyCode200'
import type {
  GetAssetFamilyCode401One
} from '../../model/getAssetFamilyCode401One'
import type {
  GetAssetFamilyCode404One
} from '../../model/getAssetFamilyCode404One'
import type {
  GetAssetFamilyCode406One
} from '../../model/getAssetFamilyCode406One'
import type {
  PatchAssetFamilyCode401One
} from '../../model/patchAssetFamilyCode401One'
import type {
  PatchAssetFamilyCode415One
} from '../../model/patchAssetFamilyCode415One'
import type {
  PatchAssetFamilyCode422One
} from '../../model/patchAssetFamilyCode422One'
import type {
  PatchAssetFamilyCodeBody
} from '../../model/patchAssetFamilyCodeBody'



/**
 * This endpoint allows you to get a list of asset families. Asset families are paginated.
 * @summary Get list of asset families
 */
export type getAssetFamiliesResponse = {
  data: GetAssetFamilies200One;
  status: number;
  headers: Headers;
}

export const getGetAssetFamiliesUrl = (params?: GetAssetFamiliesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/asset-families?${normalizedParams.toString()}` : `/api/rest/v1/asset-families`
}

export const getAssetFamilies = async (params?: GetAssetFamiliesParams, options?: RequestInit): Promise<getAssetFamiliesResponse> => {
  
  const res = await fetch(getGetAssetFamiliesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetFamiliesQueryKey = (params?: GetAssetFamiliesParams,) => {
    return [`/api/rest/v1/asset-families`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAssetFamiliesQueryOptions = <TData = Awaited<ReturnType<typeof getAssetFamilies>>, TError = GetAssetFamilies401One | GetAssetFamilies406One>(params?: GetAssetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilies>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetFamiliesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetFamilies>>> = ({ signal }) => getAssetFamilies(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilies>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetFamiliesQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetFamilies>>>
export type GetAssetFamiliesQueryError = GetAssetFamilies401One | GetAssetFamilies406One


export function useGetAssetFamilies<TData = Awaited<ReturnType<typeof getAssetFamilies>>, TError = GetAssetFamilies401One | GetAssetFamilies406One>(
 params: undefined |  GetAssetFamiliesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilies>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamilies>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamilies<TData = Awaited<ReturnType<typeof getAssetFamilies>>, TError = GetAssetFamilies401One | GetAssetFamilies406One>(
 params?: GetAssetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilies>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamilies>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamilies<TData = Awaited<ReturnType<typeof getAssetFamilies>>, TError = GetAssetFamilies401One | GetAssetFamilies406One>(
 params?: GetAssetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilies>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of asset families
 */

export function useGetAssetFamilies<TData = Awaited<ReturnType<typeof getAssetFamilies>>, TError = GetAssetFamilies401One | GetAssetFamilies406One>(
 params?: GetAssetFamiliesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilies>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetFamiliesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given asset family.
 * @summary Get an asset family
 */
export type getAssetFamilyCodeResponse = {
  data: GetAssetFamilyCode200;
  status: number;
  headers: Headers;
}

export const getGetAssetFamilyCodeUrl = (code: string,) => {


  return `/api/rest/v1/asset-families/${code}`
}

export const getAssetFamilyCode = async (code: string, options?: RequestInit): Promise<getAssetFamilyCodeResponse> => {
  
  const res = await fetch(getGetAssetFamilyCodeUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetFamilyCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/asset-families/${code}`] as const;
    }

    
export const getGetAssetFamilyCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetFamilyCode>>, TError = GetAssetFamilyCode401One | GetAssetFamilyCode404One | GetAssetFamilyCode406One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetFamilyCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetFamilyCode>>> = ({ signal }) => getAssetFamilyCode(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetFamilyCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetFamilyCode>>>
export type GetAssetFamilyCodeQueryError = GetAssetFamilyCode401One | GetAssetFamilyCode404One | GetAssetFamilyCode406One


export function useGetAssetFamilyCode<TData = Awaited<ReturnType<typeof getAssetFamilyCode>>, TError = GetAssetFamilyCode401One | GetAssetFamilyCode404One | GetAssetFamilyCode406One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamilyCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamilyCode<TData = Awaited<ReturnType<typeof getAssetFamilyCode>>, TError = GetAssetFamilyCode401One | GetAssetFamilyCode404One | GetAssetFamilyCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetFamilyCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetFamilyCode<TData = Awaited<ReturnType<typeof getAssetFamilyCode>>, TError = GetAssetFamilyCode401One | GetAssetFamilyCode404One | GetAssetFamilyCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an asset family
 */

export function useGetAssetFamilyCode<TData = Awaited<ReturnType<typeof getAssetFamilyCode>>, TError = GetAssetFamilyCode401One | GetAssetFamilyCode404One | GetAssetFamilyCode406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetFamilyCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetFamilyCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
 * @summary Update/create an asset family
 */
export type patchAssetFamilyCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchAssetFamilyCodeUrl = (code: string,) => {


  return `/api/rest/v1/asset-families/${code}`
}

export const patchAssetFamilyCode = async (code: string,
    patchAssetFamilyCodeBody: PatchAssetFamilyCodeBody, options?: RequestInit): Promise<patchAssetFamilyCodeResponse> => {
  
  const res = await fetch(getPatchAssetFamilyCodeUrl(code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchAssetFamilyCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchAssetFamilyCodeMutationOptions = <TError = PatchAssetFamilyCode401One | PatchAssetFamilyCode415One | PatchAssetFamilyCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetFamilyCode>>, TError,{code: string;data: PatchAssetFamilyCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetFamilyCode>>, TError,{code: string;data: PatchAssetFamilyCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetFamilyCode>>, {code: string;data: PatchAssetFamilyCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchAssetFamilyCode(code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetFamilyCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetFamilyCode>>>
    export type PatchAssetFamilyCodeMutationBody = PatchAssetFamilyCodeBody
    export type PatchAssetFamilyCodeMutationError = PatchAssetFamilyCode401One | PatchAssetFamilyCode415One | PatchAssetFamilyCode422One

    /**
 * @summary Update/create an asset family
 */
export const usePatchAssetFamilyCode = <TError = PatchAssetFamilyCode401One | PatchAssetFamilyCode415One | PatchAssetFamilyCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetFamilyCode>>, TError,{code: string;data: PatchAssetFamilyCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetFamilyCode>>,
        TError,
        {code: string;data: PatchAssetFamilyCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetFamilyCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    