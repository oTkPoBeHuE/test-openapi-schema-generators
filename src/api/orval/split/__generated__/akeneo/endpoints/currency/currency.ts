/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CurrenciesGet200
} from '../../model/currenciesGet200'
import type {
  CurrenciesGet401One
} from '../../model/currenciesGet401One'
import type {
  CurrenciesGet403One
} from '../../model/currenciesGet403One'
import type {
  CurrenciesGet404One
} from '../../model/currenciesGet404One'
import type {
  CurrenciesGet406One
} from '../../model/currenciesGet406One'
import type {
  CurrenciesGetList200One
} from '../../model/currenciesGetList200One'
import type {
  CurrenciesGetList401One
} from '../../model/currenciesGetList401One'
import type {
  CurrenciesGetList403One
} from '../../model/currenciesGetList403One'
import type {
  CurrenciesGetList406One
} from '../../model/currenciesGetList406One'
import type {
  CurrenciesGetListParams
} from '../../model/currenciesGetListParams'



/**
 * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
 * @summary Get a list of currencies
 */
export const currenciesGetList = (
    params?: CurrenciesGetListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CurrenciesGetList200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/currencies`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getCurrenciesGetListQueryKey = (params?: CurrenciesGetListParams,) => {
    return [`/api/rest/v1/currencies`, ...(params ? [params]: [])] as const;
    }

    
export const getCurrenciesGetListQueryOptions = <TData = Awaited<ReturnType<typeof currenciesGetList>>, TError = AxiosError<CurrenciesGetList401One | CurrenciesGetList403One | CurrenciesGetList406One>>(params?: CurrenciesGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGetList>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCurrenciesGetListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof currenciesGetList>>> = ({ signal }) => currenciesGetList(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof currenciesGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type CurrenciesGetListQueryResult = NonNullable<Awaited<ReturnType<typeof currenciesGetList>>>
export type CurrenciesGetListQueryError = AxiosError<CurrenciesGetList401One | CurrenciesGetList403One | CurrenciesGetList406One>


export function useCurrenciesGetList<TData = Awaited<ReturnType<typeof currenciesGetList>>, TError = AxiosError<CurrenciesGetList401One | CurrenciesGetList403One | CurrenciesGetList406One>>(
 params: undefined |  CurrenciesGetListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof currenciesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCurrenciesGetList<TData = Awaited<ReturnType<typeof currenciesGetList>>, TError = AxiosError<CurrenciesGetList401One | CurrenciesGetList403One | CurrenciesGetList406One>>(
 params?: CurrenciesGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof currenciesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCurrenciesGetList<TData = Awaited<ReturnType<typeof currenciesGetList>>, TError = AxiosError<CurrenciesGetList401One | CurrenciesGetList403One | CurrenciesGetList406One>>(
 params?: CurrenciesGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGetList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a list of currencies
 */

export function useCurrenciesGetList<TData = Awaited<ReturnType<typeof currenciesGetList>>, TError = AxiosError<CurrenciesGetList401One | CurrenciesGetList403One | CurrenciesGetList406One>>(
 params?: CurrenciesGetListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGetList>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getCurrenciesGetListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given currency.
 * @summary Get a currency
 */
export const currenciesGet = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CurrenciesGet200>> => {
    
    return axios.default.get(
      `/api/rest/v1/currencies/${code}`,options
    );
  }


export const getCurrenciesGetQueryKey = (code: string,) => {
    return [`/api/rest/v1/currencies/${code}`] as const;
    }

    
export const getCurrenciesGetQueryOptions = <TData = Awaited<ReturnType<typeof currenciesGet>>, TError = AxiosError<CurrenciesGet401One | CurrenciesGet403One | CurrenciesGet404One | CurrenciesGet406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCurrenciesGetQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof currenciesGet>>> = ({ signal }) => currenciesGet(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof currenciesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type CurrenciesGetQueryResult = NonNullable<Awaited<ReturnType<typeof currenciesGet>>>
export type CurrenciesGetQueryError = AxiosError<CurrenciesGet401One | CurrenciesGet403One | CurrenciesGet404One | CurrenciesGet406One>


export function useCurrenciesGet<TData = Awaited<ReturnType<typeof currenciesGet>>, TError = AxiosError<CurrenciesGet401One | CurrenciesGet403One | CurrenciesGet404One | CurrenciesGet406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof currenciesGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCurrenciesGet<TData = Awaited<ReturnType<typeof currenciesGet>>, TError = AxiosError<CurrenciesGet401One | CurrenciesGet403One | CurrenciesGet404One | CurrenciesGet406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof currenciesGet>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCurrenciesGet<TData = Awaited<ReturnType<typeof currenciesGet>>, TError = AxiosError<CurrenciesGet401One | CurrenciesGet403One | CurrenciesGet404One | CurrenciesGet406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a currency
 */

export function useCurrenciesGet<TData = Awaited<ReturnType<typeof currenciesGet>>, TError = AxiosError<CurrenciesGet401One | CurrenciesGet403One | CurrenciesGet404One | CurrenciesGet406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof currenciesGet>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getCurrenciesGetQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



