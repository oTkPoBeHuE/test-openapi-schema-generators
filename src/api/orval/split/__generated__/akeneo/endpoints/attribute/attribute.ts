/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetAttributes200One
} from '../../model/getAttributes200One'
import type {
  GetAttributes401One
} from '../../model/getAttributes401One'
import type {
  GetAttributes403One
} from '../../model/getAttributes403One'
import type {
  GetAttributes406One
} from '../../model/getAttributes406One'
import type {
  GetAttributesCode200
} from '../../model/getAttributesCode200'
import type {
  GetAttributesCode401One
} from '../../model/getAttributesCode401One'
import type {
  GetAttributesCode403One
} from '../../model/getAttributesCode403One'
import type {
  GetAttributesCode404One
} from '../../model/getAttributesCode404One'
import type {
  GetAttributesCode406One
} from '../../model/getAttributesCode406One'
import type {
  GetAttributesCodeParams
} from '../../model/getAttributesCodeParams'
import type {
  GetAttributesParams
} from '../../model/getAttributesParams'
import type {
  PatchAttributes200One
} from '../../model/patchAttributes200One'
import type {
  PatchAttributes401One
} from '../../model/patchAttributes401One'
import type {
  PatchAttributes403One
} from '../../model/patchAttributes403One'
import type {
  PatchAttributes413One
} from '../../model/patchAttributes413One'
import type {
  PatchAttributes415One
} from '../../model/patchAttributes415One'
import type {
  PatchAttributesBody
} from '../../model/patchAttributesBody'
import type {
  PatchAttributesCode400One
} from '../../model/patchAttributesCode400One'
import type {
  PatchAttributesCode401One
} from '../../model/patchAttributesCode401One'
import type {
  PatchAttributesCode403One
} from '../../model/patchAttributesCode403One'
import type {
  PatchAttributesCode415One
} from '../../model/patchAttributesCode415One'
import type {
  PatchAttributesCode422One
} from '../../model/patchAttributesCode422One'
import type {
  PatchAttributesCodeBody
} from '../../model/patchAttributesCodeBody'
import type {
  PostAttributes400One
} from '../../model/postAttributes400One'
import type {
  PostAttributes401One
} from '../../model/postAttributes401One'
import type {
  PostAttributes403One
} from '../../model/postAttributes403One'
import type {
  PostAttributes415One
} from '../../model/postAttributes415One'
import type {
  PostAttributes422One
} from '../../model/postAttributes422One'
import type {
  PostAttributesBody
} from '../../model/postAttributesBody'



/**
 * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
 * @summary Get list of attributes
 */
export const getAttributes = (
    params?: GetAttributesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAttributes200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/attributes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAttributesQueryKey = (params?: GetAttributesParams,) => {
    return [`/api/rest/v1/attributes`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAttributesQueryOptions = <TData = Awaited<ReturnType<typeof getAttributes>>, TError = AxiosError<GetAttributes401One | GetAttributes403One | GetAttributes406One>>(params?: GetAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributes>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAttributesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttributes>>> = ({ signal }) => getAttributes(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAttributes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAttributesQueryResult = NonNullable<Awaited<ReturnType<typeof getAttributes>>>
export type GetAttributesQueryError = AxiosError<GetAttributes401One | GetAttributes403One | GetAttributes406One>


export function useGetAttributes<TData = Awaited<ReturnType<typeof getAttributes>>, TError = AxiosError<GetAttributes401One | GetAttributes403One | GetAttributes406One>>(
 params: undefined |  GetAttributesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributes>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributes<TData = Awaited<ReturnType<typeof getAttributes>>, TError = AxiosError<GetAttributes401One | GetAttributes403One | GetAttributes406One>>(
 params?: GetAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributes>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributes<TData = Awaited<ReturnType<typeof getAttributes>>, TError = AxiosError<GetAttributes401One | GetAttributes403One | GetAttributes406One>>(
 params?: GetAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributes>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of attributes
 */

export function useGetAttributes<TData = Awaited<ReturnType<typeof getAttributes>>, TError = AxiosError<GetAttributes401One | GetAttributes403One | GetAttributes406One>>(
 params?: GetAttributesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributes>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAttributesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several attributes at once.
 * @summary Update/create several attributes
 */
export const patchAttributes = (
    patchAttributesBody: PatchAttributesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchAttributes200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/attributes`,
      patchAttributesBody,options
    );
  }



export const getPatchAttributesMutationOptions = <TError = AxiosError<PatchAttributes401One | PatchAttributes403One | PatchAttributes413One | PatchAttributes415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributes>>, TError,{data: PatchAttributesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchAttributes>>, TError,{data: PatchAttributesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAttributes>>, {data: PatchAttributesBody}> = (props) => {
          const {data} = props ?? {};

          return  patchAttributes(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAttributesMutationResult = NonNullable<Awaited<ReturnType<typeof patchAttributes>>>
    export type PatchAttributesMutationBody = PatchAttributesBody
    export type PatchAttributesMutationError = AxiosError<PatchAttributes401One | PatchAttributes403One | PatchAttributes413One | PatchAttributes415One>

    /**
 * @summary Update/create several attributes
 */
export const usePatchAttributes = <TError = AxiosError<PatchAttributes401One | PatchAttributes403One | PatchAttributes413One | PatchAttributes415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributes>>, TError,{data: PatchAttributesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAttributes>>,
        TError,
        {data: PatchAttributesBody},
        TContext
      > => {

      const mutationOptions = getPatchAttributesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new attribute.
 * @summary Create a new attribute
 */
export const postAttributes = (
    postAttributesBody: PostAttributesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/attributes`,
      postAttributesBody,options
    );
  }



export const getPostAttributesMutationOptions = <TError = AxiosError<PostAttributes400One | PostAttributes401One | PostAttributes403One | PostAttributes415One | PostAttributes422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAttributes>>, TError,{data: PostAttributesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAttributes>>, TError,{data: PostAttributesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAttributes>>, {data: PostAttributesBody}> = (props) => {
          const {data} = props ?? {};

          return  postAttributes(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAttributesMutationResult = NonNullable<Awaited<ReturnType<typeof postAttributes>>>
    export type PostAttributesMutationBody = PostAttributesBody
    export type PostAttributesMutationError = AxiosError<PostAttributes400One | PostAttributes401One | PostAttributes403One | PostAttributes415One | PostAttributes422One>

    /**
 * @summary Create a new attribute
 */
export const usePostAttributes = <TError = AxiosError<PostAttributes400One | PostAttributes401One | PostAttributes403One | PostAttributes415One | PostAttributes422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAttributes>>, TError,{data: PostAttributesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAttributes>>,
        TError,
        {data: PostAttributesBody},
        TContext
      > => {

      const mutationOptions = getPostAttributesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given attribute.
 * @summary Get an attribute
 */
export const getAttributesCode = (
    code: string,
    params?: GetAttributesCodeParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAttributesCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/attributes/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAttributesCodeQueryKey = (code: string,
    params?: GetAttributesCodeParams,) => {
    return [`/api/rest/v1/attributes/${code}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAttributesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAttributesCode>>, TError = AxiosError<GetAttributesCode401One | GetAttributesCode403One | GetAttributesCode404One | GetAttributesCode406One>>(code: string,
    params?: GetAttributesCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAttributesCodeQueryKey(code,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAttributesCode>>> = ({ signal }) => getAttributesCode(code,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAttributesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAttributesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAttributesCode>>>
export type GetAttributesCodeQueryError = AxiosError<GetAttributesCode401One | GetAttributesCode403One | GetAttributesCode404One | GetAttributesCode406One>


export function useGetAttributesCode<TData = Awaited<ReturnType<typeof getAttributesCode>>, TError = AxiosError<GetAttributesCode401One | GetAttributesCode403One | GetAttributesCode404One | GetAttributesCode406One>>(
 code: string,
    params: undefined |  GetAttributesCodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributesCode<TData = Awaited<ReturnType<typeof getAttributesCode>>, TError = AxiosError<GetAttributesCode401One | GetAttributesCode403One | GetAttributesCode404One | GetAttributesCode406One>>(
 code: string,
    params?: GetAttributesCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAttributesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAttributesCode<TData = Awaited<ReturnType<typeof getAttributesCode>>, TError = AxiosError<GetAttributesCode401One | GetAttributesCode403One | GetAttributesCode404One | GetAttributesCode406One>>(
 code: string,
    params?: GetAttributesCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get an attribute
 */

export function useGetAttributesCode<TData = Awaited<ReturnType<typeof getAttributesCode>>, TError = AxiosError<GetAttributesCode401One | GetAttributesCode403One | GetAttributesCode404One | GetAttributesCode406One>>(
 code: string,
    params?: GetAttributesCodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAttributesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAttributesCodeQueryOptions(code,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given attribute. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
 * @summary Update/create an attribute
 */
export const patchAttributesCode = (
    code: string,
    patchAttributesCodeBody: PatchAttributesCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/attributes/${code}`,
      patchAttributesCodeBody,options
    );
  }



export const getPatchAttributesCodeMutationOptions = <TError = AxiosError<PatchAttributesCode400One | PatchAttributesCode401One | PatchAttributesCode403One | PatchAttributesCode415One | PatchAttributesCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributesCode>>, TError,{code: string;data: PatchAttributesCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchAttributesCode>>, TError,{code: string;data: PatchAttributesCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAttributesCode>>, {code: string;data: PatchAttributesCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchAttributesCode(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAttributesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAttributesCode>>>
    export type PatchAttributesCodeMutationBody = PatchAttributesCodeBody
    export type PatchAttributesCodeMutationError = AxiosError<PatchAttributesCode400One | PatchAttributesCode401One | PatchAttributesCode403One | PatchAttributesCode415One | PatchAttributesCode422One>

    /**
 * @summary Update/create an attribute
 */
export const usePatchAttributesCode = <TError = AxiosError<PatchAttributesCode400One | PatchAttributesCode401One | PatchAttributesCode403One | PatchAttributesCode415One | PatchAttributesCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAttributesCode>>, TError,{code: string;data: PatchAttributesCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAttributesCode>>,
        TError,
        {code: string;data: PatchAttributesCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAttributesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    