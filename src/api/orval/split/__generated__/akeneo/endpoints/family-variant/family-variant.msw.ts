/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetFamiliesFamilyCodeVariants200One,
  GetFamiliesFamilyCodeVariantsCode200,
  PatchFamiliesFamilyCodeVariants200One
} from '../../model'

export const getGetFamiliesFamilyCodeVariantsResponseMock = (): GetFamiliesFamilyCodeVariants200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), previous: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]), current_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),code: faker.string.alpha(20), labels: faker.helpers.arrayElement([{localeCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), variant_attribute_sets: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({attributes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), undefined]), axes: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.string.alpha(20))), level: faker.number.int({min: undefined, max: undefined})}))})), undefined])}, undefined])})

export const getPatchFamiliesFamilyCodeVariantsResponseMock = (overrideResponse: Partial< PatchFamiliesFamilyCodeVariants200One > = {}): PatchFamiliesFamilyCodeVariants200One => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), identifier: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), line: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status_code: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetFamiliesFamilyCodeVariantsCodeResponseMock = (): GetFamiliesFamilyCodeVariantsCode200 => ({"code":"shoesVariant","labels":{"en_US":"Shoes variant","fr_FR":"Variante de chaussures"},"variant_attribute_sets":[{"attributes":["color","material"],"axes":["color"],"level":1},{"attributes":["sku","size"],"axes":["size"],"level":2}]})


export const getGetFamiliesFamilyCodeVariantsMockHandler = (overrideResponse?: GetFamiliesFamilyCodeVariants200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFamiliesFamilyCodeVariants200One> | GetFamiliesFamilyCodeVariants200One)) => {
  return http.get('*/api/rest/v1/families/:familyCode/variants', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFamiliesFamilyCodeVariantsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchFamiliesFamilyCodeVariantsMockHandler = (overrideResponse?: PatchFamiliesFamilyCodeVariants200One | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchFamiliesFamilyCodeVariants200One> | PatchFamiliesFamilyCodeVariants200One)) => {
  return http.patch('*/api/rest/v1/families/:familyCode/variants', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchFamiliesFamilyCodeVariantsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFamiliesFamilyCodeVariantsCodeMockHandler = (overrideResponse?: GetFamiliesFamilyCodeVariantsCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetFamiliesFamilyCodeVariantsCode200> | GetFamiliesFamilyCodeVariantsCode200)) => {
  return http.get('*/api/rest/v1/families/:familyCode/variants/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFamiliesFamilyCodeVariantsCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchFamiliesFamilyCodeVariantsCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/families/:familyCode/variants/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getFamilyVariantMock = () => [
  getGetFamiliesFamilyCodeVariantsMockHandler(),
  getPatchFamiliesFamilyCodeVariantsMockHandler(),
  getGetFamiliesFamilyCodeVariantsCodeMockHandler(),
  getPatchFamiliesFamilyCodeVariantsCodeMockHandler()
]
