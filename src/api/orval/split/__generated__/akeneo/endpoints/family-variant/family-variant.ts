/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetFamiliesFamilyCodeVariants200One
} from '../../model/getFamiliesFamilyCodeVariants200One'
import type {
  GetFamiliesFamilyCodeVariants401One
} from '../../model/getFamiliesFamilyCodeVariants401One'
import type {
  GetFamiliesFamilyCodeVariants403One
} from '../../model/getFamiliesFamilyCodeVariants403One'
import type {
  GetFamiliesFamilyCodeVariants406One
} from '../../model/getFamiliesFamilyCodeVariants406One'
import type {
  GetFamiliesFamilyCodeVariantsCode200
} from '../../model/getFamiliesFamilyCodeVariantsCode200'
import type {
  GetFamiliesFamilyCodeVariantsCode401One
} from '../../model/getFamiliesFamilyCodeVariantsCode401One'
import type {
  GetFamiliesFamilyCodeVariantsCode403One
} from '../../model/getFamiliesFamilyCodeVariantsCode403One'
import type {
  GetFamiliesFamilyCodeVariantsCode404One
} from '../../model/getFamiliesFamilyCodeVariantsCode404One'
import type {
  GetFamiliesFamilyCodeVariantsCode406One
} from '../../model/getFamiliesFamilyCodeVariantsCode406One'
import type {
  GetFamiliesFamilyCodeVariantsParams
} from '../../model/getFamiliesFamilyCodeVariantsParams'
import type {
  PatchFamiliesFamilyCodeVariants200One
} from '../../model/patchFamiliesFamilyCodeVariants200One'
import type {
  PatchFamiliesFamilyCodeVariants401One
} from '../../model/patchFamiliesFamilyCodeVariants401One'
import type {
  PatchFamiliesFamilyCodeVariants403One
} from '../../model/patchFamiliesFamilyCodeVariants403One'
import type {
  PatchFamiliesFamilyCodeVariants413One
} from '../../model/patchFamiliesFamilyCodeVariants413One'
import type {
  PatchFamiliesFamilyCodeVariants415One
} from '../../model/patchFamiliesFamilyCodeVariants415One'
import type {
  PatchFamiliesFamilyCodeVariantsBody
} from '../../model/patchFamiliesFamilyCodeVariantsBody'
import type {
  PatchFamiliesFamilyCodeVariantsCode400One
} from '../../model/patchFamiliesFamilyCodeVariantsCode400One'
import type {
  PatchFamiliesFamilyCodeVariantsCode401One
} from '../../model/patchFamiliesFamilyCodeVariantsCode401One'
import type {
  PatchFamiliesFamilyCodeVariantsCode403One
} from '../../model/patchFamiliesFamilyCodeVariantsCode403One'
import type {
  PatchFamiliesFamilyCodeVariantsCode415One
} from '../../model/patchFamiliesFamilyCodeVariantsCode415One'
import type {
  PatchFamiliesFamilyCodeVariantsCode422One
} from '../../model/patchFamiliesFamilyCodeVariantsCode422One'
import type {
  PatchFamiliesFamilyCodeVariantsCodeBody
} from '../../model/patchFamiliesFamilyCodeVariantsCodeBody'



/**
 * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
 * @summary Get list of family variants
 */
export const getFamiliesFamilyCodeVariants = (
    familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFamiliesFamilyCodeVariants200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/families/${familyCode}/variants`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFamiliesFamilyCodeVariantsQueryKey = (familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams,) => {
    return [`/api/rest/v1/families/${familyCode}/variants`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFamiliesFamilyCodeVariantsQueryOptions = <TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError = AxiosError<GetFamiliesFamilyCodeVariants401One | GetFamiliesFamilyCodeVariants403One | GetFamiliesFamilyCodeVariants406One>>(familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFamiliesFamilyCodeVariantsQueryKey(familyCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>> = ({ signal }) => getFamiliesFamilyCodeVariants(familyCode,params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(familyCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFamiliesFamilyCodeVariantsQueryResult = NonNullable<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>>
export type GetFamiliesFamilyCodeVariantsQueryError = AxiosError<GetFamiliesFamilyCodeVariants401One | GetFamiliesFamilyCodeVariants403One | GetFamiliesFamilyCodeVariants406One>


export function useGetFamiliesFamilyCodeVariants<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError = AxiosError<GetFamiliesFamilyCodeVariants401One | GetFamiliesFamilyCodeVariants403One | GetFamiliesFamilyCodeVariants406One>>(
 familyCode: string,
    params: undefined |  GetFamiliesFamilyCodeVariantsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamiliesFamilyCodeVariants<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError = AxiosError<GetFamiliesFamilyCodeVariants401One | GetFamiliesFamilyCodeVariants403One | GetFamiliesFamilyCodeVariants406One>>(
 familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamiliesFamilyCodeVariants<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError = AxiosError<GetFamiliesFamilyCodeVariants401One | GetFamiliesFamilyCodeVariants403One | GetFamiliesFamilyCodeVariants406One>>(
 familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of family variants
 */

export function useGetFamiliesFamilyCodeVariants<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError = AxiosError<GetFamiliesFamilyCodeVariants401One | GetFamiliesFamilyCodeVariants403One | GetFamiliesFamilyCodeVariants406One>>(
 familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariants>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFamiliesFamilyCodeVariantsQueryOptions(familyCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several family variants at once, for a given family.
 * @summary Update/create several family variants
 */
export const patchFamiliesFamilyCodeVariants = (
    familyCode: string,
    patchFamiliesFamilyCodeVariantsBody: PatchFamiliesFamilyCodeVariantsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchFamiliesFamilyCodeVariants200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/families/${familyCode}/variants`,
      patchFamiliesFamilyCodeVariantsBody,options
    );
  }



export const getPatchFamiliesFamilyCodeVariantsMutationOptions = <TError = AxiosError<PatchFamiliesFamilyCodeVariants401One | PatchFamiliesFamilyCodeVariants403One | PatchFamiliesFamilyCodeVariants413One | PatchFamiliesFamilyCodeVariants415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariants>>, TError,{familyCode: string;data: PatchFamiliesFamilyCodeVariantsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariants>>, TError,{familyCode: string;data: PatchFamiliesFamilyCodeVariantsBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariants>>, {familyCode: string;data: PatchFamiliesFamilyCodeVariantsBody}> = (props) => {
          const {familyCode,data} = props ?? {};

          return  patchFamiliesFamilyCodeVariants(familyCode,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchFamiliesFamilyCodeVariantsMutationResult = NonNullable<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariants>>>
    export type PatchFamiliesFamilyCodeVariantsMutationBody = PatchFamiliesFamilyCodeVariantsBody
    export type PatchFamiliesFamilyCodeVariantsMutationError = AxiosError<PatchFamiliesFamilyCodeVariants401One | PatchFamiliesFamilyCodeVariants403One | PatchFamiliesFamilyCodeVariants413One | PatchFamiliesFamilyCodeVariants415One>

    /**
 * @summary Update/create several family variants
 */
export const usePatchFamiliesFamilyCodeVariants = <TError = AxiosError<PatchFamiliesFamilyCodeVariants401One | PatchFamiliesFamilyCodeVariants403One | PatchFamiliesFamilyCodeVariants413One | PatchFamiliesFamilyCodeVariants415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariants>>, TError,{familyCode: string;data: PatchFamiliesFamilyCodeVariantsBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariants>>,
        TError,
        {familyCode: string;data: PatchFamiliesFamilyCodeVariantsBody},
        TContext
      > => {

      const mutationOptions = getPatchFamiliesFamilyCodeVariantsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given family variant.
 * @summary Get a family variant
 */
export const getFamiliesFamilyCodeVariantsCode = (
    familyCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetFamiliesFamilyCodeVariantsCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/families/${familyCode}/variants/${code}`,options
    );
  }


export const getGetFamiliesFamilyCodeVariantsCodeQueryKey = (familyCode: string,
    code: string,) => {
    return [`/api/rest/v1/families/${familyCode}/variants/${code}`] as const;
    }

    
export const getGetFamiliesFamilyCodeVariantsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError = AxiosError<GetFamiliesFamilyCodeVariantsCode401One | GetFamiliesFamilyCodeVariantsCode403One | GetFamiliesFamilyCodeVariantsCode404One | GetFamiliesFamilyCodeVariantsCode406One>>(familyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFamiliesFamilyCodeVariantsCodeQueryKey(familyCode,code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>> = ({ signal }) => getFamiliesFamilyCodeVariantsCode(familyCode,code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(familyCode && code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetFamiliesFamilyCodeVariantsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>>
export type GetFamiliesFamilyCodeVariantsCodeQueryError = AxiosError<GetFamiliesFamilyCodeVariantsCode401One | GetFamiliesFamilyCodeVariantsCode403One | GetFamiliesFamilyCodeVariantsCode404One | GetFamiliesFamilyCodeVariantsCode406One>


export function useGetFamiliesFamilyCodeVariantsCode<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError = AxiosError<GetFamiliesFamilyCodeVariantsCode401One | GetFamiliesFamilyCodeVariantsCode403One | GetFamiliesFamilyCodeVariantsCode404One | GetFamiliesFamilyCodeVariantsCode406One>>(
 familyCode: string,
    code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamiliesFamilyCodeVariantsCode<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError = AxiosError<GetFamiliesFamilyCodeVariantsCode401One | GetFamiliesFamilyCodeVariantsCode403One | GetFamiliesFamilyCodeVariantsCode404One | GetFamiliesFamilyCodeVariantsCode406One>>(
 familyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetFamiliesFamilyCodeVariantsCode<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError = AxiosError<GetFamiliesFamilyCodeVariantsCode401One | GetFamiliesFamilyCodeVariantsCode403One | GetFamiliesFamilyCodeVariantsCode404One | GetFamiliesFamilyCodeVariantsCode406One>>(
 familyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a family variant
 */

export function useGetFamiliesFamilyCodeVariantsCode<TData = Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError = AxiosError<GetFamiliesFamilyCodeVariantsCode401One | GetFamiliesFamilyCodeVariantsCode403One | GetFamiliesFamilyCodeVariantsCode404One | GetFamiliesFamilyCodeVariantsCode406One>>(
 familyCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFamiliesFamilyCodeVariantsCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetFamiliesFamilyCodeVariantsCodeQueryOptions(familyCode,code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given family variant. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
 * @summary Update/create a family variant
 */
export const patchFamiliesFamilyCodeVariantsCode = (
    familyCode: string,
    code: string,
    patchFamiliesFamilyCodeVariantsCodeBody: PatchFamiliesFamilyCodeVariantsCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/families/${familyCode}/variants/${code}`,
      patchFamiliesFamilyCodeVariantsCodeBody,options
    );
  }



export const getPatchFamiliesFamilyCodeVariantsCodeMutationOptions = <TError = AxiosError<PatchFamiliesFamilyCodeVariantsCode400One | PatchFamiliesFamilyCodeVariantsCode401One | PatchFamiliesFamilyCodeVariantsCode403One | PatchFamiliesFamilyCodeVariantsCode415One | PatchFamiliesFamilyCodeVariantsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariantsCode>>, TError,{familyCode: string;code: string;data: PatchFamiliesFamilyCodeVariantsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariantsCode>>, TError,{familyCode: string;code: string;data: PatchFamiliesFamilyCodeVariantsCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariantsCode>>, {familyCode: string;code: string;data: PatchFamiliesFamilyCodeVariantsCodeBody}> = (props) => {
          const {familyCode,code,data} = props ?? {};

          return  patchFamiliesFamilyCodeVariantsCode(familyCode,code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchFamiliesFamilyCodeVariantsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariantsCode>>>
    export type PatchFamiliesFamilyCodeVariantsCodeMutationBody = PatchFamiliesFamilyCodeVariantsCodeBody
    export type PatchFamiliesFamilyCodeVariantsCodeMutationError = AxiosError<PatchFamiliesFamilyCodeVariantsCode400One | PatchFamiliesFamilyCodeVariantsCode401One | PatchFamiliesFamilyCodeVariantsCode403One | PatchFamiliesFamilyCodeVariantsCode415One | PatchFamiliesFamilyCodeVariantsCode422One>

    /**
 * @summary Update/create a family variant
 */
export const usePatchFamiliesFamilyCodeVariantsCode = <TError = AxiosError<PatchFamiliesFamilyCodeVariantsCode400One | PatchFamiliesFamilyCodeVariantsCode401One | PatchFamiliesFamilyCodeVariantsCode403One | PatchFamiliesFamilyCodeVariantsCode415One | PatchFamiliesFamilyCodeVariantsCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariantsCode>>, TError,{familyCode: string;code: string;data: PatchFamiliesFamilyCodeVariantsCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchFamiliesFamilyCodeVariantsCode>>,
        TError,
        {familyCode: string;code: string;data: PatchFamiliesFamilyCodeVariantsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchFamiliesFamilyCodeVariantsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    