/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetAssetCategories200One
} from '../../model/getAssetCategories200One'
import type {
  GetAssetCategories401One
} from '../../model/getAssetCategories401One'
import type {
  GetAssetCategories403One
} from '../../model/getAssetCategories403One'
import type {
  GetAssetCategories406One
} from '../../model/getAssetCategories406One'
import type {
  GetAssetCategoriesCode200
} from '../../model/getAssetCategoriesCode200'
import type {
  GetAssetCategoriesCode401One
} from '../../model/getAssetCategoriesCode401One'
import type {
  GetAssetCategoriesCode403One
} from '../../model/getAssetCategoriesCode403One'
import type {
  GetAssetCategoriesCode404One
} from '../../model/getAssetCategoriesCode404One'
import type {
  GetAssetCategoriesCode406One
} from '../../model/getAssetCategoriesCode406One'
import type {
  GetAssetCategoriesParams
} from '../../model/getAssetCategoriesParams'
import type {
  PatchAssetCategories200One
} from '../../model/patchAssetCategories200One'
import type {
  PatchAssetCategories401One
} from '../../model/patchAssetCategories401One'
import type {
  PatchAssetCategories403One
} from '../../model/patchAssetCategories403One'
import type {
  PatchAssetCategories413One
} from '../../model/patchAssetCategories413One'
import type {
  PatchAssetCategories415One
} from '../../model/patchAssetCategories415One'
import type {
  PatchAssetCategoriesBody
} from '../../model/patchAssetCategoriesBody'
import type {
  PatchAssetCategoriesCode400One
} from '../../model/patchAssetCategoriesCode400One'
import type {
  PatchAssetCategoriesCode401One
} from '../../model/patchAssetCategoriesCode401One'
import type {
  PatchAssetCategoriesCode403One
} from '../../model/patchAssetCategoriesCode403One'
import type {
  PatchAssetCategoriesCode415One
} from '../../model/patchAssetCategoriesCode415One'
import type {
  PatchAssetCategoriesCode422One
} from '../../model/patchAssetCategoriesCode422One'
import type {
  PatchAssetCategoriesCodeBody
} from '../../model/patchAssetCategoriesCodeBody'
import type {
  PostAssetCategories400One
} from '../../model/postAssetCategories400One'
import type {
  PostAssetCategories401One
} from '../../model/postAssetCategories401One'
import type {
  PostAssetCategories403One
} from '../../model/postAssetCategories403One'
import type {
  PostAssetCategories415One
} from '../../model/postAssetCategories415One'
import type {
  PostAssetCategories422One
} from '../../model/postAssetCategories422One'
import type {
  PostAssetCategoriesBody
} from '../../model/postAssetCategoriesBody'



/**
 * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
 * @summary Get list of PAM asset categories
 */
export const getAssetCategories = (
    params?: GetAssetCategoriesParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAssetCategories200One>> => {
    
    return axios.default.get(
      `/api/rest/v1/asset-categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAssetCategoriesQueryKey = (params?: GetAssetCategoriesParams,) => {
    return [`/api/rest/v1/asset-categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAssetCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getAssetCategories>>, TError = AxiosError<GetAssetCategories401One | GetAssetCategories403One | GetAssetCategories406One>>(params?: GetAssetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategories>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetCategoriesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetCategories>>> = ({ signal }) => getAssetCategories(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetCategories>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetCategories>>>
export type GetAssetCategoriesQueryError = AxiosError<GetAssetCategories401One | GetAssetCategories403One | GetAssetCategories406One>


export function useGetAssetCategories<TData = Awaited<ReturnType<typeof getAssetCategories>>, TError = AxiosError<GetAssetCategories401One | GetAssetCategories403One | GetAssetCategories406One>>(
 params: undefined |  GetAssetCategoriesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategories>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetCategories>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetCategories<TData = Awaited<ReturnType<typeof getAssetCategories>>, TError = AxiosError<GetAssetCategories401One | GetAssetCategories403One | GetAssetCategories406One>>(
 params?: GetAssetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategories>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetCategories>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetCategories<TData = Awaited<ReturnType<typeof getAssetCategories>>, TError = AxiosError<GetAssetCategories401One | GetAssetCategories403One | GetAssetCategories406One>>(
 params?: GetAssetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategories>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of PAM asset categories
 */

export function useGetAssetCategories<TData = Awaited<ReturnType<typeof getAssetCategories>>, TError = AxiosError<GetAssetCategories401One | GetAssetCategories403One | GetAssetCategories406One>>(
 params?: GetAssetCategoriesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategories>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetCategoriesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update several PAM asset categories at once.
 * @summary Update/create several PAM asset categories
 */
export const patchAssetCategories = (
    patchAssetCategoriesBody: PatchAssetCategoriesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PatchAssetCategories200One>> => {
    
    return axios.default.patch(
      `/api/rest/v1/asset-categories`,
      patchAssetCategoriesBody,options
    );
  }



export const getPatchAssetCategoriesMutationOptions = <TError = AxiosError<PatchAssetCategories401One | PatchAssetCategories403One | PatchAssetCategories413One | PatchAssetCategories415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetCategories>>, TError,{data: PatchAssetCategoriesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetCategories>>, TError,{data: PatchAssetCategoriesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetCategories>>, {data: PatchAssetCategoriesBody}> = (props) => {
          const {data} = props ?? {};

          return  patchAssetCategories(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetCategories>>>
    export type PatchAssetCategoriesMutationBody = PatchAssetCategoriesBody
    export type PatchAssetCategoriesMutationError = AxiosError<PatchAssetCategories401One | PatchAssetCategories403One | PatchAssetCategories413One | PatchAssetCategories415One>

    /**
 * @summary Update/create several PAM asset categories
 */
export const usePatchAssetCategories = <TError = AxiosError<PatchAssetCategories401One | PatchAssetCategories403One | PatchAssetCategories413One | PatchAssetCategories415One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetCategories>>, TError,{data: PatchAssetCategoriesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetCategories>>,
        TError,
        {data: PatchAssetCategoriesBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetCategoriesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to create a new PAM asset category.
 * @summary Create a new PAM asset category
 */
export const postAssetCategories = (
    postAssetCategoriesBody: PostAssetCategoriesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/asset-categories`,
      postAssetCategoriesBody,options
    );
  }



export const getPostAssetCategoriesMutationOptions = <TError = AxiosError<PostAssetCategories400One | PostAssetCategories401One | PostAssetCategories403One | PostAssetCategories415One | PostAssetCategories422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetCategories>>, TError,{data: PostAssetCategoriesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAssetCategories>>, TError,{data: PostAssetCategoriesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAssetCategories>>, {data: PostAssetCategoriesBody}> = (props) => {
          const {data} = props ?? {};

          return  postAssetCategories(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAssetCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postAssetCategories>>>
    export type PostAssetCategoriesMutationBody = PostAssetCategoriesBody
    export type PostAssetCategoriesMutationError = AxiosError<PostAssetCategories400One | PostAssetCategories401One | PostAssetCategories403One | PostAssetCategories415One | PostAssetCategories422One>

    /**
 * @summary Create a new PAM asset category
 */
export const usePostAssetCategories = <TError = AxiosError<PostAssetCategories400One | PostAssetCategories401One | PostAssetCategories403One | PostAssetCategories415One | PostAssetCategories422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetCategories>>, TError,{data: PostAssetCategoriesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAssetCategories>>,
        TError,
        {data: PostAssetCategoriesBody},
        TContext
      > => {

      const mutationOptions = getPostAssetCategoriesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given PAM asset category.
 * @summary Get a PAM asset category
 */
export const getAssetCategoriesCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetAssetCategoriesCode200>> => {
    
    return axios.default.get(
      `/api/rest/v1/asset-categories/${code}`,options
    );
  }


export const getGetAssetCategoriesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/asset-categories/${code}`] as const;
    }

    
export const getGetAssetCategoriesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError = AxiosError<GetAssetCategoriesCode401One | GetAssetCategoriesCode403One | GetAssetCategoriesCode404One | GetAssetCategoriesCode406One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetCategoriesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetCategoriesCode>>> = ({ signal }) => getAssetCategoriesCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetCategoriesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetCategoriesCode>>>
export type GetAssetCategoriesCodeQueryError = AxiosError<GetAssetCategoriesCode401One | GetAssetCategoriesCode403One | GetAssetCategoriesCode404One | GetAssetCategoriesCode406One>


export function useGetAssetCategoriesCode<TData = Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError = AxiosError<GetAssetCategoriesCode401One | GetAssetCategoriesCode403One | GetAssetCategoriesCode404One | GetAssetCategoriesCode406One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetCategoriesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetCategoriesCode<TData = Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError = AxiosError<GetAssetCategoriesCode401One | GetAssetCategoriesCode403One | GetAssetCategoriesCode404One | GetAssetCategoriesCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetCategoriesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetCategoriesCode<TData = Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError = AxiosError<GetAssetCategoriesCode401One | GetAssetCategoriesCode403One | GetAssetCategoriesCode404One | GetAssetCategoriesCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a PAM asset category
 */

export function useGetAssetCategoriesCode<TData = Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError = AxiosError<GetAssetCategoriesCode401One | GetAssetCategoriesCode403One | GetAssetCategoriesCode404One | GetAssetCategoriesCode406One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetCategoriesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetCategoriesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given PAM asset category. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no category exists for the given code, it creates it.
 * @summary Update/create a PAM asset category
 */
export const patchAssetCategoriesCode = (
    code: string,
    patchAssetCategoriesCodeBody: PatchAssetCategoriesCodeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `/api/rest/v1/asset-categories/${code}`,
      patchAssetCategoriesCodeBody,options
    );
  }



export const getPatchAssetCategoriesCodeMutationOptions = <TError = AxiosError<PatchAssetCategoriesCode400One | PatchAssetCategoriesCode401One | PatchAssetCategoriesCode403One | PatchAssetCategoriesCode415One | PatchAssetCategoriesCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetCategoriesCode>>, TError,{code: string;data: PatchAssetCategoriesCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof patchAssetCategoriesCode>>, TError,{code: string;data: PatchAssetCategoriesCodeBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAssetCategoriesCode>>, {code: string;data: PatchAssetCategoriesCodeBody}> = (props) => {
          const {code,data} = props ?? {};

          return  patchAssetCategoriesCode(code,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchAssetCategoriesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchAssetCategoriesCode>>>
    export type PatchAssetCategoriesCodeMutationBody = PatchAssetCategoriesCodeBody
    export type PatchAssetCategoriesCodeMutationError = AxiosError<PatchAssetCategoriesCode400One | PatchAssetCategoriesCode401One | PatchAssetCategoriesCode403One | PatchAssetCategoriesCode415One | PatchAssetCategoriesCode422One>

    /**
 * @summary Update/create a PAM asset category
 */
export const usePatchAssetCategoriesCode = <TError = AxiosError<PatchAssetCategoriesCode400One | PatchAssetCategoriesCode401One | PatchAssetCategoriesCode403One | PatchAssetCategoriesCode415One | PatchAssetCategoriesCode422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchAssetCategoriesCode>>, TError,{code: string;data: PatchAssetCategoriesCodeBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof patchAssetCategoriesCode>>,
        TError,
        {code: string;data: PatchAssetCategoriesCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchAssetCategoriesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    