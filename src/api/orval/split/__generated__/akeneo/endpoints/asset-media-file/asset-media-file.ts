/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetAssetMediaFilesCode401One
} from '../../model/getAssetMediaFilesCode401One'
import type {
  GetAssetMediaFilesCode404One
} from '../../model/getAssetMediaFilesCode404One'
import type {
  PostAssetMediaFiles401One
} from '../../model/postAssetMediaFiles401One'
import type {
  PostAssetMediaFiles415One
} from '../../model/postAssetMediaFiles415One'
import type {
  PostAssetMediaFiles422One
} from '../../model/postAssetMediaFiles422One'
import type {
  PostAssetMediaFilesBodyBody
} from '../../model/postAssetMediaFilesBodyBody'
import type {
  PostAssetMediaFilesHeaders
} from '../../model/postAssetMediaFilesHeaders'



/**
 * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
 * @summary Create a new media file for an asset
 */
export type postAssetMediaFilesResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPostAssetMediaFilesUrl = () => {


  return `/api/rest/v1/asset-media-files`
}

export const postAssetMediaFiles = async (postAssetMediaFilesBodyBody: PostAssetMediaFilesBodyBody,
    headers: PostAssetMediaFilesHeaders, options?: RequestInit): Promise<postAssetMediaFilesResponse> => {
  
  const res = await fetch(getPostAssetMediaFilesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAssetMediaFilesBodyBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPostAssetMediaFilesMutationOptions = <TError = PostAssetMediaFiles401One | PostAssetMediaFiles415One | PostAssetMediaFiles422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postAssetMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAssetMediaFiles>>, {data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}> = (props) => {
          const {data,headers} = props ?? {};

          return  postAssetMediaFiles(data,headers,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAssetMediaFilesMutationResult = NonNullable<Awaited<ReturnType<typeof postAssetMediaFiles>>>
    export type PostAssetMediaFilesMutationBody = PostAssetMediaFilesBodyBody
    export type PostAssetMediaFilesMutationError = PostAssetMediaFiles401One | PostAssetMediaFiles415One | PostAssetMediaFiles422One

    /**
 * @summary Create a new media file for an asset
 */
export const usePostAssetMediaFiles = <TError = PostAssetMediaFiles401One | PostAssetMediaFiles415One | PostAssetMediaFiles422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof postAssetMediaFiles>>,
        TError,
        {data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders},
        TContext
      > => {

      const mutationOptions = getPostAssetMediaFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to download a given media file that is associated with an asset.
 * @summary Download the media file associated to an asset
 */
export type getAssetMediaFilesCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getGetAssetMediaFilesCodeUrl = (code: string,) => {


  return `/api/rest/v1/asset-media-files/${code}`
}

export const getAssetMediaFilesCode = async (code: string, options?: RequestInit): Promise<getAssetMediaFilesCodeResponse> => {
  
  const res = await fetch(getGetAssetMediaFilesCodeUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetAssetMediaFilesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/asset-media-files/${code}`] as const;
    }

    
export const getGetAssetMediaFilesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetMediaFilesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetMediaFilesCode>>> = ({ signal }) => getAssetMediaFilesCode(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetMediaFilesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetMediaFilesCode>>>
export type GetAssetMediaFilesCodeQueryError = GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One


export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download the media file associated to an asset
 */

export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetMediaFilesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



