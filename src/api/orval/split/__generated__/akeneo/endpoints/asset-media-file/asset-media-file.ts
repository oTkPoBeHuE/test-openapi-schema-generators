/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  GetAssetMediaFilesCode401One
} from '../../model/getAssetMediaFilesCode401One'
import type {
  GetAssetMediaFilesCode404One
} from '../../model/getAssetMediaFilesCode404One'
import type {
  PostAssetMediaFiles401One
} from '../../model/postAssetMediaFiles401One'
import type {
  PostAssetMediaFiles415One
} from '../../model/postAssetMediaFiles415One'
import type {
  PostAssetMediaFiles422One
} from '../../model/postAssetMediaFiles422One'
import type {
  PostAssetMediaFilesBodyBody
} from '../../model/postAssetMediaFilesBodyBody'
import type {
  PostAssetMediaFilesHeaders
} from '../../model/postAssetMediaFilesHeaders'



/**
 * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
 * @summary Create a new media file for an asset
 */
export const postAssetMediaFiles = (
    postAssetMediaFilesBodyBody: PostAssetMediaFilesBodyBody,
    headers: PostAssetMediaFilesHeaders, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `/api/rest/v1/asset-media-files`,
      postAssetMediaFilesBodyBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }



export const getPostAssetMediaFilesMutationOptions = <TError = AxiosError<PostAssetMediaFiles401One | PostAssetMediaFiles415One | PostAssetMediaFiles422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAssetMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAssetMediaFiles>>, {data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}> = (props) => {
          const {data,headers} = props ?? {};

          return  postAssetMediaFiles(data,headers,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAssetMediaFilesMutationResult = NonNullable<Awaited<ReturnType<typeof postAssetMediaFiles>>>
    export type PostAssetMediaFilesMutationBody = PostAssetMediaFilesBodyBody
    export type PostAssetMediaFilesMutationError = AxiosError<PostAssetMediaFiles401One | PostAssetMediaFiles415One | PostAssetMediaFiles422One>

    /**
 * @summary Create a new media file for an asset
 */
export const usePostAssetMediaFiles = <TError = AxiosError<PostAssetMediaFiles401One | PostAssetMediaFiles415One | PostAssetMediaFiles422One>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAssetMediaFiles>>, TError,{data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postAssetMediaFiles>>,
        TError,
        {data: PostAssetMediaFilesBodyBody;headers: PostAssetMediaFilesHeaders},
        TContext
      > => {

      const mutationOptions = getPostAssetMediaFilesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to download a given media file that is associated with an asset.
 * @summary Download the media file associated to an asset
 */
export const getAssetMediaFilesCode = (
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.get(
      `/api/rest/v1/asset-media-files/${code}`,options
    );
  }


export const getGetAssetMediaFilesCodeQueryKey = (code: string,) => {
    return [`/api/rest/v1/asset-media-files/${code}`] as const;
    }

    
export const getGetAssetMediaFilesCodeQueryOptions = <TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = AxiosError<GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAssetMediaFilesCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssetMediaFilesCode>>> = ({ signal }) => getAssetMediaFilesCode(code, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAssetMediaFilesCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getAssetMediaFilesCode>>>
export type GetAssetMediaFilesCodeQueryError = AxiosError<GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>


export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = AxiosError<GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = AxiosError<GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssetMediaFilesCode>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = AxiosError<GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Download the media file associated to an asset
 */

export function useGetAssetMediaFilesCode<TData = Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError = AxiosError<GetAssetMediaFilesCode401One | GetAssetMediaFilesCode404One>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssetMediaFilesCode>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAssetMediaFilesCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



