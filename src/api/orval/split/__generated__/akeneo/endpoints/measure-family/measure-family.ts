/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  MeasureFamiliesGet200
} from '../../model/measureFamiliesGet200'
import type {
  MeasureFamiliesGet401One
} from '../../model/measureFamiliesGet401One'
import type {
  MeasureFamiliesGet403One
} from '../../model/measureFamiliesGet403One'
import type {
  MeasureFamiliesGet404One
} from '../../model/measureFamiliesGet404One'
import type {
  MeasureFamiliesGet406One
} from '../../model/measureFamiliesGet406One'
import type {
  MeasureFamiliesGetList200One
} from '../../model/measureFamiliesGetList200One'
import type {
  MeasureFamiliesGetList401One
} from '../../model/measureFamiliesGetList401One'
import type {
  MeasureFamiliesGetList403One
} from '../../model/measureFamiliesGetList403One'
import type {
  MeasureFamiliesGetList406One
} from '../../model/measureFamiliesGetList406One'



/**
 * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
 * @summary Get list of measure familiy
 */
export type measureFamiliesGetListResponse = {
  data: MeasureFamiliesGetList200One;
  status: number;
  headers: Headers;
}

export const getMeasureFamiliesGetListUrl = () => {


  return `/api/rest/v1/measure-families`
}

export const measureFamiliesGetList = async ( options?: RequestInit): Promise<measureFamiliesGetListResponse> => {
  
  const res = await fetch(getMeasureFamiliesGetListUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getMeasureFamiliesGetListQueryKey = () => {
    return [`/api/rest/v1/measure-families`] as const;
    }

    
export const getMeasureFamiliesGetListQueryOptions = <TData = Awaited<ReturnType<typeof measureFamiliesGetList>>, TError = MeasureFamiliesGetList401One | MeasureFamiliesGetList403One | MeasureFamiliesGetList406One>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGetList>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeasureFamiliesGetListQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof measureFamiliesGetList>>> = ({ signal }) => measureFamiliesGetList({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGetList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MeasureFamiliesGetListQueryResult = NonNullable<Awaited<ReturnType<typeof measureFamiliesGetList>>>
export type MeasureFamiliesGetListQueryError = MeasureFamiliesGetList401One | MeasureFamiliesGetList403One | MeasureFamiliesGetList406One


export function useMeasureFamiliesGetList<TData = Awaited<ReturnType<typeof measureFamiliesGetList>>, TError = MeasureFamiliesGetList401One | MeasureFamiliesGetList403One | MeasureFamiliesGetList406One>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGetList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof measureFamiliesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasureFamiliesGetList<TData = Awaited<ReturnType<typeof measureFamiliesGetList>>, TError = MeasureFamiliesGetList401One | MeasureFamiliesGetList403One | MeasureFamiliesGetList406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGetList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof measureFamiliesGetList>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasureFamiliesGetList<TData = Awaited<ReturnType<typeof measureFamiliesGetList>>, TError = MeasureFamiliesGetList401One | MeasureFamiliesGetList403One | MeasureFamiliesGetList406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGetList>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of measure familiy
 */

export function useMeasureFamiliesGetList<TData = Awaited<ReturnType<typeof measureFamiliesGetList>>, TError = MeasureFamiliesGetList401One | MeasureFamiliesGetList403One | MeasureFamiliesGetList406One>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGetList>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMeasureFamiliesGetListQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to get the information about a given measure family.
 * @summary Get a measure family
 */
export type measureFamiliesGetResponse = {
  data: MeasureFamiliesGet200;
  status: number;
  headers: Headers;
}

export const getMeasureFamiliesGetUrl = (code: string,) => {


  return `/api/rest/v1/measure-families/${code}`
}

export const measureFamiliesGet = async (code: string, options?: RequestInit): Promise<measureFamiliesGetResponse> => {
  
  const res = await fetch(getMeasureFamiliesGetUrl(code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getMeasureFamiliesGetQueryKey = (code: string,) => {
    return [`/api/rest/v1/measure-families/${code}`] as const;
    }

    
export const getMeasureFamiliesGetQueryOptions = <TData = Awaited<ReturnType<typeof measureFamiliesGet>>, TError = MeasureFamiliesGet401One | MeasureFamiliesGet403One | MeasureFamiliesGet404One | MeasureFamiliesGet406One>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGet>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMeasureFamiliesGetQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof measureFamiliesGet>>> = ({ signal }) => measureFamiliesGet(code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MeasureFamiliesGetQueryResult = NonNullable<Awaited<ReturnType<typeof measureFamiliesGet>>>
export type MeasureFamiliesGetQueryError = MeasureFamiliesGet401One | MeasureFamiliesGet403One | MeasureFamiliesGet404One | MeasureFamiliesGet406One


export function useMeasureFamiliesGet<TData = Awaited<ReturnType<typeof measureFamiliesGet>>, TError = MeasureFamiliesGet401One | MeasureFamiliesGet403One | MeasureFamiliesGet404One | MeasureFamiliesGet406One>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof measureFamiliesGet>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasureFamiliesGet<TData = Awaited<ReturnType<typeof measureFamiliesGet>>, TError = MeasureFamiliesGet401One | MeasureFamiliesGet403One | MeasureFamiliesGet404One | MeasureFamiliesGet406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof measureFamiliesGet>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMeasureFamiliesGet<TData = Awaited<ReturnType<typeof measureFamiliesGet>>, TError = MeasureFamiliesGet401One | MeasureFamiliesGet403One | MeasureFamiliesGet404One | MeasureFamiliesGet406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGet>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a measure family
 */

export function useMeasureFamiliesGet<TData = Awaited<ReturnType<typeof measureFamiliesGet>>, TError = MeasureFamiliesGet401One | MeasureFamiliesGet403One | MeasureFamiliesGet404One | MeasureFamiliesGet406One>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof measureFamiliesGet>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMeasureFamiliesGetQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



