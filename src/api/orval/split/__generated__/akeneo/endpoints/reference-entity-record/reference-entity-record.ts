/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetReferenceEntityRecords200One
} from '../../model/getReferenceEntityRecords200One'
import type {
  GetReferenceEntityRecords401One
} from '../../model/getReferenceEntityRecords401One'
import type {
  GetReferenceEntityRecords406One
} from '../../model/getReferenceEntityRecords406One'
import type {
  GetReferenceEntityRecordsCode200
} from '../../model/getReferenceEntityRecordsCode200'
import type {
  GetReferenceEntityRecordsCode401One
} from '../../model/getReferenceEntityRecordsCode401One'
import type {
  GetReferenceEntityRecordsCode404One
} from '../../model/getReferenceEntityRecordsCode404One'
import type {
  GetReferenceEntityRecordsCode406One
} from '../../model/getReferenceEntityRecordsCode406One'
import type {
  GetReferenceEntityRecordsParams
} from '../../model/getReferenceEntityRecordsParams'
import type {
  PatchReferenceEntityRecords200Item
} from '../../model/patchReferenceEntityRecords200Item'
import type {
  PatchReferenceEntityRecords401One
} from '../../model/patchReferenceEntityRecords401One'
import type {
  PatchReferenceEntityRecords413One
} from '../../model/patchReferenceEntityRecords413One'
import type {
  PatchReferenceEntityRecords415One
} from '../../model/patchReferenceEntityRecords415One'
import type {
  PatchReferenceEntityRecordsBodyItem
} from '../../model/patchReferenceEntityRecordsBodyItem'
import type {
  PatchReferenceEntityRecordsCode401One
} from '../../model/patchReferenceEntityRecordsCode401One'
import type {
  PatchReferenceEntityRecordsCode415One
} from '../../model/patchReferenceEntityRecordsCode415One'
import type {
  PatchReferenceEntityRecordsCode422One
} from '../../model/patchReferenceEntityRecordsCode422One'
import type {
  PatchReferenceEntityRecordsCodeBody
} from '../../model/patchReferenceEntityRecordsCodeBody'



/**
 * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
 * @summary Get the list of the records of a reference entity
 */
export type getReferenceEntityRecordsResponse = {
  data: GetReferenceEntityRecords200One;
  status: number;
  headers: Headers;
}

export const getGetReferenceEntityRecordsUrl = (referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `/api/rest/v1/reference-entities/${referenceEntityCode}/records?${normalizedParams.toString()}` : `/api/rest/v1/reference-entities/${referenceEntityCode}/records`
}

export const getReferenceEntityRecords = async (referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams, options?: RequestInit): Promise<getReferenceEntityRecordsResponse> => {
  
  const res = await fetch(getGetReferenceEntityRecordsUrl(referenceEntityCode,params),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetReferenceEntityRecordsQueryKey = (referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams,) => {
    return [`/api/rest/v1/reference-entities/${referenceEntityCode}/records`, ...(params ? [params]: [])] as const;
    }

    
export const getGetReferenceEntityRecordsQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError = GetReferenceEntityRecords401One | GetReferenceEntityRecords406One>(referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceEntityRecordsQueryKey(referenceEntityCode,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceEntityRecords>>> = ({ signal }) => getReferenceEntityRecords(referenceEntityCode,params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(referenceEntityCode), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceEntityRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceEntityRecords>>>
export type GetReferenceEntityRecordsQueryError = GetReferenceEntityRecords401One | GetReferenceEntityRecords406One


export function useGetReferenceEntityRecords<TData = Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError = GetReferenceEntityRecords401One | GetReferenceEntityRecords406One>(
 referenceEntityCode: string,
    params: undefined |  GetReferenceEntityRecordsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityRecords>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityRecords<TData = Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError = GetReferenceEntityRecords401One | GetReferenceEntityRecords406One>(
 referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityRecords>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityRecords<TData = Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError = GetReferenceEntityRecords401One | GetReferenceEntityRecords406One>(
 referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get the list of the records of a reference entity
 */

export function useGetReferenceEntityRecords<TData = Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError = GetReferenceEntityRecords401One | GetReferenceEntityRecords406One>(
 referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecords>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceEntityRecordsQueryOptions(referenceEntityCode,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
 * @summary Update/create several reference entity records
 */
export type patchReferenceEntityRecordsResponse = {
  data: PatchReferenceEntityRecords200Item[];
  status: number;
  headers: Headers;
}

export const getPatchReferenceEntityRecordsUrl = (referenceEntityCode: string,) => {


  return `/api/rest/v1/reference-entities/${referenceEntityCode}/records`
}

export const patchReferenceEntityRecords = async (referenceEntityCode: string,
    patchReferenceEntityRecordsBodyItem: PatchReferenceEntityRecordsBodyItem[], options?: RequestInit): Promise<patchReferenceEntityRecordsResponse> => {
  
  const res = await fetch(getPatchReferenceEntityRecordsUrl(referenceEntityCode),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchReferenceEntityRecordsBodyItem,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchReferenceEntityRecordsMutationOptions = <TError = PatchReferenceEntityRecords401One | PatchReferenceEntityRecords413One | PatchReferenceEntityRecords415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityRecords>>, TError,{referenceEntityCode: string;data: PatchReferenceEntityRecordsBodyItem[]}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityRecords>>, TError,{referenceEntityCode: string;data: PatchReferenceEntityRecordsBodyItem[]}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchReferenceEntityRecords>>, {referenceEntityCode: string;data: PatchReferenceEntityRecordsBodyItem[]}> = (props) => {
          const {referenceEntityCode,data} = props ?? {};

          return  patchReferenceEntityRecords(referenceEntityCode,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchReferenceEntityRecordsMutationResult = NonNullable<Awaited<ReturnType<typeof patchReferenceEntityRecords>>>
    export type PatchReferenceEntityRecordsMutationBody = PatchReferenceEntityRecordsBodyItem[]
    export type PatchReferenceEntityRecordsMutationError = PatchReferenceEntityRecords401One | PatchReferenceEntityRecords413One | PatchReferenceEntityRecords415One

    /**
 * @summary Update/create several reference entity records
 */
export const usePatchReferenceEntityRecords = <TError = PatchReferenceEntityRecords401One | PatchReferenceEntityRecords413One | PatchReferenceEntityRecords415One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityRecords>>, TError,{referenceEntityCode: string;data: PatchReferenceEntityRecordsBodyItem[]}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchReferenceEntityRecords>>,
        TError,
        {referenceEntityCode: string;data: PatchReferenceEntityRecordsBodyItem[]},
        TContext
      > => {

      const mutationOptions = getPatchReferenceEntityRecordsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * This endpoint allows you to get the information about a given record for a given reference entity.
 * @summary Get a record of a given reference entity
 */
export type getReferenceEntityRecordsCodeResponse = {
  data: GetReferenceEntityRecordsCode200;
  status: number;
  headers: Headers;
}

export const getGetReferenceEntityRecordsCodeUrl = (referenceEntityCode: string,
    code: string,) => {


  return `/api/rest/v1/reference-entities/${referenceEntityCode}/records/${code}`
}

export const getReferenceEntityRecordsCode = async (referenceEntityCode: string,
    code: string, options?: RequestInit): Promise<getReferenceEntityRecordsCodeResponse> => {
  
  const res = await fetch(getGetReferenceEntityRecordsCodeUrl(referenceEntityCode,code),
  {      
    ...options,
    method: 'GET'
    
    
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}



export const getGetReferenceEntityRecordsCodeQueryKey = (referenceEntityCode: string,
    code: string,) => {
    return [`/api/rest/v1/reference-entities/${referenceEntityCode}/records/${code}`] as const;
    }

    
export const getGetReferenceEntityRecordsCodeQueryOptions = <TData = Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError = GetReferenceEntityRecordsCode401One | GetReferenceEntityRecordsCode404One | GetReferenceEntityRecordsCode406One>(referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError, TData>>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetReferenceEntityRecordsCodeQueryKey(referenceEntityCode,code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>> = ({ signal }) => getReferenceEntityRecordsCode(referenceEntityCode,code, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(referenceEntityCode && code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetReferenceEntityRecordsCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>>
export type GetReferenceEntityRecordsCodeQueryError = GetReferenceEntityRecordsCode401One | GetReferenceEntityRecordsCode404One | GetReferenceEntityRecordsCode406One


export function useGetReferenceEntityRecordsCode<TData = Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError = GetReferenceEntityRecordsCode401One | GetReferenceEntityRecordsCode404One | GetReferenceEntityRecordsCode406One>(
 referenceEntityCode: string,
    code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityRecordsCode<TData = Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError = GetReferenceEntityRecordsCode401One | GetReferenceEntityRecordsCode404One | GetReferenceEntityRecordsCode406One>(
 referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>,
          TError,
          TData
        > , 'initialData'
      >, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetReferenceEntityRecordsCode<TData = Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError = GetReferenceEntityRecordsCode401One | GetReferenceEntityRecordsCode404One | GetReferenceEntityRecordsCode406One>(
 referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get a record of a given reference entity
 */

export function useGetReferenceEntityRecordsCode<TData = Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError = GetReferenceEntityRecordsCode401One | GetReferenceEntityRecordsCode404One | GetReferenceEntityRecordsCode406One>(
 referenceEntityCode: string,
    code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getReferenceEntityRecordsCode>>, TError, TData>>, fetch?: RequestInit}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetReferenceEntityRecordsCodeQueryOptions(referenceEntityCode,code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
 * @summary Update/create a record of a given reference entity
 */
export type patchReferenceEntityRecordsCodeResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getPatchReferenceEntityRecordsCodeUrl = (referenceEntityCode: string,
    code: string,) => {


  return `/api/rest/v1/reference-entities/${referenceEntityCode}/records/${code}`
}

export const patchReferenceEntityRecordsCode = async (referenceEntityCode: string,
    code: string,
    patchReferenceEntityRecordsCodeBody: PatchReferenceEntityRecordsCodeBody, options?: RequestInit): Promise<patchReferenceEntityRecordsCodeResponse> => {
  
  const res = await fetch(getPatchReferenceEntityRecordsCodeUrl(referenceEntityCode,code),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      patchReferenceEntityRecordsCodeBody,)
  }

  )
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}




export const getPatchReferenceEntityRecordsCodeMutationOptions = <TError = PatchReferenceEntityRecordsCode401One | PatchReferenceEntityRecordsCode415One | PatchReferenceEntityRecordsCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityRecordsCode>>, TError,{referenceEntityCode: string;code: string;data: PatchReferenceEntityRecordsCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityRecordsCode>>, TError,{referenceEntityCode: string;code: string;data: PatchReferenceEntityRecordsCodeBody}, TContext> => {
const {mutation: mutationOptions, fetch: fetchOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchReferenceEntityRecordsCode>>, {referenceEntityCode: string;code: string;data: PatchReferenceEntityRecordsCodeBody}> = (props) => {
          const {referenceEntityCode,code,data} = props ?? {};

          return  patchReferenceEntityRecordsCode(referenceEntityCode,code,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchReferenceEntityRecordsCodeMutationResult = NonNullable<Awaited<ReturnType<typeof patchReferenceEntityRecordsCode>>>
    export type PatchReferenceEntityRecordsCodeMutationBody = PatchReferenceEntityRecordsCodeBody
    export type PatchReferenceEntityRecordsCodeMutationError = PatchReferenceEntityRecordsCode401One | PatchReferenceEntityRecordsCode415One | PatchReferenceEntityRecordsCode422One

    /**
 * @summary Update/create a record of a given reference entity
 */
export const usePatchReferenceEntityRecordsCode = <TError = PatchReferenceEntityRecordsCode401One | PatchReferenceEntityRecordsCode415One | PatchReferenceEntityRecordsCode422One,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchReferenceEntityRecordsCode>>, TError,{referenceEntityCode: string;code: string;data: PatchReferenceEntityRecordsCodeBody}, TContext>, fetch?: RequestInit}
): UseMutationResult<
        Awaited<ReturnType<typeof patchReferenceEntityRecordsCode>>,
        TError,
        {referenceEntityCode: string;code: string;data: PatchReferenceEntityRecordsCodeBody},
        TContext
      > => {

      const mutationOptions = getPatchReferenceEntityRecordsCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    