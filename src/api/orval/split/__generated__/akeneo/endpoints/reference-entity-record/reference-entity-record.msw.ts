/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GetReferenceEntityRecords200One,
  GetReferenceEntityRecordsCode200,
  PatchReferenceEntityRecords200Item
} from '../../model'

export const getGetReferenceEntityRecordsResponseMock = (): GetReferenceEntityRecords200One => ({_links: faker.helpers.arrayElement([{first: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), next: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),..._embedded: faker.helpers.arrayElement([{items: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({_links: faker.helpers.arrayElement([{self: faker.helpers.arrayElement([{href: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])}, undefined]),code: faker.string.alpha(20), created: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), updated: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), values: faker.helpers.arrayElement([{attributeCode: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({channel: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{}, undefined]), locale: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])}, undefined])})), undefined])}, undefined])})

export const getPatchReferenceEntityRecordsResponseMock = (): PatchReferenceEntityRecords200Item[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), status_code: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetReferenceEntityRecordsCodeResponseMock = (): GetReferenceEntityRecordsCode200 => ({"code":"kartell","created":"2024-12-14T16:37:10.514Z","updated":"2024-12-14T16:37:10.514Z","values":{"collection_overview":[{"channel":null,"data":"5/1/d/8/51d81dc778ba1501a8f998f3ab5797569f3b9e25_img.png","locale":null}],"country":[{"channel":null,"data":"italy","locale":null}],"creation_year":[{"channel":null,"data":"1949","locale":null}],"description":[{"channel":null,"data":"Kartell, the Italian furniture company that sells modern and remarkable pieces of furnitures.","locale":"en_US"},{"channel":null,"data":"Kartell, l'√©diteur de meuble italien sp√©cialis√© dans la signature de belle pi√®ces au design contemporain.","locale":"fr_FR"}],"image":[{"channel":null,"data":"0/c/b/0/0cb0c0e115dedba676f8d1ad8343ec207ab54c7b_image.jpg","locale":null}],"label":[{"channel":null,"data":"Kartell","locale":"en_US"}]}})


export const getGetReferenceEntityRecordsMockHandler = (overrideResponse?: GetReferenceEntityRecords200One | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetReferenceEntityRecords200One> | GetReferenceEntityRecords200One)) => {
  return http.get('*/api/rest/v1/reference-entities/:referenceEntityCode/records', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReferenceEntityRecordsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchReferenceEntityRecordsMockHandler = (overrideResponse?: PatchReferenceEntityRecords200Item[] | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<PatchReferenceEntityRecords200Item[]> | PatchReferenceEntityRecords200Item[])) => {
  return http.patch('*/api/rest/v1/reference-entities/:referenceEntityCode/records', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchReferenceEntityRecordsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetReferenceEntityRecordsCodeMockHandler = (overrideResponse?: GetReferenceEntityRecordsCode200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetReferenceEntityRecordsCode200> | GetReferenceEntityRecordsCode200)) => {
  return http.get('*/api/rest/v1/reference-entities/:referenceEntityCode/records/:code', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReferenceEntityRecordsCodeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchReferenceEntityRecordsCodeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<void> | void)) => {
  return http.patch('*/api/rest/v1/reference-entities/:referenceEntityCode/records/:code', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}
export const getReferenceEntityRecordMock = () => [
  getGetReferenceEntityRecordsMockHandler(),
  getPatchReferenceEntityRecordsMockHandler(),
  getGetReferenceEntityRecordsCodeMockHandler(),
  getPatchReferenceEntityRecordsCodeMockHandler()
]
