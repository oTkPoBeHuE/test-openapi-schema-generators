/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Fund API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.

The Fund API provides endpoints for managing the funds in the accounts on your platform. These management operations include, for example, the transfer of funds from one account to another, the payout of funds to an account holder, and the retrieval of balances in an account.

For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic/).
## Authentication
Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:

 ```
curl
-H "Content-Type: application/json" \
-H "X-API-Key: YOUR_API_KEY" \
...
```

Alternatively, you can use the username and password to connect to the API using basic authentication. For example:

```
curl
-U "ws@MarketPlace.YOUR_PLATFORM_ACCOUNT":"YOUR_WS_PASSWORD" \
-H "Content-Type: application/json" \
...
```
When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).

## Versioning
The Fund API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.

For example:
```
https://cal-test.adyen.com/cal/services/Fund/v6/accountHolderBalance
```
 * OpenAPI spec version: 6
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AccountHolderBalanceResponse,
  AccountHolderTransactionListResponse,
  DebitAccountHolderResponse,
  PayoutAccountHolderResponse,
  RefundFundsTransferResponse,
  RefundNotPaidOutTransfersResponse,
  SetupBeneficiaryResponse,
  TransferFundsResponse
} from '../../model'

export const getPostAccountHolderBalanceResponseMock = (overrideResponse: Partial< AccountHolderBalanceResponse > = {}): AccountHolderBalanceResponse => ({balancePerAccount: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({accountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), detailBalance: faker.helpers.arrayElement([{balance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})})), undefined]), onHoldBalance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})})), undefined]), pendingBalance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})})), undefined])}, undefined])})), undefined]), invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), totalBalance: faker.helpers.arrayElement([{balance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})})), undefined]), onHoldBalance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})})), undefined]), pendingBalance: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})})), undefined])}, undefined]), ...overrideResponse})

export const getPostAccountHolderTransactionListResponseMock = (overrideResponse: Partial< AccountHolderTransactionListResponse > = {}): AccountHolderTransactionListResponse => ({accountTransactionLists: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({accountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), hasNextPage: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), transactions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({amount: faker.helpers.arrayElement([{currency: faker.string.alpha(20), value: faker.number.int({min: undefined, max: undefined})}, undefined]), bankAccountDetail: faker.helpers.arrayElement([{accountNumber: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), accountType: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankAccountName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankAccountReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankAccountUUID: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankBicSwift: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankCity: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), bankName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), branchCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), checkCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), countryCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), currencyCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), iban: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerCity: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerCountryCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerDateOfBirth: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerHouseNumberOrName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerName: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerNationality: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerPostalCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerState: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ownerStreet: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), primaryAccount: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), taxId: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), urlForVerification: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), captureMerchantReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), capturePspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), creationDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), description: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), destinationAccountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disputePspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), disputeReasonCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), merchantReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), paymentPspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), payoutPspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), sourceAccountCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), transactionStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(['BalanceNotPaidOutTransfer','BalancePlatformSweep','BalancePlatformSweepReturned','Chargeback','ChargebackCorrection','ChargebackCorrectionReceived','ChargebackReceived','ChargebackReversed','ChargebackReversedCorrection','ChargebackReversedCorrectionReceived','ChargebackReversedReceived','Converted','CreditClosed','CreditFailed','CreditReversed','CreditReversedReceived','CreditSuspended','Credited','DebitFailed','DebitReversedReceived','Debited','DebitedReversed','DepositCorrectionCredited','DepositCorrectionDebited','Fee','FundTransfer','FundTransferReversed','InvoiceDeductionCredited','InvoiceDeductionDebited','ManualCorrected','ManualCorrectionCredited','ManualCorrectionDebited','MerchantPayin','MerchantPayinReversed','Payout','PayoutReversed','PendingCredit','PendingDebit','PendingFundTransfer','ReCredited','ReCreditedReceived','SecondChargeback','SecondChargebackCorrection','SecondChargebackCorrectionReceived','SecondChargebackReceived'] as const), undefined]), transferCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), undefined])})), undefined]), invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPostDebitAccountHolderResponseMock = (): DebitAccountHolderResponse => ({"pspReference":"8816480354727275","submittedAsync":"false"})

export const getPostPayoutAccountHolderResponseMock = (overrideResponse: Partial< PayoutAccountHolderResponse > = {}): PayoutAccountHolderResponse => ({bankAccountUUID: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), merchantReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), payoutSpeed: faker.helpers.arrayElement([faker.helpers.arrayElement(['INSTANT','SAME_DAY','STANDARD'] as const), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPostRefundFundsTransferResponseMock = (overrideResponse: Partial< RefundFundsTransferResponse > = {}): RefundFundsTransferResponse => ({invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), merchantReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), originalReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPostRefundNotPaidOutTransfersResponseMock = (overrideResponse: Partial< RefundNotPaidOutTransfersResponse > = {}): RefundNotPaidOutTransfersResponse => ({invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPostSetupBeneficiaryResponseMock = (overrideResponse: Partial< SetupBeneficiaryResponse > = {}): SetupBeneficiaryResponse => ({invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getPostTransferFundsResponseMock = (overrideResponse: Partial< TransferFundsResponse > = {}): TransferFundsResponse => ({invalidFields: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({errorCode: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), errorDescription: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldType: faker.helpers.arrayElement([{field: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), fieldName: faker.helpers.arrayElement([faker.helpers.arrayElement(['accountCode','accountHolderCode','accountHolderDetails','accountNumber','accountStateType','accountStatus','accountType','address','balanceAccount','balanceAccountActive','balanceAccountCode','balanceAccountId','bankAccount','bankAccountCode','bankAccountName','bankAccountUUID','bankBicSwift','bankCity','bankCode','bankName','bankStatement','branchCode','businessContact','cardToken','checkCode','city','companyRegistration','constitutionalDocument','controller','country','countryCode','currency','currencyCode','dateOfBirth','description','destinationAccountCode','document','documentContent','documentExpirationDate','documentIssuerCountry','documentIssuerState','documentName','documentNumber','documentType','doingBusinessAs','drivingLicence','drivingLicenceBack','drivingLicenceFront','drivingLicense','email','firstName','formType','fullPhoneNumber','gender','hopWebserviceUser','houseNumberOrName','iban','idCard','idCardBack','idCardFront','idNumber','identityDocument','individualDetails','infix','jobTitle','lastName','lastReviewDate','legalArrangement','legalArrangementCode','legalArrangementEntity','legalArrangementEntityCode','legalArrangementLegalForm','legalArrangementMember','legalArrangementMembers','legalArrangementName','legalArrangementReference','legalArrangementRegistrationNumber','legalArrangementTaxNumber','legalArrangementType','legalBusinessName','legalEntity','legalEntityType','logo','merchantAccount','merchantCategoryCode','merchantHouseNumber','merchantReference','microDeposit','name','nationality','originalReference','ownerCity','ownerCountryCode','ownerDateOfBirth','ownerHouseNumberOrName','ownerName','ownerPostalCode','ownerState','ownerStreet','passport','passportNumber','payoutMethodCode','payoutSchedule','pciSelfAssessment','personalData','phoneCountryCode','phoneNumber','postalCode','primaryCurrency','reason','registrationNumber','returnUrl','schedule','shareholder','shareholderCode','shareholderCodeAndSignatoryCode','shareholderCodeOrSignatoryCode','shareholderType','shareholderTypes','shopperInteraction','signatory','signatoryCode','socialSecurityNumber','sourceAccountCode','splitAccount','splitConfigurationUUID','splitCurrency','splitValue','splits','stateOrProvince','status','stockExchange','stockNumber','stockTicker','store','storeDetail','storeName','storeReference','street','taxId','tier','tierNumber','transferCode','ultimateParentCompany','ultimateParentCompanyAddressDetails','ultimateParentCompanyAddressDetailsCountry','ultimateParentCompanyBusinessDetails','ultimateParentCompanyBusinessDetailsLegalBusinessName','ultimateParentCompanyBusinessDetailsRegistrationNumber','ultimateParentCompanyCode','ultimateParentCompanyStockExchange','ultimateParentCompanyStockNumber','ultimateParentCompanyStockNumberOrStockTicker','ultimateParentCompanyStockTicker','unknown','value','verificationType','virtualAccount','visaNumber','webAddress','year'] as const), undefined]), shareholderCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined])})), undefined]), merchantReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pspReference: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), resultCode: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getPostAccountHolderBalanceMockHandler = (overrideResponse?: AccountHolderBalanceResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AccountHolderBalanceResponse> | AccountHolderBalanceResponse)) => {
  return http.post('*/accountHolderBalance', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAccountHolderBalanceResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostAccountHolderTransactionListMockHandler = (overrideResponse?: AccountHolderTransactionListResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AccountHolderTransactionListResponse> | AccountHolderTransactionListResponse)) => {
  return http.post('*/accountHolderTransactionList', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAccountHolderTransactionListResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostDebitAccountHolderMockHandler = (overrideResponse?: DebitAccountHolderResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DebitAccountHolderResponse> | DebitAccountHolderResponse)) => {
  return http.post('*/debitAccountHolder', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostDebitAccountHolderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostPayoutAccountHolderMockHandler = (overrideResponse?: PayoutAccountHolderResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<PayoutAccountHolderResponse> | PayoutAccountHolderResponse)) => {
  return http.post('*/payoutAccountHolder', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostPayoutAccountHolderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostRefundFundsTransferMockHandler = (overrideResponse?: RefundFundsTransferResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RefundFundsTransferResponse> | RefundFundsTransferResponse)) => {
  return http.post('*/refundFundsTransfer', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostRefundFundsTransferResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostRefundNotPaidOutTransfersMockHandler = (overrideResponse?: RefundNotPaidOutTransfersResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<RefundNotPaidOutTransfersResponse> | RefundNotPaidOutTransfersResponse)) => {
  return http.post('*/refundNotPaidOutTransfers', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostRefundNotPaidOutTransfersResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostSetupBeneficiaryMockHandler = (overrideResponse?: SetupBeneficiaryResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<SetupBeneficiaryResponse> | SetupBeneficiaryResponse)) => {
  return http.post('*/setupBeneficiary', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostSetupBeneficiaryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostTransferFundsMockHandler = (overrideResponse?: TransferFundsResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TransferFundsResponse> | TransferFundsResponse)) => {
  return http.post('*/transferFunds', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostTransferFundsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getGeneralMock = () => [
  getPostAccountHolderBalanceMockHandler(),
  getPostAccountHolderTransactionListMockHandler(),
  getPostDebitAccountHolderMockHandler(),
  getPostPayoutAccountHolderMockHandler(),
  getPostRefundFundsTransferMockHandler(),
  getPostRefundNotPaidOutTransfersMockHandler(),
  getPostSetupBeneficiaryMockHandler(),
  getPostTransferFundsMockHandler()
]
