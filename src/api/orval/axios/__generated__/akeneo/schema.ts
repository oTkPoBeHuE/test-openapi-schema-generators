/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Akeneo PIM REST API
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type GetSystemInformation406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetSystemInformation200One = {
  /** Edition of the PIM */
  edition?: string;
  /** Version of the PIM */
  version?: string;
};

export type PatchReferenceEntityRecordsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityRecordsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityRecordsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchReferenceEntityRecordsCodeBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchReferenceEntityRecordsCodeBodyValuesAttributeCodeItem = {
  /** Channel code of the reference entity record value */
  channel?: string;
  /** Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchReferenceEntityRecordsCodeBodyValuesAttributeCodeItemData;
  /** Locale code of the reference entity record value */
  locale?: string;
};

/**
 * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
 */
export type PatchReferenceEntityRecordsCodeBodyValues = {
  attributeCode?: PatchReferenceEntityRecordsCodeBodyValuesAttributeCodeItem[];
};

export type PatchReferenceEntityRecordsCodeBody = {
  /** Code of the record */
  code: string;
  /** Date of creation. */
  created?: string;
  /** Date of the last update. */
  updated?: string;
  /** Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details */
  values?: PatchReferenceEntityRecordsCodeBodyValues;
};

export type GetReferenceEntityRecordsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityRecordsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityRecordsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
 */
export type GetReferenceEntityRecordsCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetReferenceEntityRecordsCode200ValuesAttributeCodeItem = {
  /** Channel code of the reference entity record value */
  channel?: string;
  /** Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details. */
  data?: GetReferenceEntityRecordsCode200ValuesAttributeCodeItemData;
  /** Locale code of the reference entity record value */
  locale?: string;
};

/**
 * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
 */
export type GetReferenceEntityRecordsCode200Values = {
  attributeCode?: GetReferenceEntityRecordsCode200ValuesAttributeCodeItem[];
};

export type GetReferenceEntityRecordsCode200 = {
  /** Code of the record */
  code: string;
  /** Date of creation. */
  created?: string;
  /** Date of the last update. */
  updated?: string;
  /** Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details */
  values?: GetReferenceEntityRecordsCode200Values;
};

export type PatchReferenceEntityRecords415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityRecords413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityRecords401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityRecords200Item = {
  /** Resource code */
  code?: string;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

export type PatchReferenceEntityRecordsBodyItem = {
  /** Code of the record */
  code: string;
  /** Date of creation. */
  created?: string;
  /** Date of the last update. */
  updated?: string;
  /** Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details */
  values?: PatchReferenceEntityRecordsBodyItemValues;
};

/**
 * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchReferenceEntityRecordsBodyItemValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchReferenceEntityRecordsBodyItemValuesAttributeCodeItem = {
  /** Channel code of the reference entity record value */
  channel?: string;
  /** Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchReferenceEntityRecordsBodyItemValuesAttributeCodeItemData;
  /** Locale code of the reference entity record value */
  locale?: string;
};

/**
 * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
 */
export type PatchReferenceEntityRecordsBodyItemValues = {
  attributeCode?: PatchReferenceEntityRecordsBodyItemValuesAttributeCodeItem[];
};

export type GetReferenceEntityRecords406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityRecords401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityRecords200One = GetReferenceEntityRecords200OneAllOf & GetReferenceEntityRecords200OneAllOfSix;

export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItem = _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOf & _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFour;

export type _GetReferenceEntityRecords200OneAllOfSixEmbedded = {
  items?: _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItem[];
};

export type GetReferenceEntityRecords200OneAllOfSix = {
  _embedded?: _GetReferenceEntityRecords200OneAllOfSixEmbedded;
};

/**
 * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
 */
export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItem = {
  /** Channel code of the reference entity record value */
  channel?: string;
  /** Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details. */
  data?: _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData;
  /** Locale code of the reference entity record value */
  locale?: string;
};

/**
 * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
 */
export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFourValues = {
  attributeCode?: _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItem[];
};

export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFour = {
  /** Code of the record */
  code: string;
  /** Date of creation. */
  created?: string;
  /** Date of the last update. */
  updated?: string;
  /** Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details */
  values?: _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfFourValues;
};

export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfLinks = {
  self?: _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOf = {
  _links?: _GetReferenceEntityRecords200OneAllOfSixEmbeddedItemsItemAllOfLinks;
};

export type _GetReferenceEntityRecords200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetReferenceEntityRecords200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetReferenceEntityRecords200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetReferenceEntityRecords200OneAllOfLinks = {
  first?: _GetReferenceEntityRecords200OneAllOfLinksFirst;
  next?: _GetReferenceEntityRecords200OneAllOfLinksNext;
  self?: _GetReferenceEntityRecords200OneAllOfLinksSelf;
};

export type GetReferenceEntityRecords200OneAllOf = {
  _links?: _GetReferenceEntityRecords200OneAllOfLinks;
};

export type GetReferenceEntityRecordsParams = {
/**
 * Filter records of the reference entity, for more details see the <a href="/documentation/filter.html#filter-reference-entity-records">Filters</a> section
 */
search?: string;
/**
 * Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#record-values-by-channel">Filter attribute values by channel</a> section
 */
channel?: string;
/**
 * Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#record-values-by-locale">Filter attribute values by locale</a> section
 */
locales?: string;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
};

export type PatchReferenceEntityAttributesCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityAttributesCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityAttributesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type PatchReferenceEntityAttributesCodeBodyValidationRule = typeof PatchReferenceEntityAttributesCodeBodyValidationRule[keyof typeof PatchReferenceEntityAttributesCodeBodyValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchReferenceEntityAttributesCodeBodyValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
 */
export type PatchReferenceEntityAttributesCodeBodyType = typeof PatchReferenceEntityAttributesCodeBodyType[keyof typeof PatchReferenceEntityAttributesCodeBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchReferenceEntityAttributesCodeBodyType = {
  text: 'text',
  image: 'image',
  number: 'number',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
} as const;

/**
 * Attribute labels for each locale
 */
export type PatchReferenceEntityAttributesCodeBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchReferenceEntityAttributesCodeBody = {
  /** Extensions allowed when the attribute type is `image` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: PatchReferenceEntityAttributesCodeBodyLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `image` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links` */
  reference_entity_code?: string;
  /** Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details. */
  type: PatchReferenceEntityAttributesCodeBodyType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: PatchReferenceEntityAttributesCodeBodyValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type GetReferenceEntityAttributesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityAttributesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityAttributesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type GetReferenceEntityAttributesCode200ValidationRule = typeof GetReferenceEntityAttributesCode200ValidationRule[keyof typeof GetReferenceEntityAttributesCode200ValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReferenceEntityAttributesCode200ValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
 */
export type GetReferenceEntityAttributesCode200Type = typeof GetReferenceEntityAttributesCode200Type[keyof typeof GetReferenceEntityAttributesCode200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReferenceEntityAttributesCode200Type = {
  text: 'text',
  image: 'image',
  number: 'number',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
} as const;

/**
 * Attribute labels for each locale
 */
export type GetReferenceEntityAttributesCode200Labels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetReferenceEntityAttributesCode200 = {
  /** Extensions allowed when the attribute type is `image` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: GetReferenceEntityAttributesCode200Labels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `image` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links` */
  reference_entity_code?: string;
  /** Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details. */
  type: GetReferenceEntityAttributesCode200Type;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: GetReferenceEntityAttributesCode200ValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type PatchReferenceEntityAttributesAttributeCodeOptionsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityAttributesAttributeCodeOptionsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityAttributesAttributeCodeOptionsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute labels for each locale
 */
export type PatchReferenceEntityAttributesAttributeCodeOptionsCodeBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchReferenceEntityAttributesAttributeCodeOptionsCodeBody = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: PatchReferenceEntityAttributesAttributeCodeOptionsCodeBodyLabels;
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute labels for each locale
 */
export type GetReferenceEntityAttributesAttributeCodeOptionsCode200Labels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCode200 = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: GetReferenceEntityAttributesAttributeCodeOptionsCode200Labels;
};

export type GetReferenceEntityAttributesAttributeCodeOptions406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptions401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute labels for each locale
 */
export type GetReferenceEntityAttributesAttributeCodeOptions200ItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptions200Item = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: GetReferenceEntityAttributesAttributeCodeOptions200ItemLabels;
};

export type GetReferenceEntitiesCodeAttributes406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntitiesCodeAttributes401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type GetReferenceEntitiesCodeAttributes200ItemValidationRule = typeof GetReferenceEntitiesCodeAttributes200ItemValidationRule[keyof typeof GetReferenceEntitiesCodeAttributes200ItemValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReferenceEntitiesCodeAttributes200ItemValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
 */
export type GetReferenceEntitiesCodeAttributes200ItemType = typeof GetReferenceEntitiesCodeAttributes200ItemType[keyof typeof GetReferenceEntitiesCodeAttributes200ItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetReferenceEntitiesCodeAttributes200ItemType = {
  text: 'text',
  image: 'image',
  number: 'number',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
} as const;

/**
 * Attribute labels for each locale
 */
export type GetReferenceEntitiesCodeAttributes200ItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetReferenceEntitiesCodeAttributes200Item = {
  /** Extensions allowed when the attribute type is `image` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: GetReferenceEntitiesCodeAttributes200ItemLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `image` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links` */
  reference_entity_code?: string;
  /** Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details. */
  type: GetReferenceEntitiesCodeAttributes200ItemType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: GetReferenceEntitiesCodeAttributes200ItemValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type PatchReferenceEntityCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchReferenceEntityCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Reference entity labels for each locale
 */
export type PatchReferenceEntityCodeBodyLabels = {
  /** Reference entity label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchReferenceEntityCodeBody = {
  /** Reference entity code */
  code: string;
  /** Code of the reference entity image */
  image?: string;
  /** Reference entity labels for each locale */
  labels?: PatchReferenceEntityCodeBodyLabels;
};

export type GetReferenceEntitiesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntitiesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntitiesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Reference entity labels for each locale
 */
export type GetReferenceEntitiesCode200AllOfFourLabels = {
  /** Reference entity label for the locale `localeCode` */
  localeCode?: string;
};

export type GetReferenceEntitiesCode200AllOfFour = {
  /** Reference entity code */
  code: string;
  /** Code of the reference entity image */
  image?: string;
  /** Reference entity labels for each locale */
  labels?: GetReferenceEntitiesCode200AllOfFourLabels;
};

export type GetReferenceEntitiesCode200 = GetReferenceEntitiesCode200AllOf & GetReferenceEntitiesCode200AllOfFour;

export type _GetReferenceEntitiesCode200AllOfLinksImageDownload = {
  /** URI to download the binaries of the reference entity image file */
  href?: string;
};

export type _GetReferenceEntitiesCode200AllOfLinks = {
  image_download?: _GetReferenceEntitiesCode200AllOfLinksImageDownload;
};

export type GetReferenceEntitiesCode200AllOf = {
  _links?: _GetReferenceEntitiesCode200AllOfLinks;
};

export type GetReferenceEntityMediaFilesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntityMediaFilesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceEntityMediaFiles422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceEntityMediaFiles415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceEntityMediaFiles401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceEntityMediaFilesHeaders = {
/**
 * Equal to 'multipart/form-data', no other value allowed
 */
'Content-type': string;
};

export type GetReferenceEntities406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntities401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceEntities200OneAllOfSix = {
  _embedded?: _GetReferenceEntities200OneAllOfSixEmbedded;
};

export type GetReferenceEntities200One = GetReferenceEntities200OneAllOf & GetReferenceEntities200OneAllOfSix;

/**
 * Reference entity labels for each locale
 */
export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfFiveLabels = {
  /** Reference entity label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfFive = {
  /** Reference entity code */
  code: string;
  /** Code of the reference entity image */
  image?: string;
  /** Reference entity labels for each locale */
  labels?: _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfFiveLabels;
};

export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfLinksImageDownload = {
  /** URI to download the binaries of the reference entity image file */
  href?: string;
};

export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfLinks = {
  image_download?: _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfLinksImageDownload;
  self?: _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOf = {
  _links?: _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfLinks;
};

export type _GetReferenceEntities200OneAllOfSixEmbeddedItemsItem = _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOf & _GetReferenceEntities200OneAllOfSixEmbeddedItemsItemAllOfFive;

export type _GetReferenceEntities200OneAllOfSixEmbedded = {
  items?: _GetReferenceEntities200OneAllOfSixEmbeddedItemsItem[];
};

export type GetReferenceEntities200OneAllOf = {
  _links?: _GetReferenceEntities200OneAllOfLinks;
};

export type _GetReferenceEntities200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetReferenceEntities200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetReferenceEntities200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetReferenceEntities200OneAllOfLinks = {
  first?: _GetReferenceEntities200OneAllOfLinksFirst;
  next?: _GetReferenceEntities200OneAllOfLinksNext;
  self?: _GetReferenceEntities200OneAllOfLinksSelf;
};

export type GetReferenceEntitiesParams = {
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
};

export type GetPublishedProductsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProductsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProductsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProductsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type GetPublishedProductsCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetPublishedProductsCode200ValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: GetPublishedProductsCode200ValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetPublishedProductsCode200Values = {
  attributeCode?: GetPublishedProductsCode200ValuesAttributeCodeItem[];
};

/**
 * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
 */
export type GetPublishedProductsCode200QuantifiedAssociations = { [key: string]: unknown };

export type GetPublishedProductsCode200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the published product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of published product identifiers with which the published product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups and/or other published products, grouped by association types
 */
export type GetPublishedProductsCode200Associations = {
  associationTypeCode?: GetPublishedProductsCode200AssociationsAssociationTypeCode;
};

export type GetPublishedProductsCode200 = {
  /** Several associations related to groups and/or other published products, grouped by association types */
  associations?: GetPublishedProductsCode200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified */
  categories?: string[];
  /** Date of creation */
  created?: string;
  /** Whether the published product is enable */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements */
  family?: string;
  /** Codes of the groups to which the published product belong */
  groups?: string[];
  /** Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** Warning: associations with quantities are not compatible with the published products. The response will always be empty. */
  quantified_associations?: GetPublishedProductsCode200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetPublishedProductsCode200Values;
};

export type GetPublishedProducts422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProducts406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProducts403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProducts401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPublishedProducts400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItem = _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOf & _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetPublishedProducts200OneAllOfSevenEmbedded = {
  items?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetPublishedProducts200OneAllOfSeven = {
  _embedded?: _GetPublishedProducts200OneAllOfSevenEmbedded;
};

export type GetPublishedProducts200One = GetPublishedProducts200OneAllOf & GetPublishedProducts200OneAllOfSeven;

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourValues = {
  attributeCode?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem[];
};

/**
 * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
 */
export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations = { [key: string]: unknown };

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the published product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of published product identifiers with which the published product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups and/or other published products, grouped by association types
 */
export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociations = {
  associationTypeCode?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode;
};

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Several associations related to groups and/or other published products, grouped by association types */
  associations?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified */
  categories?: string[];
  /** Date of creation */
  created?: string;
  /** Whether the published product is enable */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements */
  family?: string;
  /** Codes of the groups to which the published product belong */
  groups?: string[];
  /** Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** Warning: associations with quantities are not compatible with the published products. The response will always be empty. */
  quantified_associations?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfFourValues;
};

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetPublishedProducts200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetPublishedProducts200OneAllOf = {
  _links?: _GetPublishedProducts200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetPublishedProducts200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetPublishedProducts200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetPublishedProducts200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetPublishedProducts200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetPublishedProducts200OneAllOfLinks = {
  first?: _GetPublishedProducts200OneAllOfLinksFirst;
  next?: _GetPublishedProducts200OneAllOfLinksNext;
  previous?: _GetPublishedProducts200OneAllOfLinksPrevious;
  self?: _GetPublishedProducts200OneAllOfLinksSelf;
};

export type GetPublishedProductsPaginationType = typeof GetPublishedProductsPaginationType[keyof typeof GetPublishedProductsPaginationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPublishedProductsPaginationType = {
  page: 'page',
  search_after: 'search_after',
} as const;

export type GetPublishedProductsParams = {
/**
 * Filter published products, for more details see the <a href="/documentation/filter.html">Filters</a> section
 */
search?: string;
/**
 * Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-published-product-values">Filter on published product values</a> section
 */
scope?: string;
/**
 * Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-published-product-values">Filter on published product values</a> section
 */
locales?: string;
/**
 * Filter published product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
 */
attributes?: string;
/**
 * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
 */
pagination_type?: GetPublishedProductsPaginationType;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PostProposal422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposal415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposal403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposal401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftCode200 = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: GetDraftCode200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: GetDraftCode200CompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: GetDraftCode200Metadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: GetDraftCode200QualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: GetDraftCode200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetDraftCode200Values;
};

export type GetDraftCode200ValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type GetDraftCode200ValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: GetDraftCode200ValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type GetDraftCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetDraftCode200ValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: GetDraftCode200ValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: GetDraftCode200ValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetDraftCode200Values = {
  attributeCode?: GetDraftCode200ValuesAttributeCodeItem[];
};

export type GetDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type GetDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type GetDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: GetDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: GetDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type GetDraftCode200QuantifiedAssociations = {
  quantifiedAssociationTypeCode?: GetDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type GetDraftCode200QualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type GetDraftCode200MetadataWorkflowStatus = typeof GetDraftCode200MetadataWorkflowStatus[keyof typeof GetDraftCode200MetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDraftCode200MetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type GetDraftCode200Metadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: GetDraftCode200MetadataWorkflowStatus;
};

export type GetDraftCode200CompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type GetDraftCode200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type GetDraftCode200Associations = {
  associationTypeCode?: GetDraftCode200AssociationsAssociationTypeCode;
};

export type PatchProductsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsCodeBodyValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type PatchProductsCodeBodyValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: PatchProductsCodeBodyValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchProductsCodeBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchProductsCodeBodyValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchProductsCodeBodyValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: PatchProductsCodeBodyValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PatchProductsCodeBodyValues = {
  attributeCode?: PatchProductsCodeBodyValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PatchProductsCodeBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PatchProductsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type PatchProductsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type PatchProductsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PatchProductsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: PatchProductsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: PatchProductsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type PatchProductsCodeBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type PatchProductsCodeBodyMetadataWorkflowStatus = typeof PatchProductsCodeBodyMetadataWorkflowStatus[keyof typeof PatchProductsCodeBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProductsCodeBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type PatchProductsCodeBodyMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: PatchProductsCodeBodyMetadataWorkflowStatus;
};

export type PatchProductsCodeBodyCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type PatchProductsCodeBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type PatchProductsCodeBodyAssociations = {
  associationTypeCode?: PatchProductsCodeBodyAssociationsAssociationTypeCode;
};

export type PatchProductsCodeBody = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: PatchProductsCodeBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: PatchProductsCodeBodyCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: PatchProductsCodeBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PatchProductsCodeBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PatchProductsCodeBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PatchProductsCodeBodyValues;
};

export type GetProductsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetProductsCode200Values = {
  attributeCode?: GetProductsCode200ValuesAttributeCodeItem[];
};

export type GetProductsCode200ValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type GetProductsCode200ValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: GetProductsCode200ValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type GetProductsCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetProductsCode200ValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: GetProductsCode200ValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: GetProductsCode200ValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

export type GetProductsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type GetProductsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type GetProductsCode200QuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: GetProductsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: GetProductsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type GetProductsCode200QuantifiedAssociations = {
  quantifiedAssociationTypeCode?: GetProductsCode200QuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type GetProductsCode200QualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type GetProductsCode200MetadataWorkflowStatus = typeof GetProductsCode200MetadataWorkflowStatus[keyof typeof GetProductsCode200MetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsCode200MetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type GetProductsCode200Metadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: GetProductsCode200MetadataWorkflowStatus;
};

export type GetProductsCode200CompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type GetProductsCode200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type GetProductsCode200Associations = {
  associationTypeCode?: GetProductsCode200AssociationsAssociationTypeCode;
};

export type GetProductsCode200 = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: GetProductsCode200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: GetProductsCode200CompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: GetProductsCode200Metadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: GetProductsCode200QualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: GetProductsCode200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetProductsCode200Values;
};

export type GetProductsCodeParams = {
/**
 * Return labels of attribute options in the response. (Only available since the 5.0 version)
 */
with_attribute_options?: boolean;
/**
 * Return product quality scores in the response. (Only available since the 5.0 version)
 */
with_quality_scores?: boolean;
/**
 * Return product completenesses in the response. (Only available since the 6.0 version)
 */
with_completenesses?: boolean;
};

export type DeleteProductsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteProductsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteProductsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposalUuid422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposalUuid415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposalUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProposalUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftUuidUuid406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftUuidUuid404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftUuidUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetDraftUuidUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetDraftUuidUuid200Values = {
  attributeCode?: GetDraftUuidUuid200ValuesAttributeCodeItem[];
};

export type GetDraftUuidUuid200 = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: GetDraftUuidUuid200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: GetDraftUuidUuid200CompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: GetDraftUuidUuid200Metadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: GetDraftUuidUuid200QualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: GetDraftUuidUuid200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetDraftUuidUuid200Values;
};

export type GetDraftUuidUuid200ValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type GetDraftUuidUuid200ValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: GetDraftUuidUuid200ValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type GetDraftUuidUuid200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetDraftUuidUuid200ValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: GetDraftUuidUuid200ValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: GetDraftUuidUuid200ValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

export type GetDraftUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type GetDraftUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type GetDraftUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: GetDraftUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: GetDraftUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type GetDraftUuidUuid200QuantifiedAssociations = {
  quantifiedAssociationTypeCode?: GetDraftUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type GetDraftUuidUuid200QualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type GetDraftUuidUuid200MetadataWorkflowStatus = typeof GetDraftUuidUuid200MetadataWorkflowStatus[keyof typeof GetDraftUuidUuid200MetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetDraftUuidUuid200MetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type GetDraftUuidUuid200Metadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: GetDraftUuidUuid200MetadataWorkflowStatus;
};

export type GetDraftUuidUuid200CompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type GetDraftUuidUuid200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type GetDraftUuidUuid200Associations = {
  associationTypeCode?: GetDraftUuidUuid200AssociationsAssociationTypeCode;
};

export type PatchProductsUuidUuid422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuidUuid415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuidUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuidUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuidUuidBody = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: PatchProductsUuidUuidBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: PatchProductsUuidUuidBodyCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: PatchProductsUuidUuidBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PatchProductsUuidUuidBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PatchProductsUuidUuidBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PatchProductsUuidUuidBodyValues;
};

export type PatchProductsUuidUuidBodyValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type PatchProductsUuidUuidBodyValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: PatchProductsUuidUuidBodyValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchProductsUuidUuidBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchProductsUuidUuidBodyValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchProductsUuidUuidBodyValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: PatchProductsUuidUuidBodyValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PatchProductsUuidUuidBodyValues = {
  attributeCode?: PatchProductsUuidUuidBodyValuesAttributeCodeItem[];
};

export type PatchProductsUuidUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type PatchProductsUuidUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PatchProductsUuidUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: PatchProductsUuidUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: PatchProductsUuidUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PatchProductsUuidUuidBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PatchProductsUuidUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type PatchProductsUuidUuidBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type PatchProductsUuidUuidBodyMetadataWorkflowStatus = typeof PatchProductsUuidUuidBodyMetadataWorkflowStatus[keyof typeof PatchProductsUuidUuidBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProductsUuidUuidBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type PatchProductsUuidUuidBodyMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: PatchProductsUuidUuidBodyMetadataWorkflowStatus;
};

export type PatchProductsUuidUuidBodyCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type PatchProductsUuidUuidBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type PatchProductsUuidUuidBodyAssociations = {
  associationTypeCode?: PatchProductsUuidUuidBodyAssociationsAssociationTypeCode;
};

export type GetProductsUuidUuid406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuidUuid404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuidUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuidUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetProductsUuidUuid200Values = {
  attributeCode?: GetProductsUuidUuid200ValuesAttributeCodeItem[];
};

export type GetProductsUuidUuid200 = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: GetProductsUuidUuid200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: GetProductsUuidUuid200CompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: GetProductsUuidUuid200Metadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: GetProductsUuidUuid200QualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: GetProductsUuidUuid200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetProductsUuidUuid200Values;
};

export type GetProductsUuidUuid200ValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type GetProductsUuidUuid200ValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: GetProductsUuidUuid200ValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type GetProductsUuidUuid200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetProductsUuidUuid200ValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: GetProductsUuidUuid200ValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: GetProductsUuidUuid200ValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type GetProductsUuidUuid200QuantifiedAssociations = {
  quantifiedAssociationTypeCode?: GetProductsUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type GetProductsUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type GetProductsUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type GetProductsUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: GetProductsUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: GetProductsUuidUuid200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type GetProductsUuidUuid200QualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type GetProductsUuidUuid200MetadataWorkflowStatus = typeof GetProductsUuidUuid200MetadataWorkflowStatus[keyof typeof GetProductsUuidUuid200MetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsUuidUuid200MetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type GetProductsUuidUuid200Metadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: GetProductsUuidUuid200MetadataWorkflowStatus;
};

export type GetProductsUuidUuid200CompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type GetProductsUuidUuid200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type GetProductsUuidUuid200Associations = {
  associationTypeCode?: GetProductsUuidUuid200AssociationsAssociationTypeCode;
};

export type GetProductsUuidUuidParams = {
/**
 * Return labels of attribute options in the response. (Only available since the 5.0 version)
 */
with_attribute_options?: boolean;
/**
 * Return product quality scores in the response. (Only available since the 5.0 version)
 */
with_quality_scores?: boolean;
/**
 * Return product completenesses in the response. (Only available since the 6.0 version)
 */
with_completenesses?: boolean;
};

export type DeleteProductsUuidUuid404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteProductsUuidUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteProductsUuidUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsUuid422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsUuid415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsUuid400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsUuidBodyValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type PostProductsUuidBodyValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: PostProductsUuidBodyValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PostProductsUuidBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PostProductsUuidBodyValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PostProductsUuidBodyValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: PostProductsUuidBodyValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PostProductsUuidBodyValues = {
  attributeCode?: PostProductsUuidBodyValuesAttributeCodeItem[];
};

export type PostProductsUuidBody = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: PostProductsUuidBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: PostProductsUuidBodyCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: PostProductsUuidBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PostProductsUuidBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PostProductsUuidBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PostProductsUuidBodyValues;
};

export type PostProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type PostProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: PostProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: PostProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PostProductsUuidBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PostProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type PostProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type PostProductsUuidBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type PostProductsUuidBodyMetadataWorkflowStatus = typeof PostProductsUuidBodyMetadataWorkflowStatus[keyof typeof PostProductsUuidBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsUuidBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type PostProductsUuidBodyMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: PostProductsUuidBodyMetadataWorkflowStatus;
};

export type PostProductsUuidBodyCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type PostProductsUuidBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type PostProductsUuidBodyAssociations = {
  associationTypeCode?: PostProductsUuidBodyAssociationsAssociationTypeCode;
};

export type PatchProductsUuid422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuid415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuid413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductsUuid200One = {
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
  /** Product uuid */
  uuid?: string;
};

export type PatchProductsUuidBodyValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type PatchProductsUuidBodyValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: PatchProductsUuidBodyValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchProductsUuidBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchProductsUuidBodyValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchProductsUuidBodyValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: PatchProductsUuidBodyValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PatchProductsUuidBodyValues = {
  attributeCode?: PatchProductsUuidBodyValuesAttributeCodeItem[];
};

export type PatchProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type PatchProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PatchProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: PatchProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: PatchProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PatchProductsUuidBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PatchProductsUuidBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type PatchProductsUuidBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type PatchProductsUuidBodyMetadataWorkflowStatus = typeof PatchProductsUuidBodyMetadataWorkflowStatus[keyof typeof PatchProductsUuidBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProductsUuidBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type PatchProductsUuidBodyMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: PatchProductsUuidBodyMetadataWorkflowStatus;
};

export type PatchProductsUuidBodyCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type PatchProductsUuidBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type PatchProductsUuidBodyAssociations = {
  associationTypeCode?: PatchProductsUuidBodyAssociationsAssociationTypeCode;
};

export type PatchProductsUuidBody = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: PatchProductsUuidBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: PatchProductsUuidBodyCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: PatchProductsUuidBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PatchProductsUuidBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PatchProductsUuidBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PatchProductsUuidBodyValues;
};

export type GetProductsUuid422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuid406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductsUuid200 = GetProductsUuid200AllOf & GetProductsUuid200AllOfSeven;

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItem = _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOf & _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetProductsUuid200AllOfSevenEmbedded = {
  items?: _GetProductsUuid200AllOfSevenEmbeddedItemsItem[];
};

export type GetProductsUuid200AllOfSeven = {
  _embedded?: _GetProductsUuid200AllOfSevenEmbedded;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValues = {
  attributeCode?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem[];
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus = typeof _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus[keyof typeof _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourAssociations = {
  associationTypeCode?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfFourValues;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetProductsUuid200AllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetProductsUuid200AllOf = {
  _links?: _GetProductsUuid200AllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetProductsUuid200AllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetProductsUuid200AllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetProductsUuid200AllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetProductsUuid200AllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetProductsUuid200AllOfLinks = {
  first?: _GetProductsUuid200AllOfLinksFirst;
  next?: _GetProductsUuid200AllOfLinksNext;
  previous?: _GetProductsUuid200AllOfLinksPrevious;
  self?: _GetProductsUuid200AllOfLinksSelf;
};

export type GetProductsUuidPaginationType = typeof GetProductsUuidPaginationType[keyof typeof GetProductsUuidPaginationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsUuidPaginationType = {
  page: 'page',
  search_after: 'search_after',
} as const;

export type GetProductsUuidParams = {
/**
 * Filter products, for more details see the <a href="/documentation/filter.html">Filters</a> section
 */
search?: string;
/**
 * Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-channel">Filter product values via channel</a> section
 */
scope?: string;
/**
 * Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-locale">Filter product values via locale</a> section
 */
locales?: string;
/**
 * Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
 */
attributes?: string;
/**
 * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
 */
pagination_type?: GetProductsUuidPaginationType;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
/**
 * Return labels of attribute options in the response. (Only available since the 5.0 version)
 */
with_attribute_options?: boolean;
/**
 * Return product quality scores in the response. (Only available since the 5.0 version)
 */
with_quality_scores?: boolean;
/**
 * Return product completenesses in the response. (Only available since the 6.0 version)
 */
with_completenesses?: boolean;
};

export type PostProducts422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProducts415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProducts403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProducts401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProducts400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductsBodyValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type PostProductsBodyValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: PostProductsBodyValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PostProductsBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PostProductsBodyValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PostProductsBodyValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: PostProductsBodyValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PostProductsBodyValues = {
  attributeCode?: PostProductsBodyValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PostProductsBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PostProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type PostProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type PostProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PostProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: PostProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: PostProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type PostProductsBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type PostProductsBodyMetadataWorkflowStatus = typeof PostProductsBodyMetadataWorkflowStatus[keyof typeof PostProductsBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductsBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type PostProductsBodyMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: PostProductsBodyMetadataWorkflowStatus;
};

export type PostProductsBodyCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type PostProductsBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type PostProductsBodyAssociations = {
  associationTypeCode?: PostProductsBodyAssociationsAssociationTypeCode;
};

export type PostProductsBody = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: PostProductsBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: PostProductsBodyCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: PostProductsBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PostProductsBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PostProductsBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PostProductsBodyValues;
};

export type PatchProducts415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProducts413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProducts403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProducts401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProducts200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PatchProductsBodyValues = {
  attributeCode?: PatchProductsBodyValuesAttributeCodeItem[];
};

export type PatchProductsBody = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: PatchProductsBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: PatchProductsBodyCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: PatchProductsBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PatchProductsBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PatchProductsBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PatchProductsBodyValues;
};

export type PatchProductsBodyValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type PatchProductsBodyValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: PatchProductsBodyValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchProductsBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchProductsBodyValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchProductsBodyValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: PatchProductsBodyValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PatchProductsBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PatchProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type PatchProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type PatchProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PatchProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: PatchProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: PatchProductsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type PatchProductsBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type PatchProductsBodyMetadataWorkflowStatus = typeof PatchProductsBodyMetadataWorkflowStatus[keyof typeof PatchProductsBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProductsBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type PatchProductsBodyMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: PatchProductsBodyMetadataWorkflowStatus;
};

export type PatchProductsBodyCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type PatchProductsBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type PatchProductsBodyAssociations = {
  associationTypeCode?: PatchProductsBodyAssociationsAssociationTypeCode;
};

export type GetProducts422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProducts406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProducts403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProducts401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetProducts200AllOfSevenEmbedded = {
  items?: _GetProducts200AllOfSevenEmbeddedItemsItem[];
};

export type GetProducts200AllOfSeven = {
  _embedded?: _GetProducts200AllOfSevenEmbedded;
};

export type GetProducts200 = GetProducts200AllOf & GetProducts200AllOfSeven;

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValues = {
  attributeCode?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem[];
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValues;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItem = _GetProducts200AllOfSevenEmbeddedItemsItemAllOf & _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus = typeof _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus[keyof typeof _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourAssociations = {
  associationTypeCode?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetProducts200AllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetProducts200AllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetProducts200AllOf = {
  _links?: _GetProducts200AllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetProducts200AllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetProducts200AllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetProducts200AllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetProducts200AllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetProducts200AllOfLinks = {
  first?: _GetProducts200AllOfLinksFirst;
  next?: _GetProducts200AllOfLinksNext;
  previous?: _GetProducts200AllOfLinksPrevious;
  self?: _GetProducts200AllOfLinksSelf;
};

export type GetProductsPaginationType = typeof GetProductsPaginationType[keyof typeof GetProductsPaginationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductsPaginationType = {
  page: 'page',
  search_after: 'search_after',
} as const;

export type GetProductsParams = {
/**
 * Filter products, for more details see the <a href="/documentation/filter.html">Filters</a> section
 */
search?: string;
/**
 * Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-channel">Filter product values via channel</a> section
 */
scope?: string;
/**
 * Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-locale">Filter product values via locale</a> section
 */
locales?: string;
/**
 * Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
 */
attributes?: string;
/**
 * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
 */
pagination_type?: GetProductsPaginationType;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
/**
 * Return labels of attribute options in the response. (Only available since the 5.0 version)
 */
with_attribute_options?: boolean;
/**
 * Return product quality scores in the response. (Only available since the 5.0 version)
 */
with_quality_scores?: boolean;
/**
 * Return product completenesses in the response. (Only available since the 6.0 version)
 */
with_completenesses?: boolean;
};

export type PostProductModelProposal422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModelProposal415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModelProposal403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModelProposal401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModelDraftCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModelDraftCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModelDraftCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModelDraftCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type GetProductModelDraftCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetProductModelDraftCode200ValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: GetProductModelDraftCode200ValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetProductModelDraftCode200Values = {
  attributeCode?: GetProductModelDraftCode200ValuesAttributeCodeItem[];
};

export type GetProductModelDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type GetProductModelDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type GetProductModelDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: GetProductModelDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: GetProductModelDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type GetProductModelDraftCode200QuantifiedAssociations = {
  quantifiedAssociationTypeCode?: GetProductModelDraftCode200QuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type GetProductModelDraftCode200QualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type GetProductModelDraftCode200MetadataWorkflowStatus = typeof GetProductModelDraftCode200MetadataWorkflowStatus[keyof typeof GetProductModelDraftCode200MetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductModelDraftCode200MetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type GetProductModelDraftCode200Metadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: GetProductModelDraftCode200MetadataWorkflowStatus;
};

export type GetProductModelDraftCode200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type GetProductModelDraftCode200Associations = {
  associationTypeCode?: GetProductModelDraftCode200AssociationsAssociationTypeCode;
};

export type GetProductModelDraftCode200 = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: GetProductModelDraftCode200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: GetProductModelDraftCode200Metadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: GetProductModelDraftCode200QualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: GetProductModelDraftCode200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetProductModelDraftCode200Values;
};

export type PatchProductModelsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductModelsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductModelsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type PatchProductModelsCodeBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchProductModelsCodeBodyValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: PatchProductModelsCodeBodyValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PatchProductModelsCodeBodyValues = {
  attributeCode?: PatchProductModelsCodeBodyValuesAttributeCodeItem[];
};

export type PatchProductModelsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type PatchProductModelsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PatchProductModelsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: PatchProductModelsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: PatchProductModelsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PatchProductModelsCodeBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PatchProductModelsCodeBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type PatchProductModelsCodeBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type PatchProductModelsCodeBodyMetadataWorkflowStatus = typeof PatchProductModelsCodeBodyMetadataWorkflowStatus[keyof typeof PatchProductModelsCodeBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProductModelsCodeBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type PatchProductModelsCodeBodyMetadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: PatchProductModelsCodeBodyMetadataWorkflowStatus;
};

export type PatchProductModelsCodeBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type PatchProductModelsCodeBodyAssociations = {
  associationTypeCode?: PatchProductModelsCodeBodyAssociationsAssociationTypeCode;
};

export type PatchProductModelsCodeBody = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: PatchProductModelsCodeBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: PatchProductModelsCodeBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PatchProductModelsCodeBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PatchProductModelsCodeBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PatchProductModelsCodeBodyValues;
};

export type GetProductModelsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModelsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModelsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type GetProductModelsCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetProductModelsCode200ValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: GetProductModelsCode200ValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type GetProductModelsCode200Values = {
  attributeCode?: GetProductModelsCode200ValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type GetProductModelsCode200QuantifiedAssociations = {
  quantifiedAssociationTypeCode?: GetProductModelsCode200QuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type GetProductModelsCode200 = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: GetProductModelsCode200Associations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: GetProductModelsCode200Metadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: GetProductModelsCode200QualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: GetProductModelsCode200QuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: GetProductModelsCode200Values;
};

export type GetProductModelsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type GetProductModelsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type GetProductModelsCode200QuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: GetProductModelsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: GetProductModelsCode200QuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type GetProductModelsCode200QualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type GetProductModelsCode200MetadataWorkflowStatus = typeof GetProductModelsCode200MetadataWorkflowStatus[keyof typeof GetProductModelsCode200MetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductModelsCode200MetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type GetProductModelsCode200Metadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: GetProductModelsCode200MetadataWorkflowStatus;
};

export type GetProductModelsCode200AssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type GetProductModelsCode200Associations = {
  associationTypeCode?: GetProductModelsCode200AssociationsAssociationTypeCode;
};

export type GetProductModelsCodeParams = {
/**
 * Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
 */
with_quality_scores?: boolean;
};

export type DeleteProductModelsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteProductModelsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteProductModelsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModels422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModels415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModels401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostProductModels400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type PostProductModelsBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PostProductModelsBodyValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: PostProductModelsBodyValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PostProductModelsBodyValues = {
  attributeCode?: PostProductModelsBodyValuesAttributeCodeItem[];
};

export type PostProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type PostProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PostProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: PostProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: PostProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PostProductModelsBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PostProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type PostProductModelsBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type PostProductModelsBodyMetadataWorkflowStatus = typeof PostProductModelsBodyMetadataWorkflowStatus[keyof typeof PostProductModelsBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostProductModelsBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type PostProductModelsBodyMetadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: PostProductModelsBodyMetadataWorkflowStatus;
};

export type PostProductModelsBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type PostProductModelsBodyAssociations = {
  associationTypeCode?: PostProductModelsBodyAssociationsAssociationTypeCode;
};

export type PostProductModelsBody = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: PostProductModelsBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: PostProductModelsBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PostProductModelsBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PostProductModelsBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PostProductModelsBodyValues;
};

export type PatchProductModels415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductModels413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductModels403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductModels401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchProductModels200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type PatchProductModelsBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchProductModelsBodyValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: PatchProductModelsBodyValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PatchProductModelsBodyValues = {
  attributeCode?: PatchProductModelsBodyValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type PatchProductModelsBodyQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: PatchProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type PatchProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type PatchProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type PatchProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: PatchProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: PatchProductModelsBodyQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type PatchProductModelsBodyQualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type PatchProductModelsBodyMetadataWorkflowStatus = typeof PatchProductModelsBodyMetadataWorkflowStatus[keyof typeof PatchProductModelsBodyMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchProductModelsBodyMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type PatchProductModelsBodyMetadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: PatchProductModelsBodyMetadataWorkflowStatus;
};

export type PatchProductModelsBodyAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type PatchProductModelsBodyAssociations = {
  associationTypeCode?: PatchProductModelsBodyAssociationsAssociationTypeCode;
};

export type PatchProductModelsBody = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: PatchProductModelsBodyAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: PatchProductModelsBodyMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: PatchProductModelsBodyQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: PatchProductModelsBodyQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PatchProductModelsBodyValues;
};

export type GetProductModels422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModels406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModels401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetProductModels200One = GetProductModels200OneAllOf & GetProductModels200OneAllOfSeven;

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItem = _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOf & _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetProductModels200OneAllOfSevenEmbedded = {
  items?: _GetProductModels200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetProductModels200OneAllOfSeven = {
  _embedded?: _GetProductModels200OneAllOfSevenEmbedded;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourValues = {
  attributeCode?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourValues;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourQualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus = typeof _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus[keyof typeof _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourMetadataWorkflowStatus;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociations = {
  associationTypeCode?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfFourAssociationsAssociationTypeCode;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetProductModels200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetProductModels200OneAllOf = {
  _links?: _GetProductModels200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetProductModels200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetProductModels200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetProductModels200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetProductModels200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetProductModels200OneAllOfLinks = {
  first?: _GetProductModels200OneAllOfLinksFirst;
  next?: _GetProductModels200OneAllOfLinksNext;
  previous?: _GetProductModels200OneAllOfLinksPrevious;
  self?: _GetProductModels200OneAllOfLinksSelf;
};

export type GetProductModelsPaginationType = typeof GetProductModelsPaginationType[keyof typeof GetProductModelsPaginationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetProductModelsPaginationType = {
  page: 'page',
  search_after: 'search_after',
} as const;

export type GetProductModelsParams = {
/**
 * Filter product models, for more details see the <a href="/documentation/filter.html">Filters</a> section
 */
search?: string;
/**
 * Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-channel">Filter product values via channel</a> section
 */
scope?: string;
/**
 * Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-locale">Filter product values via locale</a> section
 */
locales?: string;
/**
 * Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section and the <a href="/documentation/filter.html#filter-on-product-model-properties">Filter on product model properties</a> section
 */
attributes?: string;
/**
 * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
 */
pagination_type?: GetProductModelsPaginationType;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
/**
 * Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
 */
with_quality_scores?: boolean;
};

export type GetMediaFilesCodeDownload404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCodeDownload403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCodeDownload401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFilesCode200AllOfFour = {
  /** Media file code */
  code?: string;
  /** Extension of the media file */
  extension?: string;
  /** Mime type of the media file */
  mime_type?: string;
  /** Original filename of the media file */
  original_filename?: string;
  /** Size of the media file */
  size?: number;
};

export type GetMediaFilesCode200 = GetMediaFilesCode200AllOf & GetMediaFilesCode200AllOfFour;

export type _GetMediaFilesCode200AllOfLinksDownload = {
  /** URI to download the binaries of the media file */
  href?: string;
};

export type _GetMediaFilesCode200AllOfLinks = {
  download?: _GetMediaFilesCode200AllOfLinksDownload;
};

export type GetMediaFilesCode200AllOf = {
  _links?: _GetMediaFilesCode200AllOfLinks;
};

export type PostMediaFiles422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostMediaFiles415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostMediaFiles403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostMediaFiles401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostMediaFiles400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostMediaFilesBody = {
  /** The binaries of the file */
  file: Blob;
  /** The product to which the media file will be associated. It is a JSON string that follows this format '{"identifier":"product_identifier", "attribute":"attribute_code", "scope":"channel_code","locale":"locale_code"}'. You have to either use this field or the `product_model` field, but not both at the same time. */
  product?: string;
  /** The product model to which the media file will be associated. It is a JSON string that follows this format '{"code":"product_model_code", "attribute":"attribute_code", "scope":"channel_code","locale":"locale_code"}'. You have to either use this field or the `product` field, but not both at the same time. */
  product_model?: string;
};

export type PostMediaFilesHeaders = {
/**
 * Equal to 'multipart/form-data', no other value allowed
 */
'Content-type': string;
};

export type GetMediaFiles406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFiles403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFiles401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetMediaFiles200OneAllOfSeven = {
  _embedded?: _GetMediaFiles200OneAllOfSevenEmbedded;
};

export type GetMediaFiles200One = GetMediaFiles200OneAllOf & GetMediaFiles200OneAllOfSeven;

export type _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfFive = {
  /** Media file code */
  code?: string;
  /** Extension of the media file */
  extension?: string;
  /** Mime type of the media file */
  mime_type?: string;
  /** Original filename of the media file */
  original_filename?: string;
  /** Size of the media file */
  size?: number;
};

export type _GetMediaFiles200OneAllOfSevenEmbeddedItemsItem = _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOf & _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfFive;

export type _GetMediaFiles200OneAllOfSevenEmbedded = {
  items?: _GetMediaFiles200OneAllOfSevenEmbeddedItemsItem[];
};

export type _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI to get the metadata of the media file */
  href?: string;
};

export type _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfLinksDownload = {
  /** URI to download the binaries of the media file */
  href?: string;
};

export type _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  download?: _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfLinksDownload;
  self?: _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetMediaFiles200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type _GetMediaFiles200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetMediaFiles200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetMediaFiles200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetMediaFiles200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetMediaFiles200OneAllOfLinks = {
  first?: _GetMediaFiles200OneAllOfLinksFirst;
  next?: _GetMediaFiles200OneAllOfLinksNext;
  previous?: _GetMediaFiles200OneAllOfLinksPrevious;
  self?: _GetMediaFiles200OneAllOfLinksSelf;
};

export type GetMediaFiles200OneAllOf = {
  _links?: _GetMediaFiles200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type GetMediaFilesParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PatchMeasurementFamilies415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchMeasurementFamilies413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchMeasurementFamilies401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchMeasurementFamilies200ItemErrorsItem = {
  message?: string;
  property?: string;
};

export type PatchMeasurementFamilies200Item = {
  /** Resource code */
  code?: string;
  /** List of errors */
  errors?: PatchMeasurementFamilies200ItemErrorsItem[];
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

export type PatchMeasurementFamiliesBodyItem = {
  /** Measurement family code */
  code: string;
  /** Measurement family labels for each locale */
  labels?: PatchMeasurementFamiliesBodyItemLabels;
  /** Unit code used as the standard unit for this measurement family */
  standard_unit_code: string;
  /** Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  units: PatchMeasurementFamiliesBodyItemUnits;
};

/**
 * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type PatchMeasurementFamiliesBodyItemUnitsUnitCodeLabels = {
  /** Unit label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Operator for a conversion operation to convert the unit in the standard unit
 */
export type PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItemOperator = typeof PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItemOperator[keyof typeof PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItemOperator];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItemOperator = {
  mul: 'mul',
  div: 'div',
  add: 'add',
  sub: 'sub',
} as const;

export type PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItem = {
  /** Operator for a conversion operation to convert the unit in the standard unit */
  operator?: PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItemOperator;
  /** Value for a conversion operation to convert the unit in the standard unit */
  value?: string;
};

export type PatchMeasurementFamiliesBodyItemUnitsUnitCode = {
  /** Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  code?: string;
  /** Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  convert_from_standard?: PatchMeasurementFamiliesBodyItemUnitsUnitCodeConvertFromStandardItem[];
  /** Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  labels?: PatchMeasurementFamiliesBodyItemUnitsUnitCodeLabels;
  /** Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  symbol?: string;
};

/**
 * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type PatchMeasurementFamiliesBodyItemUnits = {
  unitCode?: PatchMeasurementFamiliesBodyItemUnitsUnitCode;
};

/**
 * Measurement family labels for each locale
 */
export type PatchMeasurementFamiliesBodyItemLabels = {
  /** Measurement family label for the locale `localeCode` */
  localeCode?: string;
};

export type MeasurementFamiliesGetList406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasurementFamiliesGetList401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasurementFamiliesGetList200 = {
  /** Measurement family code */
  code: string;
  /** Measurement family labels for each locale */
  labels?: MeasurementFamiliesGetList200Labels;
  /** Unit code used as the standard unit for this measurement family */
  standard_unit_code: string;
  /** Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  units: MeasurementFamiliesGetList200Units;
};

/**
 * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type MeasurementFamiliesGetList200UnitsUnitCodeLabels = {
  /** Unit label for the locale `localeCode` */
  localeCode?: string;
};

export type MeasurementFamiliesGetList200UnitsUnitCode = {
  /** Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  code?: string;
  /** Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  convert_from_standard?: MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItem[];
  /** Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  labels?: MeasurementFamiliesGetList200UnitsUnitCodeLabels;
  /** Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  symbol?: string;
};

/**
 * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type MeasurementFamiliesGetList200Units = {
  unitCode?: MeasurementFamiliesGetList200UnitsUnitCode;
};

/**
 * Operator for a conversion operation to convert the unit in the standard unit
 */
export type MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItemOperator = typeof MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItemOperator[keyof typeof MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItemOperator];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItemOperator = {
  mul: 'mul',
  div: 'div',
  add: 'add',
  sub: 'sub',
} as const;

export type MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItem = {
  /** Operator for a conversion operation to convert the unit in the standard unit */
  operator?: MeasurementFamiliesGetList200UnitsUnitCodeConvertFromStandardItemOperator;
  /** Value for a conversion operation to convert the unit in the standard unit */
  value?: string;
};

/**
 * Measurement family labels for each locale
 */
export type MeasurementFamiliesGetList200Labels = {
  /** Measurement family label for the locale `localeCode` */
  localeCode?: string;
};

export type MeasureFamiliesGet406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasureFamiliesGet404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasureFamiliesGet403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasureFamiliesGet401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Mathematic operation to convert the unit into the standard unit
 */
export type MeasureFamiliesGet200UnitsItemConvert = { [key: string]: unknown };

export type MeasureFamiliesGet200UnitsItem = {
  /** Measure code */
  code?: string;
  /** Mathematic operation to convert the unit into the standard unit */
  convert?: MeasureFamiliesGet200UnitsItemConvert;
  /** Measure symbol */
  symbol?: string;
};

export type MeasureFamiliesGet200 = {
  /** Measure family code */
  code: string;
  /** Measure family standard */
  standard?: string;
  /** Family units */
  units?: MeasureFamiliesGet200UnitsItem[];
};

export type MeasureFamiliesGetList406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasureFamiliesGetList403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type MeasureFamiliesGetList401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _MeasureFamiliesGetList200OneAllOfSevenEmbedded = {
  items?: _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItem[];
};

export type MeasureFamiliesGetList200OneAllOfSeven = {
  _embedded?: _MeasureFamiliesGetList200OneAllOfSevenEmbedded;
};

export type MeasureFamiliesGetList200One = MeasureFamiliesGetList200OneAllOf & MeasureFamiliesGetList200OneAllOfSeven;

/**
 * Mathematic operation to convert the unit into the standard unit
 */
export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourUnitsItemConvert = { [key: string]: unknown };

export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourUnitsItem = {
  /** Measure code */
  code?: string;
  /** Mathematic operation to convert the unit into the standard unit */
  convert?: _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourUnitsItemConvert;
  /** Measure symbol */
  symbol?: string;
};

export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Measure family code */
  code: string;
  /** Measure family standard */
  standard?: string;
  /** Family units */
  units?: _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourUnitsItem[];
};

export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItem = _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOf & _MeasureFamiliesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _MeasureFamiliesGetList200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _MeasureFamiliesGetList200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _MeasureFamiliesGetList200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _MeasureFamiliesGetList200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _MeasureFamiliesGetList200OneAllOfLinks = {
  first?: _MeasureFamiliesGetList200OneAllOfLinksFirst;
  next?: _MeasureFamiliesGetList200OneAllOfLinksNext;
  previous?: _MeasureFamiliesGetList200OneAllOfLinksPrevious;
  self?: _MeasureFamiliesGetList200OneAllOfLinksSelf;
};

export type MeasureFamiliesGetList200OneAllOf = {
  _links?: _MeasureFamiliesGetList200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type GetLocalesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocalesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocalesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocalesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocalesCode200 = {
  /** Locale code */
  code: string;
  /** Whether the locale is enabled */
  enabled?: boolean;
};

export type GetLocales406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocales403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocales401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetLocales200One = GetLocales200OneAllOf & GetLocales200OneAllOfSeven;

export type _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Locale code */
  code: string;
  /** Whether the locale is enabled */
  enabled?: boolean;
};

export type _GetLocales200OneAllOfSevenEmbeddedItemsItem = _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOf & _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetLocales200OneAllOfSevenEmbedded = {
  items?: _GetLocales200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetLocales200OneAllOfSeven = {
  _embedded?: _GetLocales200OneAllOfSevenEmbedded;
};

export type _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetLocales200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetLocales200OneAllOf = {
  _links?: _GetLocales200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetLocales200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetLocales200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetLocales200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetLocales200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetLocales200OneAllOfLinks = {
  first?: _GetLocales200OneAllOfLinksFirst;
  next?: _GetLocales200OneAllOfLinksNext;
  previous?: _GetLocales200OneAllOfLinksPrevious;
  self?: _GetLocales200OneAllOfLinksSelf;
};

export type GetLocalesParams = {
/**
 * Filter locales, for more details see the <a href="/documentation/filter.html">Filters</a> section
 */
search?: string;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PatchFamiliesFamilyCodeVariantsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariantsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariantsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariantsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariantsCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Enrichment level
 */
export type PatchFamiliesFamilyCodeVariantsCodeBodyVariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type PatchFamiliesFamilyCodeVariantsCodeBodyLabels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchFamiliesFamilyCodeVariantsCodeBody = {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: PatchFamiliesFamilyCodeVariantsCodeBodyLabels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: PatchFamiliesFamilyCodeVariantsCodeBodyVariantAttributeSetsItem[];
};

export type GetFamiliesFamilyCodeVariantsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesFamilyCodeVariantsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesFamilyCodeVariantsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesFamilyCodeVariantsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Enrichment level
 */
export type GetFamiliesFamilyCodeVariantsCode200VariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type GetFamiliesFamilyCodeVariantsCode200Labels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export type GetFamiliesFamilyCodeVariantsCode200 = {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: GetFamiliesFamilyCodeVariantsCode200Labels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: GetFamiliesFamilyCodeVariantsCode200VariantAttributeSetsItem[];
};

export type PostFamiliesFamilyCodeVariants422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamiliesFamilyCodeVariants415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamiliesFamilyCodeVariants403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamiliesFamilyCodeVariants401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamiliesFamilyCodeVariants400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Enrichment level
 */
export type PostFamiliesFamilyCodeVariantsBodyVariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type PostFamiliesFamilyCodeVariantsBodyLabels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export type PostFamiliesFamilyCodeVariantsBody = {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: PostFamiliesFamilyCodeVariantsBodyLabels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: PostFamiliesFamilyCodeVariantsBodyVariantAttributeSetsItem[];
};

export type PatchFamiliesFamilyCodeVariants415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariants413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariants403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariants401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariants200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Enrichment level
 */
export type PatchFamiliesFamilyCodeVariantsBodyVariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type PatchFamiliesFamilyCodeVariantsBodyLabels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchFamiliesFamilyCodeVariantsBody = {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: PatchFamiliesFamilyCodeVariantsBodyLabels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: PatchFamiliesFamilyCodeVariantsBodyVariantAttributeSetsItem[];
};

export type GetFamiliesFamilyCodeVariants406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesFamilyCodeVariants403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesFamilyCodeVariants401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItem = _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOf & _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbedded = {
  items?: _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetFamiliesFamilyCodeVariants200OneAllOfSeven = {
  _embedded?: _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbedded;
};

export type GetFamiliesFamilyCodeVariants200One = GetFamiliesFamilyCodeVariants200OneAllOf & GetFamiliesFamilyCodeVariants200OneAllOfSeven;

/**
 * Enrichment level
 */
export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfFourVariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfFourVariantAttributeSetsItem[];
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetFamiliesFamilyCodeVariants200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetFamiliesFamilyCodeVariants200OneAllOf = {
  _links?: _GetFamiliesFamilyCodeVariants200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetFamiliesFamilyCodeVariants200OneAllOfLinks = {
  first?: _GetFamiliesFamilyCodeVariants200OneAllOfLinksFirst;
  next?: _GetFamiliesFamilyCodeVariants200OneAllOfLinksNext;
  previous?: _GetFamiliesFamilyCodeVariants200OneAllOfLinksPrevious;
  self?: _GetFamiliesFamilyCodeVariants200OneAllOfLinksSelf;
};

export type GetFamiliesFamilyCodeVariantsParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PatchFamiliesCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamiliesCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Family labels for each locale
 */
export type PatchFamiliesCodeBodyLabels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type PatchFamiliesCodeBodyAttributeRequirements = {
  channelCode?: string[];
};

export type PatchFamiliesCodeBody = {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: PatchFamiliesCodeBodyAttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: PatchFamiliesCodeBodyLabels;
};

export type GetFamiliesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamiliesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Family labels for each locale
 */
export type GetFamiliesCode200Labels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type GetFamiliesCode200AttributeRequirements = {
  channelCode?: string[];
};

export type GetFamiliesCode200 = {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: GetFamiliesCode200AttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: GetFamiliesCode200Labels;
};

export type PostFamilies422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamilies415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamilies403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamilies401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostFamilies400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Family labels for each locale
 */
export type PostFamiliesBodyLabels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type PostFamiliesBodyAttributeRequirements = {
  channelCode?: string[];
};

export type PostFamiliesBody = {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: PostFamiliesBodyAttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: PostFamiliesBodyLabels;
};

export type PatchFamilies415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamilies413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamilies403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamilies401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchFamilies200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Family labels for each locale
 */
export type PatchFamiliesBodyLabels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type PatchFamiliesBodyAttributeRequirements = {
  channelCode?: string[];
};

export type PatchFamiliesBody = {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: PatchFamiliesBodyAttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: PatchFamiliesBodyLabels;
};

export type GetFamilies406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamilies403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetFamilies401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetFamilies200OneAllOfSevenEmbedded = {
  items?: _GetFamilies200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetFamilies200OneAllOfSeven = {
  _embedded?: _GetFamilies200OneAllOfSevenEmbedded;
};

export type GetFamilies200One = GetFamilies200OneAllOf & GetFamilies200OneAllOfSeven;

/**
 * Family labels for each locale
 */
export type _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfFourAttributeRequirements = {
  channelCode?: string[];
};

export type _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfFourAttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
};

export type _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type _GetFamilies200OneAllOfSevenEmbeddedItemsItem = _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOf & _GetFamilies200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetFamilies200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetFamilies200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetFamilies200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetFamilies200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetFamilies200OneAllOfLinks = {
  first?: _GetFamilies200OneAllOfLinksFirst;
  next?: _GetFamilies200OneAllOfLinksNext;
  previous?: _GetFamilies200OneAllOfLinksPrevious;
  self?: _GetFamilies200OneAllOfLinksSelf;
};

export type GetFamilies200OneAllOf = {
  _links?: _GetFamilies200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type GetFamiliesParams = {
/**
 * Filter families, for more details see the <a href="/documentation/filter.html#filter-families">Filters</a> section.
 */
search?: string;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type CurrenciesGet406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGet404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGet403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGet401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGet200 = {
  /** Currency code */
  code: string;
  /** Whether the currency is enabled */
  enabled?: boolean;
};

export type CurrenciesGetList406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGetList403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGetList401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type CurrenciesGetList200One = CurrenciesGetList200OneAllOf & CurrenciesGetList200OneAllOfSeven;

export type _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Currency code */
  code: string;
  /** Whether the currency is enabled */
  enabled?: boolean;
};

export type _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItem = _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOf & _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _CurrenciesGetList200OneAllOfSevenEmbedded = {
  items?: _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItem[];
};

export type CurrenciesGetList200OneAllOfSeven = {
  _embedded?: _CurrenciesGetList200OneAllOfSevenEmbedded;
};

export type _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _CurrenciesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type CurrenciesGetList200OneAllOf = {
  _links?: _CurrenciesGetList200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _CurrenciesGetList200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _CurrenciesGetList200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _CurrenciesGetList200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _CurrenciesGetList200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _CurrenciesGetList200OneAllOfLinks = {
  first?: _CurrenciesGetList200OneAllOfLinksFirst;
  next?: _CurrenciesGetList200OneAllOfLinksNext;
  previous?: _CurrenciesGetList200OneAllOfLinksPrevious;
  self?: _CurrenciesGetList200OneAllOfLinksSelf;
};

export type CurrenciesGetListParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type ChannelsPatch422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPatch415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPatch403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPatch401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPatch400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Channel labels for each locale
 */
export type ChannelsPatchBodyLabels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type ChannelsPatchBodyConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export type ChannelsPatchBody = {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: ChannelsPatchBodyConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: ChannelsPatchBodyLabels;
  /** Codes of activated locales for the channel */
  locales: string[];
};

export type GetChannelsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetChannelsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetChannelsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetChannelsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Channel labels for each locale
 */
export type GetChannelsCode200Labels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type GetChannelsCode200ConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export type GetChannelsCode200 = {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: GetChannelsCode200ConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: GetChannelsCode200Labels;
  /** Codes of activated locales for the channel */
  locales: string[];
};

export type ChannelsPost422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPost415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPost403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPost401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type ChannelsPost400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Channel labels for each locale
 */
export type ChannelsPostBodyLabels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type ChannelsPostBodyConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export type ChannelsPostBody = {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: ChannelsPostBodyConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: ChannelsPostBodyLabels;
  /** Codes of activated locales for the channel */
  locales: string[];
};

export type SeveralChannelsPatch415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralChannelsPatch413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralChannelsPatch403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralChannelsPatch401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralChannelsPatch200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Channel labels for each locale
 */
export type SeveralChannelsPatchBodyLabels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type SeveralChannelsPatchBodyConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export type SeveralChannelsPatchBody = {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: SeveralChannelsPatchBodyConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: SeveralChannelsPatchBodyLabels;
  /** Codes of activated locales for the channel */
  locales: string[];
};

export type GetChannels406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetChannels403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetChannels401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetChannels200OneAllOfSevenEmbedded = {
  items?: _GetChannels200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetChannels200OneAllOfSeven = {
  _embedded?: _GetChannels200OneAllOfSevenEmbedded;
};

export type GetChannels200One = GetChannels200OneAllOf & GetChannels200OneAllOfSeven;

/**
 * Channel labels for each locale
 */
export type _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfFourConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export type _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfFourConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** Codes of activated locales for the channel */
  locales: string[];
};

export type _GetChannels200OneAllOfSevenEmbeddedItemsItem = _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOf & _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetChannels200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetChannels200OneAllOf = {
  _links?: _GetChannels200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetChannels200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetChannels200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetChannels200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetChannels200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetChannels200OneAllOfLinks = {
  first?: _GetChannels200OneAllOfLinksFirst;
  next?: _GetChannels200OneAllOfLinksNext;
  previous?: _GetChannels200OneAllOfLinksPrevious;
  self?: _GetChannels200OneAllOfLinksSelf;
};

export type GetChannelsParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type GetCategoryMediaFilesCodeDownload404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategoryMediaFilesCodeDownload403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategoryMediaFilesCodeDownload401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategoriesCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategoriesCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategoriesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategoriesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategoriesCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute value
 */
export type PatchCategoriesCodeBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type PatchCategoriesCodeBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: PatchCategoriesCodeBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Attribute values
 */
export type PatchCategoriesCodeBodyValues = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: PatchCategoriesCodeBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

/**
 * Category labels for each locale
 */
export type PatchCategoriesCodeBodyLabels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchCategoriesCodeBody = {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: PatchCategoriesCodeBodyLabels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: PatchCategoriesCodeBodyValues;
};

export type GetCategoriesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategoriesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategoriesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategoriesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute values
 */
export type GetCategoriesCode200Values = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: GetCategoriesCode200ValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

export type GetCategoriesCode200 = {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: GetCategoriesCode200Labels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: GetCategoriesCode200Values;
};

/**
 * Attribute value
 */
export type GetCategoriesCode200ValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type GetCategoriesCode200ValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: GetCategoriesCode200ValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Category labels for each locale
 */
export type GetCategoriesCode200Labels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export type GetCategoriesCodeParams = {
/**
 * Return information about category position into its category tree (only available since the 7.0 version)
 */
with_position?: boolean;
/**
 * Return attribute values of the category (only available on SaaS platforms) <strong>[COMING SOON]<strong>
 */
with_enriched_attributes?: boolean;
};

export type PostCategories422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostCategories415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostCategories403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostCategories401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostCategories400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute value
 */
export type PostCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type PostCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: PostCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Attribute values
 */
export type PostCategoriesBodyValues = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: PostCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

/**
 * Category labels for each locale
 */
export type PostCategoriesBodyLabels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export type PostCategoriesBody = {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: PostCategoriesBodyLabels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: PostCategoriesBodyValues;
};

export type PatchCategories415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategories413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategories403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategories401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchCategories200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Attribute value
 */
export type PatchCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type PatchCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: PatchCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Attribute values
 */
export type PatchCategoriesBodyValues = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: PatchCategoriesBodyValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

/**
 * Category labels for each locale
 */
export type PatchCategoriesBodyLabels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchCategoriesBody = {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: PatchCategoriesBodyLabels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: PatchCategoriesBodyValues;
};

export type GetCategories406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategories403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetCategories401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetCategories200OneAllOfSevenEmbedded = {
  items?: _GetCategories200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetCategories200OneAllOfSeven = {
  _embedded?: _GetCategories200OneAllOfSevenEmbedded;
};

export type GetCategories200One = GetCategories200OneAllOf & GetCategories200OneAllOfSeven;

/**
 * Attribute value
 */
export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Attribute values
 */
export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourValues = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

/**
 * Category labels for each locale
 */
export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourValues;
};

export type _GetCategories200OneAllOfSevenEmbeddedItemsItem = _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOf & _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetCategories200OneAllOf = {
  _links?: _GetCategories200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetCategories200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetCategories200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetCategories200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetCategories200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetCategories200OneAllOfLinks = {
  first?: _GetCategories200OneAllOfLinksFirst;
  next?: _GetCategories200OneAllOfLinksNext;
  previous?: _GetCategories200OneAllOfLinksPrevious;
  self?: _GetCategories200OneAllOfLinksSelf;
};

export type GetCategoriesParams = {
/**
 * Filter categories, for more details see the <a href="/documentation/filter.html#filter-categories">Filters</a> section.
 */
search?: string;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
/**
 * Return information about category position into its category tree (only available since the 7.0 version)
 */
with_position?: boolean;
/**
 * Return attribute values of the category (only available on SaaS platforms)
 */
with_enriched_attributes?: boolean;
};

export type GetAppCatalogProductsUuid404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProductsUuid403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProductsUuid401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProducts404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProducts403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProducts401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetAppCatalogProducts200AllOfSixEmbedded = {
  items?: string[];
};

export type GetAppCatalogProducts200AllOfSix = {
  _embedded?: _GetAppCatalogProducts200AllOfSixEmbedded;
};

export type GetAppCatalogProducts200 = GetAppCatalogProducts200AllOf & GetAppCatalogProducts200AllOfSix;

export type _GetAppCatalogProducts200AllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAppCatalogProducts200AllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAppCatalogProducts200AllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAppCatalogProducts200AllOfLinks = {
  first?: _GetAppCatalogProducts200AllOfLinksFirst;
  next?: _GetAppCatalogProducts200AllOfLinksNext;
  self?: _GetAppCatalogProducts200AllOfLinksSelf;
};

export type GetAppCatalogProducts200AllOf = {
  _links?: _GetAppCatalogProducts200AllOfLinks;
};

export type GetAppCatalogProductsParams = {
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
 */
updated_before?: string;
/**
 * Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
 */
updated_after?: string;
};

export type GetAppCatalogProductUuids404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProductUuids403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogProductUuids401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetAppCatalogProductUuids200AllOfSixEmbedded = {
  items?: string[];
};

export type GetAppCatalogProductUuids200AllOfSix = {
  _embedded?: _GetAppCatalogProductUuids200AllOfSixEmbedded;
};

export type GetAppCatalogProductUuids200 = GetAppCatalogProductUuids200AllOf & GetAppCatalogProductUuids200AllOfSix;

export type _GetAppCatalogProductUuids200AllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAppCatalogProductUuids200AllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAppCatalogProductUuids200AllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAppCatalogProductUuids200AllOfLinks = {
  first?: _GetAppCatalogProductUuids200AllOfLinksFirst;
  next?: _GetAppCatalogProductUuids200AllOfLinksNext;
  self?: _GetAppCatalogProductUuids200AllOfLinksSelf;
};

export type GetAppCatalogProductUuids200AllOf = {
  _links?: _GetAppCatalogProductUuids200AllOfLinks;
};

export type GetAppCatalogProductUuidsParams = {
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
 */
updated_before?: string;
/**
 * Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
 */
updated_after?: string;
};

export type PatchAppCatalog422 = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAppCatalog415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAppCatalog404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAppCatalog403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAppCatalog401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAppCatalog200 = {
  /** Whether the catalog is enabled or not */
  enabled?: boolean;
  /** Catalog id */
  id?: string;
  /** Catalog name */
  name?: string;
};

export type GetAppCatalog404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalog403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalog401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalog200 = {
  /** Whether the catalog is enabled or not */
  enabled?: boolean;
  /** Catalog id */
  id?: string;
  /** Catalog name */
  name?: string;
};

export type DeleteAppCatalog404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteAppCatalog403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteAppCatalog401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAppCatalog422 = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAppCatalog415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAppCatalog403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAppCatalog401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAppCatalog201 = {
  /** Whether the catalog is enabled or not */
  enabled?: boolean;
  /** Catalog id */
  id?: string;
  /** Catalog name */
  name?: string;
};

export type GetAppCatalogs403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAppCatalogs401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetAppCatalogs200AllOfSevenEmbedded = {
  items?: _GetAppCatalogs200AllOfSevenEmbeddedItemsItem[];
};

export type GetAppCatalogs200AllOfSeven = {
  _embedded?: _GetAppCatalogs200AllOfSevenEmbedded;
};

export type GetAppCatalogs200 = GetAppCatalogs200AllOf & GetAppCatalogs200AllOfSeven;

export type _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Whether the catalog is enabled or not */
  enabled?: boolean;
  /** Catalog id */
  id?: string;
  /** Catalog name */
  name?: string;
};

export type _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type _GetAppCatalogs200AllOfSevenEmbeddedItemsItem = _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOf & _GetAppCatalogs200AllOfSevenEmbeddedItemsItemAllOfFour;

export type GetAppCatalogs200AllOf = {
  _links?: _GetAppCatalogs200AllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetAppCatalogs200AllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAppCatalogs200AllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetAppCatalogs200AllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAppCatalogs200AllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAppCatalogs200AllOfLinks = {
  first?: _GetAppCatalogs200AllOfLinksFirst;
  next?: _GetAppCatalogs200AllOfLinksNext;
  previous?: _GetAppCatalogs200AllOfLinksPrevious;
  self?: _GetAppCatalogs200AllOfLinksSelf;
};

export type GetAppCatalogsParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
};

export type PatchAttributesCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type PatchAttributesCodeBodyType = typeof PatchAttributesCodeBodyType[keyof typeof PatchAttributesCodeBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAttributesCodeBodyType = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

/**
 * User defined validation constraints on the cell content
 */
export type PatchAttributesCodeBodyTableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type PatchAttributesCodeBodyTableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type PatchAttributesCodeBodyTableConfigurationItemDataType = typeof PatchAttributesCodeBodyTableConfigurationItemDataType[keyof typeof PatchAttributesCodeBodyTableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAttributesCodeBodyTableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type PatchAttributesCodeBodyTableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: PatchAttributesCodeBodyTableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: PatchAttributesCodeBodyTableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: PatchAttributesCodeBodyTableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type PatchAttributesCodeBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type PatchAttributesCodeBodyGroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAttributesCodeBody = {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: PatchAttributesCodeBodyGroupLabels;
  /** Attribute labels for each locale */
  labels?: PatchAttributesCodeBodyLabels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: PatchAttributesCodeBodyTableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: PatchAttributesCodeBodyType;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
};

export type GetAttributesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type GetAttributesCode200Type = typeof GetAttributesCode200Type[keyof typeof GetAttributesCode200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAttributesCode200Type = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

export type GetAttributesCode200 = {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: GetAttributesCode200GroupLabels;
  /** Attribute labels for each locale */
  labels?: GetAttributesCode200Labels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: GetAttributesCode200TableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: GetAttributesCode200Type;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
};

/**
 * User defined validation constraints on the cell content
 */
export type GetAttributesCode200TableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type GetAttributesCode200TableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type GetAttributesCode200TableConfigurationItemDataType = typeof GetAttributesCode200TableConfigurationItemDataType[keyof typeof GetAttributesCode200TableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAttributesCode200TableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type GetAttributesCode200TableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: GetAttributesCode200TableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: GetAttributesCode200TableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: GetAttributesCode200TableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type GetAttributesCode200Labels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type GetAttributesCode200GroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAttributesCodeParams = {
/**
 * Return the options of 'select' column types (of a table attribute) in the response. (Only available since the 7.0 version)
 */
with_table_select_options?: boolean;
};

export type PatchAttributesAttributeCodeOptionsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptionsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptionsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptionsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptionsCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute option labels for each locale
 */
export type PatchAttributesAttributeCodeOptionsCodeBodyLabels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAttributesAttributeCodeOptionsCodeBody = {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: PatchAttributesAttributeCodeOptionsCodeBodyLabels;
  /** Order of attribute option */
  sort_order?: number;
};

export type GetAttributesAttributeCodeOptionsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesAttributeCodeOptionsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesAttributeCodeOptionsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesAttributeCodeOptionsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute option labels for each locale
 */
export type GetAttributesAttributeCodeOptionsCode200Labels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAttributesAttributeCodeOptionsCode200 = {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: GetAttributesAttributeCodeOptionsCode200Labels;
  /** Order of attribute option */
  sort_order?: number;
};

export type PostAttributesAttributeCodeOptions422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributesAttributeCodeOptions415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributesAttributeCodeOptions403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributesAttributeCodeOptions401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributesAttributeCodeOptions400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute option labels for each locale
 */
export type PostAttributesAttributeCodeOptionsBodyLabels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export type PostAttributesAttributeCodeOptionsBody = {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: PostAttributesAttributeCodeOptionsBodyLabels;
  /** Order of attribute option */
  sort_order?: number;
};

export type PatchAttributesAttributeCodeOptions415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptions413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptions403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptions401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributesAttributeCodeOptions200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Attribute option labels for each locale
 */
export type PatchAttributesAttributeCodeOptionsBodyLabels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAttributesAttributeCodeOptionsBody = {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: PatchAttributesAttributeCodeOptionsBodyLabels;
  /** Order of attribute option */
  sort_order?: number;
};

export type GetAttributesAttributeCodeOptions406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesAttributeCodeOptions403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesAttributeCodeOptions401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributesAttributeCodeOptions200OneAllOfSeven = {
  _embedded?: _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbedded;
};

export type GetAttributesAttributeCodeOptions200One = GetAttributesAttributeCodeOptions200OneAllOf & GetAttributesAttributeCodeOptions200OneAllOfSeven;

/**
 * Attribute option labels for each locale
 */
export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** Order of attribute option */
  sort_order?: number;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItem = _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOf & _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbedded = {
  items?: _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItem[];
};

export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetAttributesAttributeCodeOptions200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetAttributesAttributeCodeOptions200OneAllOf = {
  _links?: _GetAttributesAttributeCodeOptions200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAttributesAttributeCodeOptions200OneAllOfLinks = {
  first?: _GetAttributesAttributeCodeOptions200OneAllOfLinksFirst;
  next?: _GetAttributesAttributeCodeOptions200OneAllOfLinksNext;
  previous?: _GetAttributesAttributeCodeOptions200OneAllOfLinksPrevious;
  self?: _GetAttributesAttributeCodeOptions200OneAllOfLinksSelf;
};

export type GetAttributesAttributeCodeOptionsParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PostAttributes422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributes415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributes403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributes401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAttributes400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type PostAttributesBodyType = typeof PostAttributesBodyType[keyof typeof PostAttributesBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAttributesBodyType = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

export type PostAttributesBody = {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: PostAttributesBodyGroupLabels;
  /** Attribute labels for each locale */
  labels?: PostAttributesBodyLabels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: PostAttributesBodyTableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: PostAttributesBodyType;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
};

/**
 * User defined validation constraints on the cell content
 */
export type PostAttributesBodyTableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type PostAttributesBodyTableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type PostAttributesBodyTableConfigurationItemDataType = typeof PostAttributesBodyTableConfigurationItemDataType[keyof typeof PostAttributesBodyTableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAttributesBodyTableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type PostAttributesBodyTableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: PostAttributesBodyTableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: PostAttributesBodyTableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: PostAttributesBodyTableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type PostAttributesBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type PostAttributesBodyGroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAttributes415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributes413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributes403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributes401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAttributes200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type PatchAttributesBodyType = typeof PatchAttributesBodyType[keyof typeof PatchAttributesBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAttributesBodyType = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

/**
 * User defined validation constraints on the cell content
 */
export type PatchAttributesBodyTableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type PatchAttributesBodyTableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type PatchAttributesBodyTableConfigurationItemDataType = typeof PatchAttributesBodyTableConfigurationItemDataType[keyof typeof PatchAttributesBodyTableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAttributesBodyTableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type PatchAttributesBodyTableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: PatchAttributesBodyTableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: PatchAttributesBodyTableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: PatchAttributesBodyTableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type PatchAttributesBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type PatchAttributesBodyGroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAttributesBody = {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: PatchAttributesBodyGroupLabels;
  /** Attribute labels for each locale */
  labels?: PatchAttributesBodyLabels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: PatchAttributesBodyTableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: PatchAttributesBodyType;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
};

export type GetAttributes406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributes403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAttributes401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetAttributes200OneAllOfSevenEmbeddedItemsItem = _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOf & _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetAttributes200OneAllOfSevenEmbedded = {
  items?: _GetAttributes200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetAttributes200OneAllOfSeven = {
  _embedded?: _GetAttributes200OneAllOfSevenEmbedded;
};

export type GetAttributes200One = GetAttributes200OneAllOf & GetAttributes200OneAllOfSeven;

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourType = typeof _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourType[keyof typeof _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourType = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

/**
 * User defined validation constraints on the cell content
 */
export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemDataType = typeof _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemDataType[keyof typeof _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourGroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourGroupLabels;
  /** Attribute labels for each locale */
  labels?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourTableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfFourType;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
};

export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetAttributes200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetAttributes200OneAllOf = {
  _links?: _GetAttributes200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetAttributes200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAttributes200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetAttributes200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAttributes200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAttributes200OneAllOfLinks = {
  first?: _GetAttributes200OneAllOfLinksFirst;
  next?: _GetAttributes200OneAllOfLinksNext;
  previous?: _GetAttributes200OneAllOfLinksPrevious;
  self?: _GetAttributes200OneAllOfLinksSelf;
};

export type GetAttributesParams = {
/**
 * Filter attributes, for more details see the <a href="/documentation/filter.html#filter-attributes">Filters</a> section.
 */
search?: string;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
/**
 * Return the options of 'select' column types (of a table attribute) in the response. (Only available since the 7.0 version)
 */
with_table_select_options?: boolean;
};

export type AttributeGroupsPatch422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPatch415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPatch403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPatch401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPatch400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute group labels for each locale
 */
export type AttributeGroupsPatchBodyLabels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export type AttributeGroupsPatchBody = {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: AttributeGroupsPatchBodyLabels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
};

export type AttributeGroupsGet406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsGet404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsGet403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsGet401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute group labels for each locale
 */
export type AttributeGroupsGet200Labels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export type AttributeGroupsGet200 = {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: AttributeGroupsGet200Labels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
};

export type AttributeGroupsPost422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPost415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPost403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPost401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsPost400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute group labels for each locale
 */
export type AttributeGroupsPostBodyLabels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export type AttributeGroupsPostBody = {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: AttributeGroupsPostBodyLabels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
};

export type SeveralAttributeGroupsPatch415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAttributeGroupsPatch413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAttributeGroupsPatch403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAttributeGroupsPatch401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAttributeGroupsPatch200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Attribute group labels for each locale
 */
export type SeveralAttributeGroupsPatchBodyLabels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export type SeveralAttributeGroupsPatchBody = {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: SeveralAttributeGroupsPatchBodyLabels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
};

export type AttributeGroupsGetList406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsGetList403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AttributeGroupsGetList401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _AttributeGroupsGetList200OneAllOfSevenEmbedded = {
  items?: _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItem[];
};

export type AttributeGroupsGetList200OneAllOfSeven = {
  _embedded?: _AttributeGroupsGetList200OneAllOfSevenEmbedded;
};

export type AttributeGroupsGetList200One = AttributeGroupsGetList200OneAllOf & AttributeGroupsGetList200OneAllOfSeven;

/**
 * Attribute group labels for each locale
 */
export type _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export type _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
};

export type _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItem = _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOf & _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _AttributeGroupsGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type AttributeGroupsGetList200OneAllOf = {
  _links?: _AttributeGroupsGetList200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _AttributeGroupsGetList200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _AttributeGroupsGetList200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _AttributeGroupsGetList200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _AttributeGroupsGetList200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _AttributeGroupsGetList200OneAllOfLinks = {
  first?: _AttributeGroupsGetList200OneAllOfLinksFirst;
  next?: _AttributeGroupsGetList200OneAllOfLinksNext;
  previous?: _AttributeGroupsGetList200OneAllOfLinksPrevious;
  self?: _AttributeGroupsGetList200OneAllOfLinksSelf;
};

export type AttributeGroupsGetListParams = {
/**
 * Filter attribute groups, for more details see the <a href="/documentation/filter.html#filter-attribute-groups">Filters</a> section.
 */
search?: string;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type AssociationTypesPatch422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPatch415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPatch403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPatch401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPatch400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Association type labels for each locale
 */
export type AssociationTypesPatchBodyLabels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export type AssociationTypesPatchBody = {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: AssociationTypesPatchBodyLabels;
};

export type AssociationTypesGet406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesGet404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesGet403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesGet401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Association type labels for each locale
 */
export type AssociationTypesGet200Labels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export type AssociationTypesGet200 = {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: AssociationTypesGet200Labels;
};

export type AssociationTypesPost422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPost415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPost403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPost401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesPost400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Association type labels for each locale
 */
export type AssociationTypesPostBodyLabels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export type AssociationTypesPostBody = {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: AssociationTypesPostBodyLabels;
};

export type SeveralAssociationTypesPatch415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAssociationTypesPatch413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAssociationTypesPatch403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAssociationTypesPatch401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type SeveralAssociationTypesPatch200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Association type labels for each locale
 */
export type SeveralAssociationTypesPatchBodyLabels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export type SeveralAssociationTypesPatchBody = {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: SeveralAssociationTypesPatchBodyLabels;
};

export type AssociationTypesGetList406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesGetList403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesGetList401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type AssociationTypesGetList200One = AssociationTypesGetList200OneAllOf & AssociationTypesGetList200OneAllOfSeven;

/**
 * Association type labels for each locale
 */
export type _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export type _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
};

export type _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItem = _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOf & _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _AssociationTypesGetList200OneAllOfSevenEmbedded = {
  items?: _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItem[];
};

export type AssociationTypesGetList200OneAllOfSeven = {
  _embedded?: _AssociationTypesGetList200OneAllOfSevenEmbedded;
};

export type _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type _AssociationTypesGetList200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type AssociationTypesGetList200OneAllOf = {
  _links?: _AssociationTypesGetList200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _AssociationTypesGetList200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _AssociationTypesGetList200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _AssociationTypesGetList200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _AssociationTypesGetList200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _AssociationTypesGetList200OneAllOfLinks = {
  first?: _AssociationTypesGetList200OneAllOfLinksFirst;
  next?: _AssociationTypesGetList200OneAllOfLinksNext;
  previous?: _AssociationTypesGetList200OneAllOfLinksPrevious;
  self?: _AssociationTypesGetList200OneAllOfLinksSelf;
};

export type AssociationTypesGetListParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PatchPamAssetsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssetsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssetsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssetsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssetsCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssetsCodeBodyVariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _PatchPamAssetsCodeBodyVariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export type PatchPamAssetsCodeBody = {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: PatchPamAssetsCodeBodyReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: PatchPamAssetsCodeBodyVariationFilesItem[];
};

export type _PatchPamAssetsCodeBodyVariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _PatchPamAssetsCodeBodyVariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _PatchPamAssetsCodeBodyVariationFilesItemLink = {
  download?: _PatchPamAssetsCodeBodyVariationFilesItemLinkDownload;
  self?: _PatchPamAssetsCodeBodyVariationFilesItemLinkSelf;
};

export type _PatchPamAssetsCodeBodyReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _PatchPamAssetsCodeBodyReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _PatchPamAssetsCodeBodyReferenceFilesItemLink = {
  download?: _PatchPamAssetsCodeBodyReferenceFilesItemLinkDownload;
  self?: _PatchPamAssetsCodeBodyReferenceFilesItemLinkSelf;
};

export type PatchPamAssetsCodeBodyReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _PatchPamAssetsCodeBodyReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type GetPamAssetsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPamAssetsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPamAssetsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPamAssetsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetPamAssetsCode200VariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _GetPamAssetsCode200VariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _GetPamAssetsCode200VariationFilesItemLink = {
  download?: _GetPamAssetsCode200VariationFilesItemLinkDownload;
  self?: _GetPamAssetsCode200VariationFilesItemLinkSelf;
};

export type GetPamAssetsCode200VariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _GetPamAssetsCode200VariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export type GetPamAssetsCode200ReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _GetPamAssetsCode200ReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type GetPamAssetsCode200 = {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: GetPamAssetsCode200ReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: GetPamAssetsCode200VariationFilesItem[];
};

export type _GetPamAssetsCode200ReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _GetPamAssetsCode200ReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _GetPamAssetsCode200ReferenceFilesItemLink = {
  download?: _GetPamAssetsCode200ReferenceFilesItemLinkDownload;
  self?: _GetPamAssetsCode200ReferenceFilesItemLinkSelf;
};

export type GetVariationFilesChannelCodeLocaleCodeDownload404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCodeDownload403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCodeDownload401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCodeHeaders = {
/**
 * Equal to 'multipart/form-data', no other value allowed
 */
'Content-type': string;
};

export type GetVariationFilesChannelCodeLocaleCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetVariationFilesChannelCodeLocaleCode200LinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _GetVariationFilesChannelCodeLocaleCode200Link = {
  download?: _GetVariationFilesChannelCodeLocaleCode200LinkDownload;
};

export type GetVariationFilesChannelCodeLocaleCode200 = {
  /** Links to get and download the reference file */
  _link?: _GetVariationFilesChannelCodeLocaleCode200Link;
  /** Code of the PAM asset variation file */
  code?: string;
  /** Locale of the PAM asset variation file, equal to `null` if the asset is not localizable */
  locale?: string;
  /** Channel of the PAM asset variation file */
  scope?: string;
};

export type GetReferenceFilesChannelCodeLocaleCodeDownload404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceFilesChannelCodeLocaleCodeDownload403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceFilesChannelCodeLocaleCodeDownload401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostReferenceFilesLocaleCode201ErrorsItem = {
  /** Channel for which the variation file generation failed */
  channel?: string;
  /** Locale for which the variation file generation failed */
  locale?: string;
  /** Message explaining why the variation file generation failed */
  message?: string;
};

export type PostReferenceFilesLocaleCode201 = {
  errors?: PostReferenceFilesLocaleCode201ErrorsItem[];
  /** Message explaining the warning */
  message?: string;
};

export type PostReferenceFilesLocaleCodeHeaders = {
/**
 * Equal to 'multipart/form-data', no other value allowed
 */
'Content-type': string;
};

export type GetReferenceFilesLocaleCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceFilesLocaleCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceFilesLocaleCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetReferenceFilesLocaleCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetReferenceFilesLocaleCode200LinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _GetReferenceFilesLocaleCode200Link = {
  download?: _GetReferenceFilesLocaleCode200LinkDownload;
};

export type GetReferenceFilesLocaleCode200 = {
  /** Links to get and download the reference file */
  _link?: _GetReferenceFilesLocaleCode200Link;
  /** Code of the PAM asset reference file */
  code?: string;
  /** Locale of the PAM asset reference file, equal to `null` if the asset is not localizable */
  locale?: string;
};

export type PostPamAssets422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostPamAssets415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostPamAssets403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostPamAssets401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostPamAssets400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostPamAssetsBodyVariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _PostPamAssetsBodyVariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export type PostPamAssetsBody = {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: PostPamAssetsBodyReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: PostPamAssetsBodyVariationFilesItem[];
};

export type _PostPamAssetsBodyVariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _PostPamAssetsBodyVariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _PostPamAssetsBodyVariationFilesItemLink = {
  download?: _PostPamAssetsBodyVariationFilesItemLinkDownload;
  self?: _PostPamAssetsBodyVariationFilesItemLinkSelf;
};

export type _PostPamAssetsBodyReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _PostPamAssetsBodyReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _PostPamAssetsBodyReferenceFilesItemLink = {
  download?: _PostPamAssetsBodyReferenceFilesItemLinkDownload;
  self?: _PostPamAssetsBodyReferenceFilesItemLinkSelf;
};

export type PostPamAssetsBodyReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _PostPamAssetsBodyReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type PatchPamAssets415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssets413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssets403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssets401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchPamAssets200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

export type _PatchPamAssetsBodyVariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _PatchPamAssetsBodyVariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _PatchPamAssetsBodyVariationFilesItemLink = {
  download?: _PatchPamAssetsBodyVariationFilesItemLinkDownload;
  self?: _PatchPamAssetsBodyVariationFilesItemLinkSelf;
};

export type PatchPamAssetsBodyVariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _PatchPamAssetsBodyVariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export type PatchPamAssetsBodyReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _PatchPamAssetsBodyReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type PatchPamAssetsBody = {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: PatchPamAssetsBodyReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: PatchPamAssetsBodyVariationFilesItem[];
};

export type _PatchPamAssetsBodyReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _PatchPamAssetsBodyReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _PatchPamAssetsBodyReferenceFilesItemLink = {
  download?: _PatchPamAssetsBodyReferenceFilesItemLinkDownload;
  self?: _PatchPamAssetsBodyReferenceFilesItemLinkSelf;
};

export type GetPamAssets406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPamAssets403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetPamAssets401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetPamAssets200OneAllOfSevenEmbedded = {
  items?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetPamAssets200OneAllOfSeven = {
  _embedded?: _GetPamAssets200OneAllOfSevenEmbedded;
};

export type GetPamAssets200One = GetPamAssets200OneAllOf & GetPamAssets200OneAllOfSeven;

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItemLink = {
  download?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItemLinkDownload;
  self?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItemLinkSelf;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourVariationFilesItem[];
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItem = _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOf & _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItemLink = {
  download?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItemLinkDownload;
  self?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfFourReferenceFilesItemLinkSelf;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetPamAssets200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetPamAssets200OneAllOf = {
  _links?: _GetPamAssets200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetPamAssets200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetPamAssets200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetPamAssets200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetPamAssets200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetPamAssets200OneAllOfLinks = {
  first?: _GetPamAssets200OneAllOfLinksFirst;
  next?: _GetPamAssets200OneAllOfLinksNext;
  previous?: _GetPamAssets200OneAllOfLinksPrevious;
  self?: _GetPamAssets200OneAllOfLinksSelf;
};

export type GetPamAssetsPaginationType = typeof GetPamAssetsPaginationType[keyof typeof GetPamAssetsPaginationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPamAssetsPaginationType = {
  page: 'page',
  search_after: 'search_after',
} as const;

export type GetPamAssetsParams = {
/**
 * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
 */
pagination_type?: GetPamAssetsPaginationType;
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type PatchAssetTagsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetTagsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetTagsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetTagsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetTagsCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetTagsCodeBody = {
  /** PAM asset tag code */
  code: string;
};

export type GetAssetTagsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetTagsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetTagsCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetTagsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetTagsCode200 = {
  /** PAM asset tag code */
  code: string;
};

export type GetAssetTags406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetTags403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetTags401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** PAM asset tag code */
  code: string;
};

export type _GetAssetTags200OneAllOfSevenEmbeddedItemsItem = _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOf & _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetAssetTags200OneAllOfSevenEmbedded = {
  items?: _GetAssetTags200OneAllOfSevenEmbeddedItemsItem[];
};

export type GetAssetTags200OneAllOfSeven = {
  _embedded?: _GetAssetTags200OneAllOfSevenEmbedded;
};

export type GetAssetTags200One = GetAssetTags200OneAllOf & GetAssetTags200OneAllOfSeven;

export type _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetAssetTags200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type GetAssetTags200OneAllOf = {
  _links?: _GetAssetTags200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type _GetAssetTags200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAssetTags200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetAssetTags200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAssetTags200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAssetTags200OneAllOfLinks = {
  first?: _GetAssetTags200OneAllOfLinksFirst;
  next?: _GetAssetTags200OneAllOfLinksNext;
  previous?: _GetAssetTags200OneAllOfLinksPrevious;
  self?: _GetAssetTags200OneAllOfLinksSelf;
};

export type GetAssetTagsParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type GetAssetMediaFilesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetMediaFilesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetMediaFiles422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetMediaFiles415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetMediaFiles401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetMediaFilesHeaders = {
/**
 * Equal to 'multipart/form-data', no other value allowed
 */
'Content-type': string;
};

export type PatchAssetFamilyCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetFamilyCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetFamilyCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetFamilyCodeBody = {
  /** Attribute code that is used as the main media of the asset family. */
  attribute_as_main_media?: string;
  /** Asset family code */
  code: string;
  /** Asset family labels for each locale */
  labels?: PatchAssetFamilyCodeBodyLabels;
  /** The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>. */
  naming_convention?: PatchAssetFamilyCodeBodyNamingConvention;
  /** The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>. */
  product_link_rules?: PatchAssetFamilyCodeBodyProductLinkRulesItem[];
  /** The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>. */
  transformations?: PatchAssetFamilyCodeBodyTransformationsItem[];
};

/**
 * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
 */
export type PatchAssetFamilyCodeBodyTransformationsItemTarget = {
  attribute: string;
  channel: string;
  locale: string;
};

/**
 * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
 */
export type PatchAssetFamilyCodeBodyTransformationsItemSource = {
  attribute: string;
  channel: string;
  locale: string;
};

export type PatchAssetFamilyCodeBodyTransformationsItem = {
  /** The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_prefix?: string;
  /** The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_suffix?: string;
  /** The name of the transformation */
  label: string;
  /** The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>. */
  operations: PatchAssetFamilyCodeBodyTransformationsItemOperations;
  /** The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>. */
  source: PatchAssetFamilyCodeBodyTransformationsItemSource;
  /** The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>. */
  target: PatchAssetFamilyCodeBodyTransformationsItemTarget;
};

export type PatchAssetFamilyCodeBodyTransformationsItemOperationsParameters = {
  colorspace?: string;
  height?: number;
  quality?: number;
  ratio?: number;
  'resolution-unit'?: string;
  'resolution-x'?: number;
  'resolution-y'?: number;
  width?: number;
};

/**
 * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
 */
export type PatchAssetFamilyCodeBodyTransformationsItemOperations = {
  parameters?: PatchAssetFamilyCodeBodyTransformationsItemOperationsParameters;
  type?: string;
};

export type PatchAssetFamilyCodeBodyProductLinkRulesItemProductSelectionsItem = {
  channel?: string;
  field: string;
  locale?: string;
  operator: string;
  value: string;
};

export type PatchAssetFamilyCodeBodyProductLinkRulesItemAssignAssetsToItem = {
  attribute: string;
  channel?: string;
  locale?: string;
  mode: string;
};

export type PatchAssetFamilyCodeBodyProductLinkRulesItem = {
  /** The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>. */
  assign_assets_to?: PatchAssetFamilyCodeBodyProductLinkRulesItemAssignAssetsToItem[];
  /** The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>. */
  product_selections?: PatchAssetFamilyCodeBodyProductLinkRulesItemProductSelectionsItem[];
};

/**
 * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
 */
export type PatchAssetFamilyCodeBodyNamingConventionSource = { [key: string]: unknown };

/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
 */
export type PatchAssetFamilyCodeBodyNamingConvention = {
  /** Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>. */
  abort_asset_creation_on_error?: boolean;
  /** The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>. */
  pattern?: string;
  /** The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>. */
  source?: PatchAssetFamilyCodeBodyNamingConventionSource;
};

/**
 * Asset family labels for each locale
 */
export type PatchAssetFamilyCodeBodyLabels = {
  /** Asset family label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAssetFamilyCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamilyCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamilyCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
 */
export type GetAssetFamilyCode200TransformationsItemTarget = {
  attribute: string;
  channel: string;
  locale: string;
};

/**
 * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
 */
export type GetAssetFamilyCode200TransformationsItemSource = {
  attribute: string;
  channel: string;
  locale: string;
};

export type GetAssetFamilyCode200TransformationsItem = {
  /** The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_prefix?: string;
  /** The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_suffix?: string;
  /** The name of the transformation */
  label: string;
  /** The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>. */
  operations: GetAssetFamilyCode200TransformationsItemOperations;
  /** The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>. */
  source: GetAssetFamilyCode200TransformationsItemSource;
  /** The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>. */
  target: GetAssetFamilyCode200TransformationsItemTarget;
};

export type GetAssetFamilyCode200 = {
  /** Attribute code that is used as the main media of the asset family. */
  attribute_as_main_media?: string;
  /** Asset family code */
  code: string;
  /** Asset family labels for each locale */
  labels?: GetAssetFamilyCode200Labels;
  /** The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>. */
  naming_convention?: GetAssetFamilyCode200NamingConvention;
  /** The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>. */
  product_link_rules?: GetAssetFamilyCode200ProductLinkRulesItem[];
  /** The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>. */
  transformations?: GetAssetFamilyCode200TransformationsItem[];
};

export type GetAssetFamilyCode200TransformationsItemOperationsParameters = {
  colorspace?: string;
  height?: number;
  quality?: number;
  ratio?: number;
  'resolution-unit'?: string;
  'resolution-x'?: number;
  'resolution-y'?: number;
  width?: number;
};

/**
 * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
 */
export type GetAssetFamilyCode200TransformationsItemOperations = {
  parameters?: GetAssetFamilyCode200TransformationsItemOperationsParameters;
  type?: string;
};

export type GetAssetFamilyCode200ProductLinkRulesItemProductSelectionsItem = {
  channel?: string;
  field: string;
  locale?: string;
  operator: string;
  value: string;
};

export type GetAssetFamilyCode200ProductLinkRulesItemAssignAssetsToItem = {
  attribute: string;
  channel?: string;
  locale?: string;
  mode: string;
};

export type GetAssetFamilyCode200ProductLinkRulesItem = {
  /** The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>. */
  assign_assets_to?: GetAssetFamilyCode200ProductLinkRulesItemAssignAssetsToItem[];
  /** The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>. */
  product_selections?: GetAssetFamilyCode200ProductLinkRulesItemProductSelectionsItem[];
};

/**
 * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
 */
export type GetAssetFamilyCode200NamingConventionSource = { [key: string]: unknown };

/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
 */
export type GetAssetFamilyCode200NamingConvention = {
  /** Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>. */
  abort_asset_creation_on_error?: boolean;
  /** The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>. */
  pattern?: string;
  /** The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>. */
  source?: GetAssetFamilyCode200NamingConventionSource;
};

/**
 * Asset family labels for each locale
 */
export type GetAssetFamilyCode200Labels = {
  /** Asset family label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAssetFamilyAttributesCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetFamilyAttributesCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetFamilyAttributesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type PatchAssetFamilyAttributesCodeBodyValidationRule = typeof PatchAssetFamilyAttributesCodeBodyValidationRule[keyof typeof PatchAssetFamilyAttributesCodeBodyValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAssetFamilyAttributesCodeBodyValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
 */
export type PatchAssetFamilyAttributesCodeBodyType = typeof PatchAssetFamilyAttributesCodeBodyType[keyof typeof PatchAssetFamilyAttributesCodeBodyType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAssetFamilyAttributesCodeBodyType = {
  text: 'text',
  media_link: 'media_link',
  number: 'number',
  media_file: 'media_file',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
  boolean: 'boolean',
} as const;

/**
 * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
 */
export type PatchAssetFamilyAttributesCodeBodyMediaType = typeof PatchAssetFamilyAttributesCodeBodyMediaType[keyof typeof PatchAssetFamilyAttributesCodeBodyMediaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PatchAssetFamilyAttributesCodeBodyMediaType = {
  image: 'image',
  pdf: 'pdf',
  youtube: 'youtube',
  vimeo: 'vimeo',
  other: 'other',
} as const;

/**
 * Attribute labels for each locale
 */
export type PatchAssetFamilyAttributesCodeBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAssetFamilyAttributesCodeBody = {
  /** Extensions allowed when the attribute type is `media_file` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be in read only mode only in the UI, but you can still update it with the API */
  is_read_only?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: PatchAssetFamilyAttributesCodeBodyLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `media_file` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file. */
  media_type: PatchAssetFamilyAttributesCodeBodyMediaType;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media */
  prefix?: string;
  /** Suffix of the `media_link` attribute type. The common url suffix for the media */
  suffix?: string;
  /** Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details. */
  type: PatchAssetFamilyAttributesCodeBodyType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: PatchAssetFamilyAttributesCodeBodyValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type GetAssetFamilyAttributesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamilyAttributesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamilyAttributesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type GetAssetFamilyAttributesCode200ValidationRule = typeof GetAssetFamilyAttributesCode200ValidationRule[keyof typeof GetAssetFamilyAttributesCode200ValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAssetFamilyAttributesCode200ValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
 */
export type GetAssetFamilyAttributesCode200Type = typeof GetAssetFamilyAttributesCode200Type[keyof typeof GetAssetFamilyAttributesCode200Type];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAssetFamilyAttributesCode200Type = {
  text: 'text',
  media_link: 'media_link',
  number: 'number',
  media_file: 'media_file',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
  boolean: 'boolean',
} as const;

/**
 * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
 */
export type GetAssetFamilyAttributesCode200MediaType = typeof GetAssetFamilyAttributesCode200MediaType[keyof typeof GetAssetFamilyAttributesCode200MediaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAssetFamilyAttributesCode200MediaType = {
  image: 'image',
  pdf: 'pdf',
  youtube: 'youtube',
  vimeo: 'vimeo',
  other: 'other',
} as const;

/**
 * Attribute labels for each locale
 */
export type GetAssetFamilyAttributesCode200Labels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAssetFamilyAttributesCode200 = {
  /** Extensions allowed when the attribute type is `media_file` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be in read only mode only in the UI, but you can still update it with the API */
  is_read_only?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: GetAssetFamilyAttributesCode200Labels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `media_file` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file. */
  media_type: GetAssetFamilyAttributesCode200MediaType;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media */
  prefix?: string;
  /** Suffix of the `media_link` attribute type. The common url suffix for the media */
  suffix?: string;
  /** Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details. */
  type: GetAssetFamilyAttributesCode200Type;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: GetAssetFamilyAttributesCode200ValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type PatchAssetAttributesAttributeCodeOptionsCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetAttributesAttributeCodeOptionsCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetAttributesAttributeCodeOptionsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute labels for each locale
 */
export type PatchAssetAttributesAttributeCodeOptionsCodeBodyLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAssetAttributesAttributeCodeOptionsCodeBody = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: PatchAssetAttributesAttributeCodeOptionsCodeBodyLabels;
};

export type GetAssetAttributesAttributeCodeOptionsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetAttributesAttributeCodeOptionsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetAttributesAttributeCodeOptionsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute labels for each locale
 */
export type GetAssetAttributesAttributeCodeOptionsCode200Labels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAssetAttributesAttributeCodeOptionsCode200 = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: GetAssetAttributesAttributeCodeOptionsCode200Labels;
};

export type GetAssetFamilyAttributesAttributeCodeOptions406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamilyAttributesAttributeCodeOptions401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Attribute labels for each locale
 */
export type GetAssetFamilyAttributesAttributeCodeOptions200ItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAssetFamilyAttributesAttributeCodeOptions200Item = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: GetAssetFamilyAttributesAttributeCodeOptions200ItemLabels;
};

export type GetAssetFamiliesCodeAttributes406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamiliesCodeAttributes401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type GetAssetFamiliesCodeAttributes200ItemValidationRule = typeof GetAssetFamiliesCodeAttributes200ItemValidationRule[keyof typeof GetAssetFamiliesCodeAttributes200ItemValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAssetFamiliesCodeAttributes200ItemValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
 */
export type GetAssetFamiliesCodeAttributes200ItemType = typeof GetAssetFamiliesCodeAttributes200ItemType[keyof typeof GetAssetFamiliesCodeAttributes200ItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAssetFamiliesCodeAttributes200ItemType = {
  text: 'text',
  media_link: 'media_link',
  number: 'number',
  media_file: 'media_file',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
  boolean: 'boolean',
} as const;

/**
 * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
 */
export type GetAssetFamiliesCodeAttributes200ItemMediaType = typeof GetAssetFamiliesCodeAttributes200ItemMediaType[keyof typeof GetAssetFamiliesCodeAttributes200ItemMediaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetAssetFamiliesCodeAttributes200ItemMediaType = {
  image: 'image',
  pdf: 'pdf',
  youtube: 'youtube',
  vimeo: 'vimeo',
  other: 'other',
} as const;

/**
 * Attribute labels for each locale
 */
export type GetAssetFamiliesCodeAttributes200ItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAssetFamiliesCodeAttributes200Item = {
  /** Extensions allowed when the attribute type is `media_file` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be in read only mode only in the UI, but you can still update it with the API */
  is_read_only?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: GetAssetFamiliesCodeAttributes200ItemLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `media_file` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file. */
  media_type: GetAssetFamiliesCodeAttributes200ItemMediaType;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media */
  prefix?: string;
  /** Suffix of the `media_link` attribute type. The common url suffix for the media */
  suffix?: string;
  /** Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details. */
  type: GetAssetFamiliesCodeAttributes200ItemType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: GetAssetFamiliesCodeAttributes200ItemValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type PatchAssetCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchAssetCodeBodyValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchAssetCodeBodyValuesAttributeCodeItem = {
  /** Channel code of the asset attribute value */
  channel?: string;
  /** Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchAssetCodeBodyValuesAttributeCodeItemData;
  /** Locale code of the asset attribute value */
  locale?: string;
};

/**
 * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
 */
export type PatchAssetCodeBodyValues = {
  attributeCode?: PatchAssetCodeBodyValuesAttributeCodeItem[];
};

export type PatchAssetCodeBody = {
  /** Code of the asset */
  code: string;
  /** Date of creation */
  created?: string;
  /** Date of the last update */
  updated?: string;
  /** Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details. */
  values?: PatchAssetCodeBodyValues;
};

export type GetAssetsCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetsCode200 = {
  /** Code of the asset */
  code: string;
  /** Date of creation */
  created?: string;
  /** Date of the last update */
  updated?: string;
  /** Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details. */
  values?: GetAssetsCode200Values;
};

/**
 * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
 */
export type GetAssetsCode200ValuesAttributeCodeItemData = { [key: string]: unknown };

export type GetAssetsCode200ValuesAttributeCodeItem = {
  /** Channel code of the asset attribute value */
  channel?: string;
  /** Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details. */
  data?: GetAssetsCode200ValuesAttributeCodeItemData;
  /** Locale code of the asset attribute value */
  locale?: string;
};

/**
 * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
 */
export type GetAssetsCode200Values = {
  attributeCode?: GetAssetsCode200ValuesAttributeCodeItem[];
};

export type DeleteAssetsCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type DeleteAssetsCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssets415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssets413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssets401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssets400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssets200Item = {
  /** Resource code */
  code?: string;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
 */
export type PatchAssetsBodyItemValues = {
  attributeCode?: PatchAssetsBodyItemValuesAttributeCodeItem[];
};

export type PatchAssetsBodyItem = {
  /** Code of the asset */
  code: string;
  /** Date of creation */
  created?: string;
  /** Date of the last update */
  updated?: string;
  /** Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details. */
  values?: PatchAssetsBodyItemValues;
};

/**
 * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
 */
export type PatchAssetsBodyItemValuesAttributeCodeItemData = { [key: string]: unknown };

export type PatchAssetsBodyItemValuesAttributeCodeItem = {
  /** Channel code of the asset attribute value */
  channel?: string;
  /** Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details. */
  data?: PatchAssetsBodyItemValuesAttributeCodeItemData;
  /** Locale code of the asset attribute value */
  locale?: string;
};

export type GetAssets406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssets401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssets200OneAllOfSix = {
  _embedded?: _GetAssets200OneAllOfSixEmbedded;
};

export type GetAssets200One = GetAssets200OneAllOf & GetAssets200OneAllOfSix;

export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFour = {
  /** Code of the asset */
  code: string;
  /** Date of creation */
  created?: string;
  /** Date of the last update */
  updated?: string;
  /** Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details. */
  values?: _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFourValues;
};

/**
 * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
 */
export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItem = {
  /** Channel code of the asset attribute value */
  channel?: string;
  /** Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details. */
  data?: _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItemData;
  /** Locale code of the asset attribute value */
  locale?: string;
};

/**
 * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
 */
export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFourValues = {
  attributeCode?: _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFourValuesAttributeCodeItem[];
};

export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfLinks = {
  self?: _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAssets200OneAllOfSixEmbeddedItemsItemAllOf = {
  _links?: _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfLinks;
};

export type _GetAssets200OneAllOfSixEmbeddedItemsItem = _GetAssets200OneAllOfSixEmbeddedItemsItemAllOf & _GetAssets200OneAllOfSixEmbeddedItemsItemAllOfFour;

export type _GetAssets200OneAllOfSixEmbedded = {
  _items?: _GetAssets200OneAllOfSixEmbeddedItemsItem[];
};

export type GetAssets200OneAllOf = {
  _links?: _GetAssets200OneAllOfLinks;
};

export type _GetAssets200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAssets200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAssets200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAssets200OneAllOfLinks = {
  first?: _GetAssets200OneAllOfLinksFirst;
  next?: _GetAssets200OneAllOfLinksNext;
  self?: _GetAssets200OneAllOfLinksSelf;
};

export type GetAssetsParams = {
/**
 * Filter assets, for more details see the <a href="/documentation/filter.html#filter-assets">Asset filters</a> section
 */
search?: string;
/**
 * Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the <a href="/documentation/filter.html#asset-values-by-channel">Filter asset values by channel</a> section
 */
channel?: string;
/**
 * Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the <a href="/documentation/filter.html#asset-values-by-locale">Filter asset values by locale</a> section
 */
locales?: string;
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
};

export type GetAssetFamilies406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetFamilies401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItem = _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOf & _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFour;

export type _GetAssetFamilies200OneAllOfSixEmbedded = {
  items?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItem[];
};

export type GetAssetFamilies200OneAllOfSix = {
  _embedded?: _GetAssetFamilies200OneAllOfSixEmbedded;
};

export type GetAssetFamilies200One = GetAssetFamilies200OneAllOf & GetAssetFamilies200OneAllOfSix;

/**
 * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
 */
export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemTarget = {
  attribute: string;
  channel: string;
  locale: string;
};

/**
 * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
 */
export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemSource = {
  attribute: string;
  channel: string;
  locale: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItem = {
  /** The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_prefix?: string;
  /** The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_suffix?: string;
  /** The name of the transformation */
  label: string;
  /** The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>. */
  operations: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemOperations;
  /** The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>. */
  source: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemSource;
  /** The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>. */
  target: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemTarget;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFour = {
  /** Attribute code that is used as the main media of the asset family. */
  attribute_as_main_media?: string;
  /** Asset family code */
  code: string;
  /** Asset family labels for each locale */
  labels?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourLabels;
  /** The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>. */
  naming_convention?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourNamingConvention;
  /** The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>. */
  product_link_rules?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourProductLinkRulesItem[];
  /** The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>. */
  transformations?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItem[];
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemOperationsParameters = {
  colorspace?: string;
  height?: number;
  quality?: number;
  ratio?: number;
  'resolution-unit'?: string;
  'resolution-x'?: number;
  'resolution-y'?: number;
  width?: number;
};

/**
 * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
 */
export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemOperations = {
  parameters?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourTransformationsItemOperationsParameters;
  type?: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourProductLinkRulesItemProductSelectionsItem = {
  channel?: string;
  field: string;
  locale?: string;
  operator: string;
  value: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourProductLinkRulesItemAssignAssetsToItem = {
  attribute: string;
  channel?: string;
  locale?: string;
  mode: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourProductLinkRulesItem = {
  /** The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>. */
  assign_assets_to?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourProductLinkRulesItemAssignAssetsToItem[];
  /** The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>. */
  product_selections?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourProductLinkRulesItemProductSelectionsItem[];
};

/**
 * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
 */
export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourNamingConventionSource = { [key: string]: unknown };

/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
 */
export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourNamingConvention = {
  /** Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>. */
  abort_asset_creation_on_error?: boolean;
  /** The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>. */
  pattern?: string;
  /** The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>. */
  source?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourNamingConventionSource;
};

/**
 * Asset family labels for each locale
 */
export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfFourLabels = {
  /** Asset family label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfLinks = {
  self?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOf = {
  _links?: _GetAssetFamilies200OneAllOfSixEmbeddedItemsItemAllOfLinks;
};

export type GetAssetFamilies200OneAllOf = {
  _links?: _GetAssetFamilies200OneAllOfLinks;
};

export type _GetAssetFamilies200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAssetFamilies200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAssetFamilies200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAssetFamilies200OneAllOfLinks = {
  first?: _GetAssetFamilies200OneAllOfLinksFirst;
  next?: _GetAssetFamilies200OneAllOfLinksNext;
  self?: _GetAssetFamilies200OneAllOfLinksSelf;
};

export type GetAssetFamiliesParams = {
/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
search_after?: string;
};

export type PatchAssetCategoriesCode422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategoriesCode415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategoriesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategoriesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategoriesCode400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * PAM asset category labels for each locale
 */
export type PatchAssetCategoriesCodeBodyLabels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAssetCategoriesCodeBody = {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: PatchAssetCategoriesCodeBodyLabels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
};

export type GetAssetCategoriesCode406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetCategoriesCode404One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetCategoriesCode403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetCategoriesCode401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * PAM asset category labels for each locale
 */
export type GetAssetCategoriesCode200Labels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export type GetAssetCategoriesCode200 = {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: GetAssetCategoriesCode200Labels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
};

export type PostAssetCategories422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetCategories415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetCategories403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetCategories401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostAssetCategories400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * PAM asset category labels for each locale
 */
export type PostAssetCategoriesBodyLabels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export type PostAssetCategoriesBody = {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: PostAssetCategoriesBodyLabels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
};

export type PatchAssetCategories415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategories413One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategories403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategories401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PatchAssetCategories200One = {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

/**
 * PAM asset category labels for each locale
 */
export type PatchAssetCategoriesBodyLabels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export type PatchAssetCategoriesBody = {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: PatchAssetCategoriesBodyLabels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
};

export type GetAssetCategories406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetCategories403One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetCategories401One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type GetAssetCategories200OneAllOfSeven = {
  _embedded?: _GetAssetCategories200OneAllOfSevenEmbedded;
};

export type GetAssetCategories200One = GetAssetCategories200OneAllOf & GetAssetCategories200OneAllOfSeven;

/**
 * PAM asset category labels for each locale
 */
export type _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export type _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFour = {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFourLabels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
};

export type _GetAssetCategories200OneAllOfSevenEmbeddedItemsItem = _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOf & _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfFour;

export type _GetAssetCategories200OneAllOfSevenEmbedded = {
  items?: _GetAssetCategories200OneAllOfSevenEmbeddedItemsItem[];
};

export type _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinks = {
  self?: _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinksSelf;
};

export type _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOf = {
  _links?: _GetAssetCategories200OneAllOfSevenEmbeddedItemsItemAllOfLinks;
};

export type _GetAssetCategories200OneAllOfLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _GetAssetCategories200OneAllOfLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _GetAssetCategories200OneAllOfLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _GetAssetCategories200OneAllOfLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _GetAssetCategories200OneAllOfLinks = {
  first?: _GetAssetCategories200OneAllOfLinksFirst;
  next?: _GetAssetCategories200OneAllOfLinksNext;
  previous?: _GetAssetCategories200OneAllOfLinksPrevious;
  self?: _GetAssetCategories200OneAllOfLinksSelf;
};

export type GetAssetCategories200OneAllOf = {
  _links?: _GetAssetCategories200OneAllOfLinks;
  /** Current page number */
  current_page?: number;
};

export type GetAssetCategoriesParams = {
/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
page?: number;
/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
limit?: number;
/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
with_count?: boolean;
};

export type GetEndpoints406One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * All the availables endpoints
 */
export type GetEndpoints200OneRoutes = { [key: string]: unknown };

/**
 * Endpoint to get the authentication token
 */
export type GetEndpoints200OneAuthentication = { [key: string]: unknown };

export type GetEndpoints200One = {
  /** Endpoint to get the authentication token */
  authentication?: GetEndpoints200OneAuthentication;
  /** Host name */
  host?: string;
  /** All the availables endpoints */
  routes?: GetEndpoints200OneRoutes;
};

export type PostToken422One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostToken415One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostToken400One = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

export type PostToken200One = {
  /** Authentication token that should be given in every authenticated request to the API */
  access_token?: string;
  /** Validity of the token given in seconds, 3600s = 1h by default */
  expires_in?: number;
  /** Use this token when your access token has expired. See <a href="/documentation/authentication.html#refresh-an-expired-token">Refresh an expired token</a> section for more details. */
  refresh_token?: string;
  /** Unused, always equal to "null" */
  scope?: string;
  /** Token type, always equal to "bearer" */
  token_type?: string;
};

export type PostTokenBody = {
  /** Always equal to "password" */
  grant_type: string;
  /** Your PIM password */
  password: string;
  /** Your PIM username */
  username: string;
};

export type PostTokenHeaders = {
/**
 * Equal to 'application/json' or 'application/x-www-form-urlencoded', no other value allowed
 */
'Content-type': string;
/**
 * Equal to 'Basic xx', where 'xx' is the base 64 encoding of the client id and secret. Find out how to generate them in the <a href="/documentation/authentication.html#client-idsecret-generation">Client ID/secret generation</a> section.
 */
Authorization: string;
};

/**
 * Return the options of 'select' column types (of a table attribute) in the response. (Only available since the 7.0 version)
 */
export type WithTableSelectOptionsParameter = boolean;

/**
 * Return product quality scores in the response. (Only available since the 5.0 version)
 */
export type WithQualityScoresProductsParameter = boolean;

/**
 * Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
 */
export type WithQualityScoresProductModelsParameter = boolean;

/**
 * Return information about category position into its category tree (only available since the 7.0 version)
 */
export type WithPositionParameter = boolean;

/**
 * Return attribute values of the category (only available on SaaS platforms) <strong>[COMING SOON]<strong>
 */
export type WithEnrichedAttributesComingSoonParameter = boolean;

/**
 * Return attribute values of the category (only available on SaaS platforms)
 */
export type WithEnrichedAttributesParameter = boolean;

/**
 * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
 */
export type WithCountParameter = boolean;

/**
 * Return product completenesses in the response. (Only available since the 6.0 version)
 */
export type WithCompletenessesParameter = boolean;

/**
 * Return labels of attribute options in the response. (Only available since the 5.0 version)
 */
export type WithAttributeOptionsParameter = boolean;

/**
 * Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
 */
export type UpdatedBeforeParameter = string;

/**
 * Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
 */
export type UpdatedAfterParameter = string;

/**
 * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
 */
export type SearchAfterParameter = string;

export type PaginationTypeParameter = typeof PaginationTypeParameter[keyof typeof PaginationTypeParameter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PaginationTypeParameter = {
  page: 'page',
  search_after: 'search_after',
} as const;

/**
 * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
 */
export type PageParameter = number;

/**
 * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
 */
export type LimitParameter = number;

export type PostAppCatalogBodyBody = {
  /** Catalog name */
  name: string;
};

export type PostReferenceFilesLocaleCodeBodyBody = {
  /** The binaries of the file */
  file: Blob;
};

export type PostAssetMediaFilesBodyBody = {
  /** The binary of the media file */
  file: Blob;
};

/**
 * Submitted
 */
export type SubmittedResponse = void;

/**
 * Created
 */
export type ReferenceEntityMediaFileUploadedResponse = void;

/**
 * No content to return
 */
export type NoContentResponse = void;

export type DeprecatedAssetReferenceFileUploadedResponseErrorsItem = {
  /** Channel for which the variation file generation failed */
  channel?: string;
  /** Locale for which the variation file generation failed */
  locale?: string;
  /** Message explaining why the variation file generation failed */
  message?: string;
};

export type DeprecatedAssetReferenceFileUploadedResponse = {
  errors?: DeprecatedAssetReferenceFileUploadedResponseErrorsItem[];
  /** Message explaining the warning */
  message?: string;
};

/**
 * Created
 */
export type CreatedResponse = void;

/**
 * Created
 */
export type AssetMediaFileUploadedResponse = void;

export type 422ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Unprocessable entity
 */
export type N422ErrorResponse = 422ErrorResponseOne;

export type 415ErrorStreamResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Unsupported Media type
 */
export type N415ErrorStreamResponse = 415ErrorStreamResponseOne;

export type 415ErrorMultipartResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Unsupported Media type
 */
export type N415ErrorMultipartResponse = 415ErrorMultipartResponseOne;

export type 415ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Unsupported Media type
 */
export type N415ErrorResponse = 415ErrorResponseOne;

export type 413ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Request Entity Too Large
 */
export type N413ErrorResponse = 413ErrorResponseOne;

export type 406ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Not Acceptable
 */
export type N406ErrorResponse = 406ErrorResponseOne;

export type 404ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Resource not found
 */
export type N404ErrorResponse = 404ErrorResponseOne;

export type 404CatalogErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Catalog not found
 */
export type N404CatalogErrorResponse = 404CatalogErrorResponseOne;

export type 403ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Access forbidden
 */
export type N403ErrorResponse = 403ErrorResponseOne;

export type 403CatalogErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Access forbidden
 */
export type N403CatalogErrorResponse = 403CatalogErrorResponseOne;

export type 401ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Authentication required
 */
export type N401ErrorResponse = 401ErrorResponseOne;

export type 400ErrorResponseOne = {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
};

/**
 * Bad request
 */
export type N400ErrorResponse = 400ErrorResponseOne;

export interface SearchAfterPagination {
  _links?: _SearchAfterPaginationLinks;
}

export type _SearchAfterPaginationLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _SearchAfterPaginationLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _SearchAfterPaginationLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _SearchAfterPaginationLinks = {
  first?: _SearchAfterPaginationLinksFirst;
  next?: _SearchAfterPaginationLinksNext;
  self?: _SearchAfterPaginationLinksSelf;
};

export type ReferenceEntityRecordListAllOfFour = {
  /** Code of the record */
  code: string;
  /** Date of creation. */
  created?: string;
  /** Date of the last update. */
  updated?: string;
  /** Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details */
  values?: ReferenceEntityRecordListAllOfFourValues;
};

export type ReferenceEntityRecordList = ReferenceEntityRecordListAllOf & ReferenceEntityRecordListAllOfFour;

/**
 * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
 */
export type ReferenceEntityRecordListAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type ReferenceEntityRecordListAllOfFourValuesAttributeCodeItem = {
  /** Channel code of the reference entity record value */
  channel?: string;
  /** Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details. */
  data?: ReferenceEntityRecordListAllOfFourValuesAttributeCodeItemData;
  /** Locale code of the reference entity record value */
  locale?: string;
};

/**
 * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
 */
export type ReferenceEntityRecordListAllOfFourValues = {
  attributeCode?: ReferenceEntityRecordListAllOfFourValuesAttributeCodeItem[];
};

export type _ReferenceEntityRecordListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ReferenceEntityRecordListAllOfLinks = {
  self?: _ReferenceEntityRecordListAllOfLinksSelf;
};

export type ReferenceEntityRecordListAllOf = {
  _links?: _ReferenceEntityRecordListAllOfLinks;
};

export type _ReferenceEntityRecordItemListLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ReferenceEntityRecordItemListLinks = {
  self?: _ReferenceEntityRecordItemListLinksSelf;
};

export interface ReferenceEntityRecordItemList {
  _links?: _ReferenceEntityRecordItemListLinks;
}

/**
 * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
 */
export type ReferenceEntityRecordValuesAttributeCodeItemData = { [key: string]: unknown };

export type ReferenceEntityRecordValuesAttributeCodeItem = {
  /** Channel code of the reference entity record value */
  channel?: string;
  /** Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details. */
  data?: ReferenceEntityRecordValuesAttributeCodeItemData;
  /** Locale code of the reference entity record value */
  locale?: string;
};

/**
 * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
 */
export type ReferenceEntityRecordValues = {
  attributeCode?: ReferenceEntityRecordValuesAttributeCodeItem[];
};

export interface ReferenceEntityRecord {
  /** Code of the record */
  code: string;
  /** Date of creation. */
  created?: string;
  /** Date of the last update. */
  updated?: string;
  /** Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details */
  values?: ReferenceEntityRecordValues;
}

/**
 * Reference entity labels for each locale
 */
export type ReferenceEntityListAllOfFiveLabels = {
  /** Reference entity label for the locale `localeCode` */
  localeCode?: string;
};

export type ReferenceEntityListAllOfFive = {
  /** Reference entity code */
  code: string;
  /** Code of the reference entity image */
  image?: string;
  /** Reference entity labels for each locale */
  labels?: ReferenceEntityListAllOfFiveLabels;
};

export type ReferenceEntityListAllOf = {
  _links?: _ReferenceEntityListAllOfLinks;
};

export type ReferenceEntityList = ReferenceEntityListAllOf & ReferenceEntityListAllOfFive;

export type _ReferenceEntityListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ReferenceEntityListAllOfLinksImageDownload = {
  /** URI to download the binaries of the reference entity image file */
  href?: string;
};

export type _ReferenceEntityListAllOfLinks = {
  image_download?: _ReferenceEntityListAllOfLinksImageDownload;
  self?: _ReferenceEntityListAllOfLinksSelf;
};

export type _ReferenceEntityItemListLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ReferenceEntityItemListLinksImageDownload = {
  /** URI to download the binaries of the reference entity image file */
  href?: string;
};

export type _ReferenceEntityItemListLinks = {
  image_download?: _ReferenceEntityItemListLinksImageDownload;
  self?: _ReferenceEntityItemListLinksSelf;
};

export interface ReferenceEntityItemList {
  _links?: _ReferenceEntityItemListLinks;
}

/**
 * Attribute labels for each locale
 */
export type ReferenceEntityAttributeOptionListItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type ReferenceEntityAttributeOptionListItem = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: ReferenceEntityAttributeOptionListItemLabels;
};

export type ReferenceEntityAttributeOptionList = ReferenceEntityAttributeOptionListItem[];

/**
 * Attribute labels for each locale
 */
export type ReferenceEntityAttributeOptionLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export interface ReferenceEntityAttributeOption {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: ReferenceEntityAttributeOptionLabels;
}

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type ReferenceEntityAttributeListItemValidationRule = typeof ReferenceEntityAttributeListItemValidationRule[keyof typeof ReferenceEntityAttributeListItemValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferenceEntityAttributeListItemValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
 */
export type ReferenceEntityAttributeListItemType = typeof ReferenceEntityAttributeListItemType[keyof typeof ReferenceEntityAttributeListItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferenceEntityAttributeListItemType = {
  text: 'text',
  image: 'image',
  number: 'number',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
} as const;

/**
 * Attribute labels for each locale
 */
export type ReferenceEntityAttributeListItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type ReferenceEntityAttributeListItem = {
  /** Extensions allowed when the attribute type is `image` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: ReferenceEntityAttributeListItemLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `image` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links` */
  reference_entity_code?: string;
  /** Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details. */
  type: ReferenceEntityAttributeListItemType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: ReferenceEntityAttributeListItemValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type ReferenceEntityAttributeList = ReferenceEntityAttributeListItem[];

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type ReferenceEntityAttributeValidationRule = typeof ReferenceEntityAttributeValidationRule[keyof typeof ReferenceEntityAttributeValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferenceEntityAttributeValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
 */
export type ReferenceEntityAttributeType = typeof ReferenceEntityAttributeType[keyof typeof ReferenceEntityAttributeType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReferenceEntityAttributeType = {
  text: 'text',
  image: 'image',
  number: 'number',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
} as const;

/**
 * Attribute labels for each locale
 */
export type ReferenceEntityAttributeLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export interface ReferenceEntityAttribute {
  /** Extensions allowed when the attribute type is `image` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: ReferenceEntityAttributeLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `image` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links` */
  reference_entity_code?: string;
  /** Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details. */
  type: ReferenceEntityAttributeType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: ReferenceEntityAttributeValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
}

/**
 * Reference entity labels for each locale
 */
export type ReferenceEntityAllOfFourLabels = {
  /** Reference entity label for the locale `localeCode` */
  localeCode?: string;
};

export type ReferenceEntityAllOfFour = {
  /** Reference entity code */
  code: string;
  /** Code of the reference entity image */
  image?: string;
  /** Reference entity labels for each locale */
  labels?: ReferenceEntityAllOfFourLabels;
};

export type ReferenceEntity = ReferenceEntityAllOf & ReferenceEntityAllOfFour;

export type _ReferenceEntityAllOfLinksImageDownload = {
  /** URI to download the binaries of the reference entity image file */
  href?: string;
};

export type _ReferenceEntityAllOfLinks = {
  image_download?: _ReferenceEntityAllOfLinksImageDownload;
};

export type ReferenceEntityAllOf = {
  _links?: _ReferenceEntityAllOfLinks;
};

export type PublishedProductList = PublishedProductListAllOf & PublishedProductListAllOfFour;

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type PublishedProductListAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type PublishedProductListAllOfFourValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: PublishedProductListAllOfFourValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PublishedProductListAllOfFourValues = {
  attributeCode?: PublishedProductListAllOfFourValuesAttributeCodeItem[];
};

/**
 * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
 */
export type PublishedProductListAllOfFourQuantifiedAssociations = { [key: string]: unknown };

export type PublishedProductListAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the published product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of published product identifiers with which the published product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups and/or other published products, grouped by association types
 */
export type PublishedProductListAllOfFourAssociations = {
  associationTypeCode?: PublishedProductListAllOfFourAssociationsAssociationTypeCode;
};

export type PublishedProductListAllOfFour = {
  /** Several associations related to groups and/or other published products, grouped by association types */
  associations?: PublishedProductListAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified */
  categories?: string[];
  /** Date of creation */
  created?: string;
  /** Whether the published product is enable */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements */
  family?: string;
  /** Codes of the groups to which the published product belong */
  groups?: string[];
  /** Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** Warning: associations with quantities are not compatible with the published products. The response will always be empty. */
  quantified_associations?: PublishedProductListAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PublishedProductListAllOfFourValues;
};

export type _PublishedProductListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _PublishedProductListAllOfLinks = {
  self?: _PublishedProductListAllOfLinksSelf;
};

export type PublishedProductListAllOf = {
  _links?: _PublishedProductListAllOfLinks;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type PublishedProductValuesAttributeCodeItemData = { [key: string]: unknown };

export type PublishedProductValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: PublishedProductValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type PublishedProductValues = {
  attributeCode?: PublishedProductValuesAttributeCodeItem[];
};

/**
 * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
 */
export type PublishedProductQuantifiedAssociations = { [key: string]: unknown };

export interface PublishedProduct {
  /** Several associations related to groups and/or other published products, grouped by association types */
  associations?: PublishedProductAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified */
  categories?: string[];
  /** Date of creation */
  created?: string;
  /** Whether the published product is enable */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements */
  family?: string;
  /** Codes of the groups to which the published product belong */
  groups?: string[];
  /** Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** Warning: associations with quantities are not compatible with the published products. The response will always be empty. */
  quantified_associations?: PublishedProductQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: PublishedProductValues;
}

export type PublishedProductAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the published product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of published product identifiers with which the published product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups and/or other published products, grouped by association types
 */
export type PublishedProductAssociations = {
  associationTypeCode?: PublishedProductAssociationsAssociationTypeCode;
};

export type ProductUuidList = ProductUuidListAllOf & ProductUuidListAllOfFour;

export type ProductUuidListAllOfFourValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type ProductUuidListAllOfFourValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: ProductUuidListAllOfFourValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type ProductUuidListAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type ProductUuidListAllOfFourValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: ProductUuidListAllOfFourValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: ProductUuidListAllOfFourValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type ProductUuidListAllOfFourValues = {
  attributeCode?: ProductUuidListAllOfFourValuesAttributeCodeItem[];
};

export type ProductUuidListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type ProductUuidListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type ProductUuidListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: ProductUuidListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: ProductUuidListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type ProductUuidListAllOfFourQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: ProductUuidListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type ProductUuidListAllOfFourQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type ProductUuidListAllOfFourMetadataWorkflowStatus = typeof ProductUuidListAllOfFourMetadataWorkflowStatus[keyof typeof ProductUuidListAllOfFourMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductUuidListAllOfFourMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type ProductUuidListAllOfFourMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: ProductUuidListAllOfFourMetadataWorkflowStatus;
};

export type ProductUuidListAllOfFourCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type ProductUuidListAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type ProductUuidListAllOfFourAssociations = {
  associationTypeCode?: ProductUuidListAllOfFourAssociationsAssociationTypeCode;
};

export type ProductUuidListAllOfFour = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: ProductUuidListAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: ProductUuidListAllOfFourCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: ProductUuidListAllOfFourMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: ProductUuidListAllOfFourQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: ProductUuidListAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: ProductUuidListAllOfFourValues;
};

export type _ProductUuidListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ProductUuidListAllOfLinks = {
  self?: _ProductUuidListAllOfLinksSelf;
};

export type ProductUuidListAllOf = {
  _links?: _ProductUuidListAllOfLinks;
};

export interface ProductUuidExamples {}

export type ProductUuidValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type ProductUuidValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: ProductUuidValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type ProductUuidValuesAttributeCodeItemData = { [key: string]: unknown };

export type ProductUuidValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: ProductUuidValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: ProductUuidValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type ProductUuidValues = {
  attributeCode?: ProductUuidValuesAttributeCodeItem[];
};

export interface ProductUuid {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: ProductUuidAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: ProductUuidCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: ProductUuidMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: ProductUuidQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: ProductUuidQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product uuid */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: ProductUuidValues;
}

export type ProductUuidQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  quantity?: number;
  uuid?: string;
};

export type ProductUuidQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: ProductUuidQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product uuids and quantities with which the product is in relation */
  products?: ProductUuidQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type ProductUuidQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: ProductUuidQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type ProductUuidQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type ProductUuidQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type ProductUuidMetadataWorkflowStatus = typeof ProductUuidMetadataWorkflowStatus[keyof typeof ProductUuidMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductUuidMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type ProductUuidMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: ProductUuidMetadataWorkflowStatus;
};

export type ProductUuidCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type ProductUuidAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product uuids with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type ProductUuidAssociations = {
  associationTypeCode?: ProductUuidAssociationsAssociationTypeCode;
};

export type ProductModelList = ProductModelListAllOf & ProductModelListAllOfFour;

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type ProductModelListAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type ProductModelListAllOfFourValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: ProductModelListAllOfFourValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type ProductModelListAllOfFourValues = {
  attributeCode?: ProductModelListAllOfFourValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type ProductModelListAllOfFourQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: ProductModelListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export type ProductModelListAllOfFour = {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: ProductModelListAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: ProductModelListAllOfFourMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: ProductModelListAllOfFourQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: ProductModelListAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: ProductModelListAllOfFourValues;
};

export type ProductModelListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type ProductModelListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type ProductModelListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: ProductModelListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: ProductModelListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type ProductModelListAllOfFourQualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type ProductModelListAllOfFourMetadataWorkflowStatus = typeof ProductModelListAllOfFourMetadataWorkflowStatus[keyof typeof ProductModelListAllOfFourMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductModelListAllOfFourMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type ProductModelListAllOfFourMetadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: ProductModelListAllOfFourMetadataWorkflowStatus;
};

export type ProductModelListAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type ProductModelListAllOfFourAssociations = {
  associationTypeCode?: ProductModelListAllOfFourAssociationsAssociationTypeCode;
};

export type _ProductModelListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ProductModelListAllOfLinks = {
  self?: _ProductModelListAllOfLinksSelf;
};

export type ProductModelListAllOf = {
  _links?: _ProductModelListAllOfLinks;
};

/**
 * <a href='api-reference.html#Productuuid'>Product</a> value
 */
export type ProductModelValuesAttributeCodeItemData = { [key: string]: unknown };

export type ProductModelValuesAttributeCodeItem = {
  /** <a href='api-reference.html#Productuuid'>Product</a> value */
  data?: ProductModelValuesAttributeCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type ProductModelValues = {
  attributeCode?: ProductModelValuesAttributeCodeItem[];
};

export type ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product model is in relation */
  product_models?: ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product model is in relation */
  products?: ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type ProductModelQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: ProductModelQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
 */
export type ProductModelQualityScores = { [key: string]: unknown };

/**
 * Status of the product model regarding the user permissions
 */
export type ProductModelMetadataWorkflowStatus = typeof ProductModelMetadataWorkflowStatus[keyof typeof ProductModelMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductModelMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product model (only available since the v2.3 in the Enterprise Edition)
 */
export type ProductModelMetadata = {
  /** Status of the product model regarding the user permissions */
  workflow_status?: ProductModelMetadataWorkflowStatus;
};

export type ProductModelAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product and/or other product models, grouped by association types
 */
export type ProductModelAssociations = {
  associationTypeCode?: ProductModelAssociationsAssociationTypeCode;
};

export interface ProductModel {
  /** Several associations related to groups, product and/or other product models, grouped by association types */
  associations?: ProductModelAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized */
  categories?: string[];
  /** Product model code */
  code: string;
  /** Date of creation */
  created?: string;
  /** <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2) */
  family?: string;
  /** Family variant code from which the product model inherits its attributes and variant attributes */
  family_variant: string;
  /** More information around the product model (only available since the v2.3 in the Enterprise Edition) */
  metadata?: ProductModelMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3. */
  parent?: string;
  /** Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: ProductModelQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: ProductModelQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: ProductModelValues;
}

export type ProductList = ProductListAllOf & ProductListAllOfFour;

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type ProductListAllOfFourValues = {
  attributeCode?: ProductListAllOfFourValuesAttributeCodeItem[];
};

export type ProductListAllOfFourValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type ProductListAllOfFourValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: ProductListAllOfFourValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type ProductListAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type ProductListAllOfFourValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: ProductListAllOfFourValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: ProductListAllOfFourValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

export type ProductListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type ProductListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type ProductListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: ProductListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: ProductListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type ProductListAllOfFourQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: ProductListAllOfFourQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type ProductListAllOfFourQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type ProductListAllOfFourMetadataWorkflowStatus = typeof ProductListAllOfFourMetadataWorkflowStatus[keyof typeof ProductListAllOfFourMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductListAllOfFourMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type ProductListAllOfFourMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: ProductListAllOfFourMetadataWorkflowStatus;
};

export type ProductListAllOfFourCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type ProductListAllOfFourAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type ProductListAllOfFourAssociations = {
  associationTypeCode?: ProductListAllOfFourAssociationsAssociationTypeCode;
};

export type ProductListAllOfFour = {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: ProductListAllOfFourAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: ProductListAllOfFourCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: ProductListAllOfFourMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: ProductListAllOfFourQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: ProductListAllOfFourQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: ProductListAllOfFourValues;
};

export type _ProductListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ProductListAllOfLinks = {
  self?: _ProductListAllOfLinksSelf;
};

export type ProductListAllOf = {
  _links?: _ProductListAllOfLinks;
};

export interface ProductExamples {}

export type ProductValuesAttributeCodeItemLinkedDataLabels = { [key: string]: unknown };

/**
 * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
 */
export type ProductValuesAttributeCodeItemLinkedData = {
  attribute?: string;
  code?: string;
  labels?: ProductValuesAttributeCodeItemLinkedDataLabels;
};

/**
 * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
 */
export type ProductValuesAttributeCodeItemData = { [key: string]: unknown };

export type ProductValuesAttributeCodeItem = {
  /** Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details. */
  data?: ProductValuesAttributeCodeItemData;
  /** Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details. */
  linked_data?: ProductValuesAttributeCodeItemLinkedData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the product value */
  locale?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the product value */
  scope?: string;
};

/**
 * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
 */
export type ProductValues = {
  attributeCode?: ProductValuesAttributeCodeItem[];
};

/**
 * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
 */
export type ProductQuantifiedAssociations = {
  quantifiedAssociationTypeCode?: ProductQuantifiedAssociationsQuantifiedAssociationTypeCode;
};

export interface Product {
  /** Several associations related to groups, product models and/or other products, grouped by association types */
  associations?: ProductAssociations;
  /** Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified */
  categories?: string[];
  /** Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true") */
  completenesses?: ProductCompletenessesItem[];
  /** Date of creation */
  created?: string;
  /** Whether the product is enabled */
  enabled?: boolean;
  /** <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements. */
  family?: string;
  /** Codes of the groups to which the product belong */
  groups?: string[];
  /** Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute */
  identifier: string;
  /** More information around the product (only available since the v2.0 in the Enterprise Edition) */
  metadata?: ProductMetadata;
  /** Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3. */
  parent?: string;
  /** Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true") */
  quality_scores?: ProductQualityScores;
  /** Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0) */
  quantified_associations?: ProductQuantifiedAssociations;
  /** Date of the last update */
  updated?: string;
  /** Product UUID */
  uuid?: string;
  /** Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details */
  values?: ProductValues;
}

export type ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem = {
  identifier?: string;
  quantity?: number;
};

export type ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem = {
  code?: string;
  quantity?: number;
};

export type ProductQuantifiedAssociationsQuantifiedAssociationTypeCode = {
  /** Array of objects containing product model codes and quantities with which the product is in relation */
  product_models?: ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductModelsItem[];
  /** Array of objects containing product identifiers and quantities with which the product is in relation */
  products?: ProductQuantifiedAssociationsQuantifiedAssociationTypeCodeProductsItem[];
};

/**
 * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
 */
export type ProductQualityScores = { [key: string]: unknown };

/**
 * Status of the product regarding the user permissions
 */
export type ProductMetadataWorkflowStatus = typeof ProductMetadataWorkflowStatus[keyof typeof ProductMetadataWorkflowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProductMetadataWorkflowStatus = {
  read_only: 'read_only',
  draft_in_progress: 'draft_in_progress',
  proposal_waiting_for_approval: 'proposal_waiting_for_approval',
  working_copy: 'working_copy',
} as const;

/**
 * More information around the product (only available since the v2.0 in the Enterprise Edition)
 */
export type ProductMetadata = {
  /** Status of the product regarding the user permissions */
  workflow_status?: ProductMetadataWorkflowStatus;
};

export type ProductCompletenessesItem = {
  data?: number;
  locale?: string;
  scope?: string;
};

export type ProductAssociationsAssociationTypeCode = {
  /** Array of groups codes with which the product is in relation */
  groups?: string[];
  /** Array of product model codes with which the product is in relation (only available since the v2.1) */
  product_models?: string[];
  /** Array of product identifiers with which the product is in relation */
  products?: string[];
};

/**
 * Several associations related to groups, product models and/or other products, grouped by association types
 */
export type ProductAssociations = {
  associationTypeCode?: ProductAssociationsAssociationTypeCode;
};

export interface Pagination {
  _links?: _PaginationLinks;
  /** Current page number */
  current_page?: number;
}

export type _PaginationLinksSelf = {
  /** URI of the current page of resources */
  href?: string;
};

export type _PaginationLinksPrevious = {
  /** URI of the previous page of resources */
  href?: string;
};

export type _PaginationLinksNext = {
  /** URI of the next page of resources */
  href?: string;
};

export type _PaginationLinksFirst = {
  /** URI of the first page of resources */
  href?: string;
};

export type _PaginationLinks = {
  first?: _PaginationLinksFirst;
  next?: _PaginationLinksNext;
  previous?: _PaginationLinksPrevious;
  self?: _PaginationLinksSelf;
};

export type MediaFileListAllOfFive = {
  /** Media file code */
  code?: string;
  /** Extension of the media file */
  extension?: string;
  /** Mime type of the media file */
  mime_type?: string;
  /** Original filename of the media file */
  original_filename?: string;
  /** Size of the media file */
  size?: number;
};

export type MediaFileList = MediaFileListAllOf & MediaFileListAllOfFive;

export type _MediaFileListAllOfLinksSelf = {
  /** URI to get the metadata of the media file */
  href?: string;
};

export type _MediaFileListAllOfLinksDownload = {
  /** URI to download the binaries of the media file */
  href?: string;
};

export type _MediaFileListAllOfLinks = {
  download?: _MediaFileListAllOfLinksDownload;
  self?: _MediaFileListAllOfLinksSelf;
};

export type MediaFileListAllOf = {
  _links?: _MediaFileListAllOfLinks;
};

export type _MediaFileItemListLinksSelf = {
  /** URI to get the metadata of the media file */
  href?: string;
};

export type _MediaFileItemListLinksDownload = {
  /** URI to download the binaries of the media file */
  href?: string;
};

export type _MediaFileItemListLinks = {
  download?: _MediaFileItemListLinksDownload;
  self?: _MediaFileItemListLinksSelf;
};

export interface MediaFileItemList {
  _links?: _MediaFileItemListLinks;
}

export type MediaFileAllOfFour = {
  /** Media file code */
  code?: string;
  /** Extension of the media file */
  extension?: string;
  /** Mime type of the media file */
  mime_type?: string;
  /** Original filename of the media file */
  original_filename?: string;
  /** Size of the media file */
  size?: number;
};

export type MediaFile = MediaFileAllOf & MediaFileAllOfFour;

export type _MediaFileAllOfLinksDownload = {
  /** URI to download the binaries of the media file */
  href?: string;
};

export type _MediaFileAllOfLinks = {
  download?: _MediaFileAllOfLinksDownload;
};

export type MediaFileAllOf = {
  _links?: _MediaFileAllOfLinks;
};

export interface MeasurementFamilyList {
  /** Measurement family code */
  code: string;
  /** Measurement family labels for each locale */
  labels?: MeasurementFamilyListLabels;
  /** Unit code used as the standard unit for this measurement family */
  standard_unit_code: string;
  /** Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  units: MeasurementFamilyListUnits;
}

/**
 * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type MeasurementFamilyListUnitsUnitCodeLabels = {
  /** Unit label for the locale `localeCode` */
  localeCode?: string;
};

export type MeasurementFamilyListUnitsUnitCode = {
  /** Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  code?: string;
  /** Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  convert_from_standard?: MeasurementFamilyListUnitsUnitCodeConvertFromStandardItem[];
  /** Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  labels?: MeasurementFamilyListUnitsUnitCodeLabels;
  /** Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  symbol?: string;
};

/**
 * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type MeasurementFamilyListUnits = {
  unitCode?: MeasurementFamilyListUnitsUnitCode;
};

/**
 * Operator for a conversion operation to convert the unit in the standard unit
 */
export type MeasurementFamilyListUnitsUnitCodeConvertFromStandardItemOperator = typeof MeasurementFamilyListUnitsUnitCodeConvertFromStandardItemOperator[keyof typeof MeasurementFamilyListUnitsUnitCodeConvertFromStandardItemOperator];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MeasurementFamilyListUnitsUnitCodeConvertFromStandardItemOperator = {
  mul: 'mul',
  div: 'div',
  add: 'add',
  sub: 'sub',
} as const;

export type MeasurementFamilyListUnitsUnitCodeConvertFromStandardItem = {
  /** Operator for a conversion operation to convert the unit in the standard unit */
  operator?: MeasurementFamilyListUnitsUnitCodeConvertFromStandardItemOperator;
  /** Value for a conversion operation to convert the unit in the standard unit */
  value?: string;
};

/**
 * Measurement family labels for each locale
 */
export type MeasurementFamilyListLabels = {
  /** Measurement family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type MeasurementFamilyUnits = {
  unitCode?: MeasurementFamilyUnitsUnitCode;
};

/**
 * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
 */
export type MeasurementFamilyUnitsUnitCodeLabels = {
  /** Unit label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Operator for a conversion operation to convert the unit in the standard unit
 */
export type MeasurementFamilyUnitsUnitCodeConvertFromStandardItemOperator = typeof MeasurementFamilyUnitsUnitCodeConvertFromStandardItemOperator[keyof typeof MeasurementFamilyUnitsUnitCodeConvertFromStandardItemOperator];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MeasurementFamilyUnitsUnitCodeConvertFromStandardItemOperator = {
  mul: 'mul',
  div: 'div',
  add: 'add',
  sub: 'sub',
} as const;

export type MeasurementFamilyUnitsUnitCodeConvertFromStandardItem = {
  /** Operator for a conversion operation to convert the unit in the standard unit */
  operator?: MeasurementFamilyUnitsUnitCodeConvertFromStandardItemOperator;
  /** Value for a conversion operation to convert the unit in the standard unit */
  value?: string;
};

export type MeasurementFamilyUnitsUnitCode = {
  /** Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  code?: string;
  /** Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  convert_from_standard?: MeasurementFamilyUnitsUnitCodeConvertFromStandardItem[];
  /** Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  labels?: MeasurementFamilyUnitsUnitCodeLabels;
  /** Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  symbol?: string;
};

/**
 * Measurement family labels for each locale
 */
export type MeasurementFamilyLabels = {
  /** Measurement family label for the locale `localeCode` */
  localeCode?: string;
};

export interface MeasurementFamily {
  /** Measurement family code */
  code: string;
  /** Measurement family labels for each locale */
  labels?: MeasurementFamilyLabels;
  /** Unit code used as the standard unit for this measurement family */
  standard_unit_code: string;
  /** Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>. */
  units: MeasurementFamilyUnits;
}

/**
 * Mathematic operation to convert the unit into the standard unit
 */
export type MeasureFamilyListAllOfFourUnitsItemConvert = { [key: string]: unknown };

export type MeasureFamilyListAllOfFourUnitsItem = {
  /** Measure code */
  code?: string;
  /** Mathematic operation to convert the unit into the standard unit */
  convert?: MeasureFamilyListAllOfFourUnitsItemConvert;
  /** Measure symbol */
  symbol?: string;
};

export type MeasureFamilyListAllOfFour = {
  /** Measure family code */
  code: string;
  /** Measure family standard */
  standard?: string;
  /** Family units */
  units?: MeasureFamilyListAllOfFourUnitsItem[];
};

export type MeasureFamilyList = MeasureFamilyListAllOf & MeasureFamilyListAllOfFour;

export type _MeasureFamilyListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _MeasureFamilyListAllOfLinks = {
  self?: _MeasureFamilyListAllOfLinksSelf;
};

export type MeasureFamilyListAllOf = {
  _links?: _MeasureFamilyListAllOfLinks;
};

/**
 * Mathematic operation to convert the unit into the standard unit
 */
export type MeasureFamilyUnitsItemConvert = { [key: string]: unknown };

export type MeasureFamilyUnitsItem = {
  /** Measure code */
  code?: string;
  /** Mathematic operation to convert the unit into the standard unit */
  convert?: MeasureFamilyUnitsItemConvert;
  /** Measure symbol */
  symbol?: string;
};

export interface MeasureFamily {
  /** Measure family code */
  code: string;
  /** Measure family standard */
  standard?: string;
  /** Family units */
  units?: MeasureFamilyUnitsItem[];
}

export type LocaleListAllOfFour = {
  /** Locale code */
  code: string;
  /** Whether the locale is enabled */
  enabled?: boolean;
};

export type _LocaleListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _LocaleListAllOfLinks = {
  self?: _LocaleListAllOfLinksSelf;
};

export type LocaleListAllOf = {
  _links?: _LocaleListAllOfLinks;
};

export type LocaleList = LocaleListAllOf & LocaleListAllOfFour;

export interface Locale {
  /** Locale code */
  code: string;
  /** Whether the locale is enabled */
  enabled?: boolean;
}

export interface ItemList {
  _links?: _ItemListLinks;
}

export type _ItemListLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ItemListLinks = {
  self?: _ItemListLinksSelf;
};

export type FamilyVariantList = FamilyVariantListAllOf & FamilyVariantListAllOfFour;

/**
 * Enrichment level
 */
export type FamilyVariantListAllOfFourVariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type FamilyVariantListAllOfFourLabels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export type FamilyVariantListAllOfFour = {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: FamilyVariantListAllOfFourLabels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: FamilyVariantListAllOfFourVariantAttributeSetsItem[];
};

export type _FamilyVariantListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _FamilyVariantListAllOfLinks = {
  self?: _FamilyVariantListAllOfLinksSelf;
};

export type FamilyVariantListAllOf = {
  _links?: _FamilyVariantListAllOfLinks;
};

/**
 * Enrichment level
 */
export type FamilyVariantVariantAttributeSetsItem = {
  /** Codes of attributes bind to this enrichment level */
  attributes?: string[];
  /** Codes of attributes used as variant axes */
  axes: string[];
  /** Enrichment level */
  level: number;
};

/**
 * Family variant labels for each locale
 */
export type FamilyVariantLabels = {
  /** Family variant label for the locale `localeCode` */
  localeCode?: string;
};

export interface FamilyVariant {
  /** Family variant code */
  code: string;
  /** Family variant labels for each locale */
  labels?: FamilyVariantLabels;
  /** Attributes distribution according to the enrichment level */
  variant_attribute_sets: FamilyVariantVariantAttributeSetsItem[];
}

export type FamilyList = FamilyListAllOf & FamilyListAllOfFour;

/**
 * Family labels for each locale
 */
export type FamilyListAllOfFourLabels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type FamilyListAllOfFourAttributeRequirements = {
  channelCode?: string[];
};

export type FamilyListAllOfFour = {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: FamilyListAllOfFourAttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: FamilyListAllOfFourLabels;
};

export type _FamilyListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _FamilyListAllOfLinks = {
  self?: _FamilyListAllOfLinksSelf;
};

export type FamilyListAllOf = {
  _links?: _FamilyListAllOfLinks;
};

/**
 * Family labels for each locale
 */
export type FamilyLabels = {
  /** Family label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Attributes codes of the family that are required for the completeness calculation for each channel
 */
export type FamilyAttributeRequirements = {
  channelCode?: string[];
};

export interface Family {
  /** Attribute code used as the main picture in the user interface (only since v2.0) */
  attribute_as_image?: string;
  /** Attribute code used as label */
  attribute_as_label: string;
  /** Attributes codes of the family that are required for the completeness calculation for each channel */
  attribute_requirements?: FamilyAttributeRequirements;
  /** Attributes codes that compose the family */
  attributes?: string[];
  /** Family code */
  code: string;
  /** Family labels for each locale */
  labels?: FamilyLabels;
}

export type ErrorByObjectItem = {
  /** Resource code */
  code?: string;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
};

export type ErrorByObject = ErrorByObjectItem[];

export interface ErrorByLineProductUuid {
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
  /** Product uuid */
  uuid?: string;
}

export interface ErrorByLine {
  /** Resource code, only filled when the resource is not a product */
  code?: string;
  /** Resource identifier, only filled when the resource is a product */
  identifier?: string;
  /** Line number */
  line?: number;
  /** Message explaining the error */
  message?: string;
  /** HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code */
  status_code?: number;
}

export interface Error {
  /** HTTP status code */
  code?: number;
  /** Message explaining the error */
  message?: string;
}

export type _DeprecatedAssetVariationFileLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _DeprecatedAssetVariationFileLink = {
  download?: _DeprecatedAssetVariationFileLinkDownload;
};

export interface DeprecatedAssetVariationFile {
  /** Links to get and download the reference file */
  _link?: _DeprecatedAssetVariationFileLink;
  /** Code of the PAM asset variation file */
  code?: string;
  /** Locale of the PAM asset variation file, equal to `null` if the asset is not localizable */
  locale?: string;
  /** Channel of the PAM asset variation file */
  scope?: string;
}

export type DeprecatedAssetTagListAllOfFour = {
  /** PAM asset tag code */
  code: string;
};

export type DeprecatedAssetTagList = DeprecatedAssetTagListAllOf & DeprecatedAssetTagListAllOfFour;

export type _DeprecatedAssetTagListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _DeprecatedAssetTagListAllOfLinks = {
  self?: _DeprecatedAssetTagListAllOfLinksSelf;
};

export type DeprecatedAssetTagListAllOf = {
  _links?: _DeprecatedAssetTagListAllOfLinks;
};

export interface DeprecatedAssetTag {
  /** PAM asset tag code */
  code: string;
}

export type DeprecatedAssetReferenceFileUploadWarningErrorsItem = {
  /** Channel for which the variation file generation failed */
  channel?: string;
  /** Locale for which the variation file generation failed */
  locale?: string;
  /** Message explaining why the variation file generation failed */
  message?: string;
};

export interface DeprecatedAssetReferenceFileUploadWarning {
  errors?: DeprecatedAssetReferenceFileUploadWarningErrorsItem[];
  /** Message explaining the warning */
  message?: string;
}

export type _DeprecatedAssetReferenceFileLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _DeprecatedAssetReferenceFileLink = {
  download?: _DeprecatedAssetReferenceFileLinkDownload;
};

export interface DeprecatedAssetReferenceFile {
  /** Links to get and download the reference file */
  _link?: _DeprecatedAssetReferenceFileLink;
  /** Code of the PAM asset reference file */
  code?: string;
  /** Locale of the PAM asset reference file, equal to `null` if the asset is not localizable */
  locale?: string;
}

export type DeprecatedAssetListAllOfFour = {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: DeprecatedAssetListAllOfFourReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: DeprecatedAssetListAllOfFourVariationFilesItem[];
};

export type DeprecatedAssetList = DeprecatedAssetListAllOf & DeprecatedAssetListAllOfFour;

export type _DeprecatedAssetListAllOfFourVariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _DeprecatedAssetListAllOfFourVariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _DeprecatedAssetListAllOfFourVariationFilesItemLink = {
  download?: _DeprecatedAssetListAllOfFourVariationFilesItemLinkDownload;
  self?: _DeprecatedAssetListAllOfFourVariationFilesItemLinkSelf;
};

export type DeprecatedAssetListAllOfFourVariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _DeprecatedAssetListAllOfFourVariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export type DeprecatedAssetListAllOfFourReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _DeprecatedAssetListAllOfFourReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type _DeprecatedAssetListAllOfFourReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _DeprecatedAssetListAllOfFourReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _DeprecatedAssetListAllOfFourReferenceFilesItemLink = {
  download?: _DeprecatedAssetListAllOfFourReferenceFilesItemLinkDownload;
  self?: _DeprecatedAssetListAllOfFourReferenceFilesItemLinkSelf;
};

export type _DeprecatedAssetListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _DeprecatedAssetListAllOfLinks = {
  self?: _DeprecatedAssetListAllOfLinksSelf;
};

export type DeprecatedAssetListAllOf = {
  _links?: _DeprecatedAssetListAllOfLinks;
};

/**
 * PAM asset category labels for each locale
 */
export type DeprecatedAssetCategoryListAllOfFourLabels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export type DeprecatedAssetCategoryListAllOfFour = {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: DeprecatedAssetCategoryListAllOfFourLabels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
};

export type _DeprecatedAssetCategoryListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _DeprecatedAssetCategoryListAllOfLinks = {
  self?: _DeprecatedAssetCategoryListAllOfLinksSelf;
};

export type DeprecatedAssetCategoryListAllOf = {
  _links?: _DeprecatedAssetCategoryListAllOfLinks;
};

export type DeprecatedAssetCategoryList = DeprecatedAssetCategoryListAllOf & DeprecatedAssetCategoryListAllOfFour;

/**
 * PAM asset category labels for each locale
 */
export type DeprecatedAssetCategoryLabels = {
  /** PAM asset category label for the locale `localeCode` */
  localeCode?: string;
};

export interface DeprecatedAssetCategory {
  /** PAM asset category code */
  code: string;
  /** PAM asset category labels for each locale */
  labels?: DeprecatedAssetCategoryLabels;
  /** PAM ssset category code of the parent's asset category */
  parent?: string;
}

export type DeprecatedAssetVariationFilesItem = {
  /** Links to get and download the variation file */
  _link?: _DeprecatedAssetVariationFilesItemLink;
  /** Code of the variation */
  code?: string;
  /** Locale code of the variation */
  locale?: string;
  /** Channel code of the variation */
  scope?: string;
};

export interface DeprecatedAsset {
  /** Codes of the PAM asset categories in which the asset is classified */
  categories?: string[];
  /** PAM asset code */
  code: string;
  /** Description of the PAM asset */
  description?: string;
  /** Date on which the PAM asset expire */
  end_of_use?: string;
  /** Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale */
  localizable?: boolean;
  /** Reference files of the PAM asset */
  reference_files?: DeprecatedAssetReferenceFilesItem[];
  /** Tags of the PAM asset */
  tags?: string[];
  /** Variations of the PAM asset */
  variation_files?: DeprecatedAssetVariationFilesItem[];
}

export type _DeprecatedAssetVariationFilesItemLinkSelf = {
  /** URI of the variation entity */
  href?: string;
};

export type _DeprecatedAssetVariationFilesItemLinkDownload = {
  /** URI to download the variation file */
  href?: string;
};

/**
 * Links to get and download the variation file
 */
export type _DeprecatedAssetVariationFilesItemLink = {
  download?: _DeprecatedAssetVariationFilesItemLinkDownload;
  self?: _DeprecatedAssetVariationFilesItemLinkSelf;
};

export type DeprecatedAssetReferenceFilesItem = {
  /** Links to get and download the reference file */
  _link?: _DeprecatedAssetReferenceFilesItemLink;
  /** Code of the reference file */
  code?: string;
  /** Locale code of the reference file */
  locale?: string;
};

export type _DeprecatedAssetReferenceFilesItemLinkSelf = {
  /** URI of the reference file entity */
  href?: string;
};

export type _DeprecatedAssetReferenceFilesItemLinkDownload = {
  /** URI to download the reference file */
  href?: string;
};

/**
 * Links to get and download the reference file
 */
export type _DeprecatedAssetReferenceFilesItemLink = {
  download?: _DeprecatedAssetReferenceFilesItemLinkDownload;
  self?: _DeprecatedAssetReferenceFilesItemLinkSelf;
};

export type CurrencyListAllOfFour = {
  /** Currency code */
  code: string;
  /** Whether the currency is enabled */
  enabled?: boolean;
};

export type _CurrencyListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _CurrencyListAllOfLinks = {
  self?: _CurrencyListAllOfLinksSelf;
};

export type CurrencyListAllOf = {
  _links?: _CurrencyListAllOfLinks;
};

export type CurrencyList = CurrencyListAllOf & CurrencyListAllOfFour;

export interface Currency {
  /** Currency code */
  code: string;
  /** Whether the currency is enabled */
  enabled?: boolean;
}

export type ChannelList = ChannelListAllOf & ChannelListAllOfFour;

/**
 * Channel labels for each locale
 */
export type ChannelListAllOfFourLabels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type ChannelListAllOfFourConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export type ChannelListAllOfFour = {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: ChannelListAllOfFourConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: ChannelListAllOfFourLabels;
  /** Codes of activated locales for the channel */
  locales: string[];
};

export type _ChannelListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _ChannelListAllOfLinks = {
  self?: _ChannelListAllOfLinksSelf;
};

export type ChannelListAllOf = {
  _links?: _ChannelListAllOfLinks;
};

/**
 * Channel labels for each locale
 */
export type ChannelLabels = {
  /** Channel label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Units to which the given metric attributes should be converted when exporting products
 */
export type ChannelConversionUnits = {
  /** Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel */
  attributeCode?: string;
};

export interface Channel {
  /** Code of the category tree linked to the channel */
  category_tree: string;
  /** Channel code */
  code: string;
  /** Units to which the given metric attributes should be converted when exporting products */
  conversion_units?: ChannelConversionUnits;
  /** Codes of activated currencies for the channel */
  currencies: string[];
  /** Channel labels for each locale */
  labels?: ChannelLabels;
  /** Codes of activated locales for the channel */
  locales: string[];
}

/**
 * Attribute value
 */
export type CategoryListAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type CategoryListAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: CategoryListAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Attribute values
 */
export type CategoryListAllOfFourValues = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: CategoryListAllOfFourValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

/**
 * Category labels for each locale
 */
export type CategoryListAllOfFourLabels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export type CategoryListAllOfFour = {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: CategoryListAllOfFourLabels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: CategoryListAllOfFourValues;
};

export type _CategoryListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _CategoryListAllOfLinks = {
  self?: _CategoryListAllOfLinksSelf;
};

export type CategoryListAllOf = {
  _links?: _CategoryListAllOfLinks;
};

export type CategoryList = CategoryListAllOf & CategoryListAllOfFour;

/**
 * Attribute value
 */
export type CategoryValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData = { [key: string]: unknown };

export type CategoryValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem = {
  /** The attribute code with its uuid (attributeCode|attributeUuid) */
  attribute_code?: string;
  /** <a href='api-reference.html#Channel'>Channel</a> code of the attribute value */
  channel?: string;
  /** Attribute value */
  data?: CategoryValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItemData;
  /** <a href='api-reference.html#Locale'>Locale</a> code of the attribute value */
  locale?: string;
  /** The attribute type */
  type?: string;
};

/**
 * Attribute values
 */
export type CategoryValues = {
  'attributeCode|attributeUuid|channelCode|localeCode'?: CategoryValuesAttributeCodeAttributeUuidChannelCodeLocaleCodeItem[];
};

/**
 * Category labels for each locale
 */
export type CategoryLabels = {
  /** Category label for the locale `localeCode` */
  localeCode?: string;
};

export interface Category {
  /** Category code */
  code: string;
  /** Category labels for each locale */
  labels?: CategoryLabels;
  /** Category code of the parent's category */
  parent?: string;
  /** Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true") */
  position?: number;
  /** Date of the last update */
  updated?: string;
  /** Attribute values */
  values?: CategoryValues;
}

/**
 * Attribute option labels for each locale
 */
export type AttributeOptionListAllOfFourLabels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export type AttributeOptionListAllOfFour = {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: AttributeOptionListAllOfFourLabels;
  /** Order of attribute option */
  sort_order?: number;
};

export type AttributeOptionList = AttributeOptionListAllOf & AttributeOptionListAllOfFour;

export type _AttributeOptionListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AttributeOptionListAllOfLinks = {
  self?: _AttributeOptionListAllOfLinksSelf;
};

export type AttributeOptionListAllOf = {
  _links?: _AttributeOptionListAllOfLinks;
};

/**
 * Attribute option labels for each locale
 */
export type AttributeOptionLabels = {
  /** Attribute option label for the locale `localeCode` */
  localeCode?: string;
};

export interface AttributeOption {
  /** Code of attribute related to the attribute option */
  attribute?: string;
  /** Code of option */
  code: string;
  /** Attribute option labels for each locale */
  labels?: AttributeOptionLabels;
  /** Order of attribute option */
  sort_order?: number;
}

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type AttributeListAllOfFourType = typeof AttributeListAllOfFourType[keyof typeof AttributeListAllOfFourType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttributeListAllOfFourType = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

export type AttributeListAllOfFour = {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: AttributeListAllOfFourGroupLabels;
  /** Attribute labels for each locale */
  labels?: AttributeListAllOfFourLabels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: AttributeListAllOfFourTableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: AttributeListAllOfFourType;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
};

export type AttributeList = AttributeListAllOf & AttributeListAllOfFour;

/**
 * User defined validation constraints on the cell content
 */
export type AttributeListAllOfFourTableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type AttributeListAllOfFourTableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type AttributeListAllOfFourTableConfigurationItemDataType = typeof AttributeListAllOfFourTableConfigurationItemDataType[keyof typeof AttributeListAllOfFourTableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttributeListAllOfFourTableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type AttributeListAllOfFourTableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: AttributeListAllOfFourTableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: AttributeListAllOfFourTableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: AttributeListAllOfFourTableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type AttributeListAllOfFourLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type AttributeListAllOfFourGroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

export type _AttributeListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AttributeListAllOfLinks = {
  self?: _AttributeListAllOfLinksSelf;
};

export type AttributeListAllOf = {
  _links?: _AttributeListAllOfLinks;
};

/**
 * Attribute group labels for each locale
 */
export type AttributeGroupListAllOfFourLabels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export type AttributeGroupListAllOfFour = {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: AttributeGroupListAllOfFourLabels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
};

export type AttributeGroupList = AttributeGroupListAllOf & AttributeGroupListAllOfFour;

export type _AttributeGroupListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AttributeGroupListAllOfLinks = {
  self?: _AttributeGroupListAllOfLinksSelf;
};

export type AttributeGroupListAllOf = {
  _links?: _AttributeGroupListAllOfLinks;
};

/**
 * Attribute group labels for each locale
 */
export type AttributeGroupLabels = {
  /** Attribute group label for the locale `localeCode` */
  localeCode?: string;
};

export interface AttributeGroup {
  /** Attribute codes that compose the attribute group */
  attributes?: string[];
  /** Attribute group code */
  code: string;
  /** Attribute group labels for each locale */
  labels?: AttributeGroupLabels;
  /** Attribute group order among other attribute groups */
  sort_order?: number;
}

/**
 * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
 */
export type AttributeType = typeof AttributeType[keyof typeof AttributeType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttributeType = {
  pim_catalog_identifier: 'pim_catalog_identifier',
  pim_catalog_metric: 'pim_catalog_metric',
  pim_catalog_number: 'pim_catalog_number',
  pim_catalog_reference_data_multi_select: 'pim_catalog_reference_data_multi_select',
  pim_catalog_reference_data_simple_select: 'pim_catalog_reference_data_simple_select',
  pim_catalog_simpleselect: 'pim_catalog_simpleselect',
  pim_catalog_multiselect: 'pim_catalog_multiselect',
  pim_catalog_date: 'pim_catalog_date',
  pim_catalog_textarea: 'pim_catalog_textarea',
  pim_catalog_text: 'pim_catalog_text',
  pim_catalog_file: 'pim_catalog_file',
  pim_catalog_image: 'pim_catalog_image',
  pim_catalog_price_collection: 'pim_catalog_price_collection',
  pim_catalog_boolean: 'pim_catalog_boolean',
  akeneo_reference_entity: 'akeneo_reference_entity',
  akeneo_reference_entity_collection: 'akeneo_reference_entity_collection',
  pim_catalog_asset_collection: 'pim_catalog_asset_collection',
} as const;

export interface Attribute {
  /** Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  allowed_extensions?: string[];
  /** To make the attribute locale specfic, specify here for which locales it is specific */
  available_locales?: string[];
  /** Attribute code */
  code: string;
  /** Maximum date allowed when the attribute type is `pim_catalog_date` */
  date_max?: string;
  /** Minimum date allowed when the attribute type is `pim_catalog_date` */
  date_min?: string;
  /** Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  decimals_allowed?: boolean;
  /** Default metric unit when the attribute type is `pim_catalog_metric` */
  default_metric_unit?: string;
  /** Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0) */
  default_value?: boolean;
  /** Attribute group */
  group: string;
  /** Group labels for each locale */
  group_labels?: AttributeGroupLabels;
  /** Attribute labels for each locale */
  labels?: AttributeLabels;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  localizable?: boolean;
  /** Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image` */
  max_file_size?: string;
  /** Metric family when the attribute type is `pim_catalog_metric` */
  metric_family?: string;
  /** Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number` */
  negative_allowed?: boolean;
  /** Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_max?: string;
  /** Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number` */
  number_min?: string;
  /** Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection` */
  reference_data_name?: string;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  scopable?: boolean;
  /** Order of the attribute in its group */
  sort_order?: number;
  /** Configuration of the Table attribute (columns) */
  table_configuration?: AttributeTableConfigurationItem[];
  /** Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details. */
  type: AttributeType;
  /** Whether two values for the attribute cannot be the same */
  unique?: boolean;
  /** Whether the attribute can be used as a filter for the product grid in the PIM user interface */
  useable_as_grid_filter?: boolean;
  /** Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_regexp?: string;
  /** Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier` */
  validation_rule?: string;
  /** Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea` */
  wysiwyg_enabled?: boolean;
}

/**
 * User defined validation constraints on the cell content
 */
export type AttributeTableConfigurationItemValidations = {
  /** whether the value of a numeric cell can hold a decimal part */
  decimals_allowed?: boolean;
  /** maximum value of a numeric cell */
  max?: number;
  /** maximum length of a text cell */
  max_length?: number;
  /** minimum value of a numeric cell */
  min?: number;
};

/**
 * Column labels for each locale
 */
export type AttributeTableConfigurationItemLabels = {
  /** Column label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Column data type
 */
export type AttributeTableConfigurationItemDataType = typeof AttributeTableConfigurationItemDataType[keyof typeof AttributeTableConfigurationItemDataType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AttributeTableConfigurationItemDataType = {
  select: 'select',
  text: 'text',
  number: 'number',
  boolean: 'boolean',
} as const;

export type AttributeTableConfigurationItem = {
  /** Column code */
  code: string;
  /** Column data type */
  data_type: AttributeTableConfigurationItemDataType;
  /** Defines if the column should be entirely filled for the attribute to be considered complete */
  is_required_for_completeness?: boolean;
  /** Column labels for each locale */
  labels?: AttributeTableConfigurationItemLabels;
  /** User defined validation constraints on the cell content */
  validations?: AttributeTableConfigurationItemValidations;
};

/**
 * Attribute labels for each locale
 */
export type AttributeLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Group labels for each locale
 */
export type AttributeGroupLabels = {
  /** Group label for the locale `localeCode` */
  localeCode?: string;
};

/**
 * Association type labels for each locale
 */
export type AssociationTypeListAllOfFourLabels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export type AssociationTypeListAllOfFour = {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: AssociationTypeListAllOfFourLabels;
};

export type AssociationTypeList = AssociationTypeListAllOf & AssociationTypeListAllOfFour;

export type _AssociationTypeListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AssociationTypeListAllOfLinks = {
  self?: _AssociationTypeListAllOfLinksSelf;
};

export type AssociationTypeListAllOf = {
  _links?: _AssociationTypeListAllOfLinks;
};

/**
 * Association type labels for each locale
 */
export type AssociationTypeLabels = {
  /** Association type label for the locale `localeCode` */
  localeCode?: string;
};

export interface AssociationType {
  /** Association type code */
  code: string;
  /** When true, the association is a quantified association (Only available in the PIM Serenity version.) */
  is_quantified?: boolean;
  /** When true, the association is a two-way association (Only available in the PIM Serenity version.) */
  is_two_way?: boolean;
  /** Association type labels for each locale */
  labels?: AssociationTypeLabels;
}

export type AssetList = AssetListAllOf & AssetListAllOfFour;

/**
 * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
 */
export type AssetListAllOfFourValuesAttributeCodeItemData = { [key: string]: unknown };

export type AssetListAllOfFourValuesAttributeCodeItem = {
  /** Channel code of the asset attribute value */
  channel?: string;
  /** Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details. */
  data?: AssetListAllOfFourValuesAttributeCodeItemData;
  /** Locale code of the asset attribute value */
  locale?: string;
};

/**
 * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
 */
export type AssetListAllOfFourValues = {
  attributeCode?: AssetListAllOfFourValuesAttributeCodeItem[];
};

export type AssetListAllOfFour = {
  /** Code of the asset */
  code: string;
  /** Date of creation */
  created?: string;
  /** Date of the last update */
  updated?: string;
  /** Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details. */
  values?: AssetListAllOfFourValues;
};

export type _AssetListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AssetListAllOfLinks = {
  self?: _AssetListAllOfLinksSelf;
};

export type AssetListAllOf = {
  _links?: _AssetListAllOfLinks;
};

export type _AssetItemListLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AssetItemListLinks = {
  self?: _AssetItemListLinksSelf;
};

export interface AssetItemList {
  _links?: _AssetItemListLinks;
}

export type AssetFamilyList = AssetFamilyListAllOf & AssetFamilyListAllOfFour;

/**
 * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
 */
export type AssetFamilyListAllOfFourTransformationsItemTarget = {
  attribute: string;
  channel: string;
  locale: string;
};

/**
 * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
 */
export type AssetFamilyListAllOfFourTransformationsItemSource = {
  attribute: string;
  channel: string;
  locale: string;
};

export type AssetFamilyListAllOfFourTransformationsItemOperationsParameters = {
  colorspace?: string;
  height?: number;
  quality?: number;
  ratio?: number;
  'resolution-unit'?: string;
  'resolution-x'?: number;
  'resolution-y'?: number;
  width?: number;
};

/**
 * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
 */
export type AssetFamilyListAllOfFourTransformationsItemOperations = {
  parameters?: AssetFamilyListAllOfFourTransformationsItemOperationsParameters;
  type?: string;
};

export type AssetFamilyListAllOfFourTransformationsItem = {
  /** The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_prefix?: string;
  /** The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>. */
  filename_suffix?: string;
  /** The name of the transformation */
  label: string;
  /** The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>. */
  operations: AssetFamilyListAllOfFourTransformationsItemOperations;
  /** The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>. */
  source: AssetFamilyListAllOfFourTransformationsItemSource;
  /** The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>. */
  target: AssetFamilyListAllOfFourTransformationsItemTarget;
};

export type AssetFamilyListAllOfFourProductLinkRulesItemProductSelectionsItem = {
  channel?: string;
  field: string;
  locale?: string;
  operator: string;
  value: string;
};

export type AssetFamilyListAllOfFourProductLinkRulesItemAssignAssetsToItem = {
  attribute: string;
  channel?: string;
  locale?: string;
  mode: string;
};

export type AssetFamilyListAllOfFourProductLinkRulesItem = {
  /** The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>. */
  assign_assets_to?: AssetFamilyListAllOfFourProductLinkRulesItemAssignAssetsToItem[];
  /** The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>. */
  product_selections?: AssetFamilyListAllOfFourProductLinkRulesItemProductSelectionsItem[];
};

/**
 * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
 */
export type AssetFamilyListAllOfFourNamingConventionSource = { [key: string]: unknown };

/**
 * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
 */
export type AssetFamilyListAllOfFourNamingConvention = {
  /** Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>. */
  abort_asset_creation_on_error?: boolean;
  /** The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>. */
  pattern?: string;
  /** The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>. */
  source?: AssetFamilyListAllOfFourNamingConventionSource;
};

/**
 * Asset family labels for each locale
 */
export type AssetFamilyListAllOfFourLabels = {
  /** Asset family label for the locale `localeCode` */
  localeCode?: string;
};

export type AssetFamilyListAllOfFour = {
  /** Attribute code that is used as the main media of the asset family. */
  attribute_as_main_media?: string;
  /** Asset family code */
  code: string;
  /** Asset family labels for each locale */
  labels?: AssetFamilyListAllOfFourLabels;
  /** The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>. */
  naming_convention?: AssetFamilyListAllOfFourNamingConvention;
  /** The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>. */
  product_link_rules?: AssetFamilyListAllOfFourProductLinkRulesItem[];
  /** The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>. */
  transformations?: AssetFamilyListAllOfFourTransformationsItem[];
};

export type _AssetFamilyListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AssetFamilyListAllOfLinks = {
  self?: _AssetFamilyListAllOfLinksSelf;
};

export type AssetFamilyListAllOf = {
  _links?: _AssetFamilyListAllOfLinks;
};

export type _AssetFamilyItemListLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AssetFamilyItemListLinks = {
  self?: _AssetFamilyItemListLinksSelf;
};

export interface AssetFamilyItemList {
  _links?: _AssetFamilyItemListLinks;
}

/**
 * Attribute labels for each locale
 */
export type AssetAttributeOptionListItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type AssetAttributeOptionListItem = {
  /** Attribute's option code */
  code: string;
  /** Attribute labels for each locale */
  labels?: AssetAttributeOptionListItemLabels;
};

export type AssetAttributeOptionList = AssetAttributeOptionListItem[];

export type AssetAttributeList = AssetAttributeListItem[];

/**
 * Validation rule type used to validate the attribute value when the attribute type is `text`
 */
export type AssetAttributeListItemValidationRule = typeof AssetAttributeListItemValidationRule[keyof typeof AssetAttributeListItemValidationRule];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetAttributeListItemValidationRule = {
  email: 'email',
  url: 'url',
  regexp: 'regexp',
  none: 'none',
} as const;

/**
 * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
 */
export type AssetAttributeListItemType = typeof AssetAttributeListItemType[keyof typeof AssetAttributeListItemType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetAttributeListItemType = {
  text: 'text',
  media_link: 'media_link',
  number: 'number',
  media_file: 'media_file',
  single_option: 'single_option',
  multiple_options: 'multiple_options',
  reference_entity_single_link: 'reference_entity_single_link',
  reference_entity_multiple_links: 'reference_entity_multiple_links',
  boolean: 'boolean',
} as const;

/**
 * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
 */
export type AssetAttributeListItemMediaType = typeof AssetAttributeListItemMediaType[keyof typeof AssetAttributeListItemMediaType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AssetAttributeListItemMediaType = {
  image: 'image',
  pdf: 'pdf',
  youtube: 'youtube',
  vimeo: 'vimeo',
  other: 'other',
} as const;

/**
 * Attribute labels for each locale
 */
export type AssetAttributeListItemLabels = {
  /** Attribute label for the locale `localeCode` */
  localeCode?: string;
};

export type AssetAttributeListItem = {
  /** Extensions allowed when the attribute type is `media_file` */
  allowed_extensions?: string[];
  /** Attribute code */
  code: string;
  /** Whether decimals are allowed when the attribute type is `number` */
  decimals_allowed?: boolean;
  /** Whether the attribute should be in read only mode only in the UI, but you can still update it with the API */
  is_read_only?: boolean;
  /** Whether the attribute should be part of the record's completeness calculation */
  is_required_for_completeness?: boolean;
  /** Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text` */
  is_rich_text_editor?: boolean;
  /** Whether the UI should display a text area instead of a simple field when the attribute type is `text` */
  is_textarea?: boolean;
  /** Attribute labels for each locale */
  labels?: AssetAttributeListItemLabels;
  /** Maximum number of characters allowed for the value of the attribute when the attribute type is `text` */
  max_characters?: number;
  /** Max file size in MB when the attribute type is `media_file` */
  max_file_size?: string;
  /** Maximum value allowed when the attribute type is `number` */
  max_value?: string;
  /** For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file. */
  media_type: AssetAttributeListItemMediaType;
  /** Minimum value allowed when the attribute type is `number` */
  min_value?: string;
  /** Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media */
  prefix?: string;
  /** Suffix of the `media_link` attribute type. The common url suffix for the media */
  suffix?: string;
  /** Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details. */
  type: AssetAttributeListItemType;
  /** Regexp expression used to validate the attribute value when the attribute type is `text` */
  validation_regexp?: string;
  /** Validation rule type used to validate the attribute value when the attribute type is `text` */
  validation_rule?: AssetAttributeListItemValidationRule;
  /** Whether the attribute is scopable, i.e. can have one value by channel */
  value_per_channel?: boolean;
  /** Whether the attribute is localizable, i.e. can have one value by locale */
  value_per_locale?: boolean;
};

export type AppCatalogListAllOfFour = {
  /** Whether the catalog is enabled or not */
  enabled?: boolean;
  /** Catalog id */
  id?: string;
  /** Catalog name */
  name?: string;
};

export type AppCatalogList = AppCatalogListAllOf & AppCatalogListAllOfFour;

export type _AppCatalogListAllOfLinksSelf = {
  /** URI of the resource */
  href?: string;
};

export type _AppCatalogListAllOfLinks = {
  self?: _AppCatalogListAllOfLinksSelf;
};

export type AppCatalogListAllOf = {
  _links?: _AppCatalogListAllOfLinks;
};





  /**
 * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
 * @summary Get authentication token
 */
export const postToken = <TData = AxiosResponse<PostToken200One>>(
    postTokenBody: PostTokenBody,
    headers: PostTokenHeaders, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/oauth/v1/token`,
      postTokenBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }

/**
 * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
 * @summary Get list of all endpoints
 */
export const getEndpoints = <TData = AxiosResponse<GetEndpoints200One>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1`,options
    );
  }

/**
 * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
 * @summary Get list of PAM asset categories
 */
export const getAssetCategories = <TData = AxiosResponse<GetAssetCategories200One>>(
    params?: GetAssetCategoriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update several PAM asset categories at once.
 * @summary Update/create several PAM asset categories
 */
export const patchAssetCategories = <TData = AxiosResponse<PatchAssetCategories200One>>(
    patchAssetCategoriesBody: PatchAssetCategoriesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-categories`,
      patchAssetCategoriesBody,options
    );
  }

/**
 * This endpoint allows you to create a new PAM asset category.
 * @summary Create a new PAM asset category
 */
export const postAssetCategories = <TData = AxiosResponse<void>>(
    postAssetCategoriesBody: PostAssetCategoriesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/asset-categories`,
      postAssetCategoriesBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given PAM asset category.
 * @summary Get a PAM asset category
 */
export const getAssetCategoriesCode = <TData = AxiosResponse<GetAssetCategoriesCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-categories/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given PAM asset category. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no category exists for the given code, it creates it.
 * @summary Update/create a PAM asset category
 */
export const patchAssetCategoriesCode = <TData = AxiosResponse<void>>(
    code: string,
    patchAssetCategoriesCodeBody: PatchAssetCategoriesCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-categories/${code}`,
      patchAssetCategoriesCodeBody,options
    );
  }

/**
 * This endpoint allows you to get a list of asset families. Asset families are paginated.
 * @summary Get list of asset families
 */
export const getAssetFamilies = <TData = AxiosResponse<GetAssetFamilies200One>>(
    params?: GetAssetFamiliesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
 * @summary Get the list of the assets of a given asset family
 */
export const getAssets = <TData = AxiosResponse<GetAssets200One>>(
    assetFamilyCode: string,
    params?: GetAssetsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${assetFamilyCode}/assets`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href="/documentation/update.html#patch-asset-attribute-values">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
 * @summary Update/create several assets
 */
export const patchAssets = <TData = AxiosResponse<PatchAssets200Item[]>>(
    assetFamilyCode: string,
    patchAssetsBodyItem: PatchAssetsBodyItem[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-families/${assetFamilyCode}/assets`,
      patchAssetsBodyItem,options
    );
  }

/**
 * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
 * @summary Delete an asset
 */
export const deleteAssetsCode = <TData = AxiosResponse<void>>(
    assetFamilyCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
 * @summary Get an asset of a given asset family
 */
export const getAssetsCode = <TData = AxiosResponse<GetAssetsCode200>>(
    assetFamilyCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href="/documentation/update.html#patch-asset-attribute-values">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
 * @summary Update/create an asset
 */
export const patchAssetCode = <TData = AxiosResponse<void>>(
    assetFamilyCode: string,
    code: string,
    patchAssetCodeBody: PatchAssetCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-families/${assetFamilyCode}/assets/${code}`,
      patchAssetCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the list of attributes of a given asset family.
 * @summary Get the list of attributes of a given asset family
 */
export const getAssetFamiliesCodeAttributes = <TData = AxiosResponse<GetAssetFamiliesCodeAttributes200Item[]>>(
    assetFamilyCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${assetFamilyCode}/attributes`,options
    );
  }

/**
 * This endpoint allows you to get a list of attribute options for a given asset family.
 * @summary Get a list of attribute options of a given attribute for a given asset family
 */
export const getAssetFamilyAttributesAttributeCodeOptions = <TData = AxiosResponse<GetAssetFamilyAttributesAttributeCodeOptions200Item[]>>(
    assetFamilyCode: string,
    attributeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${attributeCode}/options`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given asset attribute option.
 * @summary Get an attribute option for a given attribute of a given asset family
 */
export const getAssetAttributesAttributeCodeOptionsCode = <TData = AxiosResponse<GetAssetAttributesAttributeCodeOptionsCode200>>(
    assetFamilyCode: string,
    attributeCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${attributeCode}/options/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given option for a given attribute and a given asset family. Learn more about the <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given asset family, it creates it.
 * @summary Update/create an asset attribute option for a given asset family
 */
export const patchAssetAttributesAttributeCodeOptionsCode = <TData = AxiosResponse<void>>(
    assetFamilyCode: string,
    attributeCode: string,
    code: string,
    patchAssetAttributesAttributeCodeOptionsCodeBody: PatchAssetAttributesAttributeCodeOptionsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${attributeCode}/options/${code}`,
      patchAssetAttributesAttributeCodeOptionsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given attribute for a given asset family.
 * @summary Get an attribute of a given asset family
 */
export const getAssetFamilyAttributesCode = <TData = AxiosResponse<GetAssetFamilyAttributesCode200>>(
    assetFamilyCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
 * @summary Update/create an attribute of a given asset family
 */
export const patchAssetFamilyAttributesCode = <TData = AxiosResponse<void>>(
    assetFamilyCode: string,
    code: string,
    patchAssetFamilyAttributesCodeBody: PatchAssetFamilyAttributesCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-families/${assetFamilyCode}/attributes/${code}`,
      patchAssetFamilyAttributesCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given asset family.
 * @summary Get an asset family
 */
export const getAssetFamilyCode = <TData = AxiosResponse<GetAssetFamilyCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-families/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
 * @summary Update/create an asset family
 */
export const patchAssetFamilyCode = <TData = AxiosResponse<void>>(
    code: string,
    patchAssetFamilyCodeBody: PatchAssetFamilyCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-families/${code}`,
      patchAssetFamilyCodeBody,options
    );
  }

/**
 * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
 * @summary Create a new media file for an asset
 */
export const postAssetMediaFiles = <TData = AxiosResponse<void>>(
    postAssetMediaFilesBodyBody: PostAssetMediaFilesBodyBody,
    headers: PostAssetMediaFilesHeaders, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/asset-media-files`,
      postAssetMediaFilesBodyBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }

/**
 * This endpoint allows you to download a given media file that is associated with an asset.
 * @summary Download the media file associated to an asset
 */
export const getAssetMediaFilesCode = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-media-files/${code}`,options
    );
  }

/**
 * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
 * @summary Get list of PAM asset tags
 */
export const getAssetTags = <TData = AxiosResponse<GetAssetTags200One>>(
    params?: GetAssetTagsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-tags`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get the information about a given PAM asset tag.
 * @summary Get a PAM asset tag
 */
export const getAssetTagsCode = <TData = AxiosResponse<GetAssetTagsCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/asset-tags/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given PAM asset tag. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
 * @summary Update/create a PAM asset tag
 */
export const patchAssetTagsCode = <TData = AxiosResponse<void>>(
    code: string,
    patchAssetTagsCodeBody: PatchAssetTagsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/asset-tags/${code}`,
      patchAssetTagsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
 * @summary Get list of PAM assets
 */
export const getPamAssets = <TData = AxiosResponse<GetPamAssets200One>>(
    params?: GetPamAssetsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/assets`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update several PAM assets at once.
 * @summary Update/create several PAM assets
 */
export const patchPamAssets = <TData = AxiosResponse<PatchPamAssets200One>>(
    patchPamAssetsBody: PatchPamAssetsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/assets`,
      patchPamAssetsBody,options
    );
  }

/**
 * This endpoint allows you to create a new PAM asset.
 * @summary Create a new PAM asset
 */
export const postPamAssets = <TData = AxiosResponse<void>>(
    postPamAssetsBody: PostPamAssetsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/assets`,
      postPamAssetsBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a reference file of a given PAM asset.
 * @summary Get a reference file
 */
export const getReferenceFilesLocaleCode = <TData = AxiosResponse<GetReferenceFilesLocaleCode200>>(
    assetCode: string,
    localeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`,options
    );
  }

/**
 * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
 * @summary Upload a new reference file
 */
export const postReferenceFilesLocaleCode = <TData = AxiosResponse<PostReferenceFilesLocaleCode201>>(
    assetCode: string,
    localeCode: string,
    postReferenceFilesLocaleCodeBodyBody: PostReferenceFilesLocaleCodeBodyBody,
    headers: PostReferenceFilesLocaleCodeHeaders, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}`,
      postReferenceFilesLocaleCodeBodyBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }

/**
 * This endpoint allows you to download a given reference file.
 * @summary Download a reference file
 */
export const getReferenceFilesChannelCodeLocaleCodeDownload = <TData = AxiosResponse<void>>(
    assetCode: string,
    localeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/assets/${assetCode}/reference-files/${localeCode}/download`,options
    );
  }

/**
 * This endpoint allows you to get the information about a variation file of a given PAM asset.
 * @summary Get a variation file
 */
export const getVariationFilesChannelCodeLocaleCode = <TData = AxiosResponse<GetVariationFilesChannelCodeLocaleCode200>>(
    assetCode: string,
    channelCode: string,
    localeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}`,options
    );
  }

/**
 * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
 * @summary Upload a new variation file
 */
export const postVariationFilesChannelCodeLocaleCode = <TData = AxiosResponse<void>>(
    assetCode: string,
    channelCode: string,
    localeCode: string,
    postReferenceFilesLocaleCodeBodyBody: PostReferenceFilesLocaleCodeBodyBody,
    headers: PostVariationFilesChannelCodeLocaleCodeHeaders, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}`,
      postReferenceFilesLocaleCodeBodyBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }

/**
 * This endpoint allows you to download a given variation file.
 * @summary Download a variation file
 */
export const getVariationFilesChannelCodeLocaleCodeDownload = <TData = AxiosResponse<void>>(
    assetCode: string,
    channelCode: string,
    localeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/assets/${assetCode}/variation-files/${channelCode}/${localeCode}/download`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given PAM asset.
 * @summary Get a PAM asset
 */
export const getPamAssetsCode = <TData = AxiosResponse<GetPamAssetsCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/assets/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given PAM asset. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
 * @summary Update/create a PAM asset
 */
export const patchPamAssetsCode = <TData = AxiosResponse<void>>(
    code: string,
    patchPamAssetsCodeBody: PatchPamAssetsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/assets/${code}`,
      patchPamAssetsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
 * @summary Get a list of association types
 */
export const associationTypesGetList = <TData = AxiosResponse<AssociationTypesGetList200One>>(
    params?: AssociationTypesGetListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/association-types`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several association types at once.
 * @summary Update/create several association types
 */
export const severalAssociationTypesPatch = <TData = AxiosResponse<SeveralAssociationTypesPatch200One>>(
    severalAssociationTypesPatchBody: SeveralAssociationTypesPatchBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/association-types`,
      severalAssociationTypesPatchBody,options
    );
  }

/**
 * This endpoint allows you to create a new association type.
 * @summary Create a new association type
 */
export const associationTypesPost = <TData = AxiosResponse<void>>(
    associationTypesPostBody: AssociationTypesPostBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/association-types`,
      associationTypesPostBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given association type.
 * @summary Get an association type
 */
export const associationTypesGet = <TData = AxiosResponse<AssociationTypesGet200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/association-types/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given association type. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
 * @summary Update/create an association type
 */
export const associationTypesPatch = <TData = AxiosResponse<void>>(
    code: string,
    associationTypesPatchBody: AssociationTypesPatchBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/association-types/${code}`,
      associationTypesPatchBody,options
    );
  }

/**
 * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
 * @summary Get list of attribute groups
 */
export const attributeGroupsGetList = <TData = AxiosResponse<AttributeGroupsGetList200One>>(
    params?: AttributeGroupsGetListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/attribute-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several attribute groups at once.
 * @summary Update/create several attribute groups
 */
export const severalAttributeGroupsPatch = <TData = AxiosResponse<SeveralAttributeGroupsPatch200One>>(
    severalAttributeGroupsPatchBody: SeveralAttributeGroupsPatchBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/attribute-groups`,
      severalAttributeGroupsPatchBody,options
    );
  }

/**
 * This endpoint allows you to create a new attribute group.
 * @summary Create a new attribute group
 */
export const attributeGroupsPost = <TData = AxiosResponse<void>>(
    attributeGroupsPostBody: AttributeGroupsPostBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/attribute-groups`,
      attributeGroupsPostBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given attribute group.
 * @summary Get an attribute group
 */
export const attributeGroupsGet = <TData = AxiosResponse<AttributeGroupsGet200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/attribute-groups/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given attribute group. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
 * @summary Update/create an attribute group
 */
export const attributeGroupsPatch = <TData = AxiosResponse<void>>(
    code: string,
    attributeGroupsPatchBody: AttributeGroupsPatchBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/attribute-groups/${code}`,
      attributeGroupsPatchBody,options
    );
  }

/**
 * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
 * @summary Get list of attributes
 */
export const getAttributes = <TData = AxiosResponse<GetAttributes200One>>(
    params?: GetAttributesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/attributes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several attributes at once.
 * @summary Update/create several attributes
 */
export const patchAttributes = <TData = AxiosResponse<PatchAttributes200One>>(
    patchAttributesBody: PatchAttributesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/attributes`,
      patchAttributesBody,options
    );
  }

/**
 * This endpoint allows you to create a new attribute.
 * @summary Create a new attribute
 */
export const postAttributes = <TData = AxiosResponse<void>>(
    postAttributesBody: PostAttributesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/attributes`,
      postAttributesBody,options
    );
  }

/**
 * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
 * @summary Get list of attribute options
 */
export const getAttributesAttributeCodeOptions = <TData = AxiosResponse<GetAttributesAttributeCodeOptions200One>>(
    attributeCode: string,
    params?: GetAttributesAttributeCodeOptionsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/attributes/${attributeCode}/options`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update several attribute options at once.
 * @summary Update/create several attribute options
 */
export const patchAttributesAttributeCodeOptions = <TData = AxiosResponse<PatchAttributesAttributeCodeOptions200One>>(
    attributeCode: string,
    patchAttributesAttributeCodeOptionsBody: PatchAttributesAttributeCodeOptionsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/attributes/${attributeCode}/options`,
      patchAttributesAttributeCodeOptionsBody,options
    );
  }

/**
 * This endpoint allows you to create a new attribute option.
 * @summary Create a new attribute option
 */
export const postAttributesAttributeCodeOptions = <TData = AxiosResponse<void>>(
    attributeCode: string,
    postAttributesAttributeCodeOptionsBody: PostAttributesAttributeCodeOptionsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/attributes/${attributeCode}/options`,
      postAttributesAttributeCodeOptionsBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given attribute option.
 * @summary Get an attribute option
 */
export const getAttributesAttributeCodeOptionsCode = <TData = AxiosResponse<GetAttributesAttributeCodeOptionsCode200>>(
    attributeCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/attributes/${attributeCode}/options/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given attribute option. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
 * @summary Update/create an attribute option
 */
export const patchAttributesAttributeCodeOptionsCode = <TData = AxiosResponse<void>>(
    attributeCode: string,
    code: string,
    patchAttributesAttributeCodeOptionsCodeBody: PatchAttributesAttributeCodeOptionsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/attributes/${attributeCode}/options/${code}`,
      patchAttributesAttributeCodeOptionsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given attribute.
 * @summary Get an attribute
 */
export const getAttributesCode = <TData = AxiosResponse<GetAttributesCode200>>(
    code: string,
    params?: GetAttributesCodeParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/attributes/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update a given attribute. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
 * @summary Update/create an attribute
 */
export const patchAttributesCode = <TData = AxiosResponse<void>>(
    code: string,
    patchAttributesCodeBody: PatchAttributesCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/attributes/${code}`,
      patchAttributesCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the list of catalogs you owned.
 * @summary Get the list of owned catalogs
 */
export const getAppCatalogs = <TData = AxiosResponse<GetAppCatalogs200>>(
    params?: GetAppCatalogsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/catalogs`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to create a new catalog.
 * @summary Create a new catalog
 */
export const postAppCatalog = <TData = AxiosResponse<PostAppCatalog201>>(
    postAppCatalogBodyBody: PostAppCatalogBodyBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/catalogs`,
      postAppCatalogBodyBody,options
    );
  }

/**
 * This endpoint allows you to delete a catalog.
 * @summary Delete a catalog
 */
export const deleteAppCatalog = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/rest/v1/catalogs/${id}`,options
    );
  }

/**
 * This endpoint allows you to get the information about a catalog.
 * @summary Get a catalog
 */
export const getAppCatalog = <TData = AxiosResponse<GetAppCatalog200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/catalogs/${id}`,options
    );
  }

/**
 * This endpoint allows you to update a catalog.
 * @summary Update a catalog
 */
export const patchAppCatalog = <TData = AxiosResponse<PatchAppCatalog200>>(
    id: string,
    postAppCatalogBodyBody: PostAppCatalogBodyBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/catalogs/${id}`,
      postAppCatalogBodyBody,options
    );
  }

/**
 * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href="apps/catalogs.html#troubleshooting">App Catalog</a> section.
 * @summary Get the list of product uuids
 */
export const getAppCatalogProductUuids = <TData = AxiosResponse<GetAppCatalogProductUuids200>>(
    id: string,
    params?: GetAppCatalogProductUuidsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/catalogs/${id}/product-uuids`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href="apps/catalogs.html#troubleshooting">App Catalog</a> section.
 * @summary Get the list of products related to a catalog
 */
export const getAppCatalogProducts = <TData = AxiosResponse<GetAppCatalogProducts200>>(
    id: string,
    params?: GetAppCatalogProductsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/catalogs/${id}/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href="apps/catalogs.html#troubleshooting">App Catalog</a> section.
 * @summary Get a product related to a catalog
 */
export const getAppCatalogProductsUuid = <TData = AxiosResponse<void>>(
    id: string,
    uuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/catalogs/${id}/products/${uuid}`,options
    );
  }

/**
 * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
 * @summary Get list of categories
 */
export const getCategories = <TData = AxiosResponse<GetCategories200One>>(
    params?: GetCategoriesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/categories`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update several categories at once.
 * @summary Update/create several categories
 */
export const patchCategories = <TData = AxiosResponse<PatchCategories200One>>(
    patchCategoriesBody: PatchCategoriesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/categories`,
      patchCategoriesBody,options
    );
  }

/**
 * This endpoint allows you to create a new category.
 * @summary Create a new category
 */
export const postCategories = <TData = AxiosResponse<void>>(
    postCategoriesBody: PostCategoriesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/categories`,
      postCategoriesBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given category.
 * @summary Get a category
 */
export const getCategoriesCode = <TData = AxiosResponse<GetCategoriesCode200>>(
    code: string,
    params?: GetCategoriesCodeParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/categories/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update a given category. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no category exists for the given code, it creates it.
 * @summary Update/create a category
 */
export const patchCategoriesCode = <TData = AxiosResponse<void>>(
    code: string,
    patchCategoriesCodeBody: PatchCategoriesCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/categories/${code}`,
      patchCategoriesCodeBody,options
    );
  }

/**
 * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
 * @summary Download a category media file [COMING SOON]
 */
export const getCategoryMediaFilesCodeDownload = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/category-media-files/${code}/download`,options
    );
  }

/**
 * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
 * @summary Get a list of channels
 */
export const getChannels = <TData = AxiosResponse<GetChannels200One>>(
    params?: GetChannelsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/channels`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several channels at once.
 * @summary Update/create several channels
 */
export const severalChannelsPatch = <TData = AxiosResponse<SeveralChannelsPatch200One>>(
    severalChannelsPatchBody: SeveralChannelsPatchBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/channels`,
      severalChannelsPatchBody,options
    );
  }

/**
 * This endpoint allows you to create a new channel.
 * @summary Create a new channel
 */
export const channelsPost = <TData = AxiosResponse<void>>(
    channelsPostBody: ChannelsPostBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/channels`,
      channelsPostBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given channel.
 * @summary Get a channel
 */
export const getChannelsCode = <TData = AxiosResponse<GetChannelsCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/channels/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given channel. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
 * @summary Update/create a channel
 */
export const channelsPatch = <TData = AxiosResponse<void>>(
    code: string,
    channelsPatchBody: ChannelsPatchBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/channels/${code}`,
      channelsPatchBody,options
    );
  }

/**
 * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
 * @summary Get a list of currencies
 */
export const currenciesGetList = <TData = AxiosResponse<CurrenciesGetList200One>>(
    params?: CurrenciesGetListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/currencies`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get the information about a given currency.
 * @summary Get a currency
 */
export const currenciesGet = <TData = AxiosResponse<CurrenciesGet200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/currencies/${code}`,options
    );
  }

/**
 * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
 * @summary Get list of families
 */
export const getFamilies = <TData = AxiosResponse<GetFamilies200One>>(
    params?: GetFamiliesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/families`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several families at once.
 * @summary Update/create several families
 */
export const patchFamilies = <TData = AxiosResponse<PatchFamilies200One>>(
    patchFamiliesBody: PatchFamiliesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/families`,
      patchFamiliesBody,options
    );
  }

/**
 * This endpoint allows you to create a new family.
 * @summary Create a new family
 */
export const postFamilies = <TData = AxiosResponse<void>>(
    postFamiliesBody: PostFamiliesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/families`,
      postFamiliesBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given family.
 * @summary Get a family
 */
export const getFamiliesCode = <TData = AxiosResponse<GetFamiliesCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/families/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given family. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family exists for the given code, it creates it.
 * @summary Update/create a family
 */
export const patchFamiliesCode = <TData = AxiosResponse<void>>(
    code: string,
    patchFamiliesCodeBody: PatchFamiliesCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/families/${code}`,
      patchFamiliesCodeBody,options
    );
  }

/**
 * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
 * @summary Get list of family variants
 */
export const getFamiliesFamilyCodeVariants = <TData = AxiosResponse<GetFamiliesFamilyCodeVariants200One>>(
    familyCode: string,
    params?: GetFamiliesFamilyCodeVariantsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/families/${familyCode}/variants`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several family variants at once, for a given family.
 * @summary Update/create several family variants
 */
export const patchFamiliesFamilyCodeVariants = <TData = AxiosResponse<PatchFamiliesFamilyCodeVariants200One>>(
    familyCode: string,
    patchFamiliesFamilyCodeVariantsBody: PatchFamiliesFamilyCodeVariantsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/families/${familyCode}/variants`,
      patchFamiliesFamilyCodeVariantsBody,options
    );
  }

/**
 * This endpoint allows you to create a family variant.
 * @summary Create a new family variant
 */
export const postFamiliesFamilyCodeVariants = <TData = AxiosResponse<void>>(
    familyCode: string,
    postFamiliesFamilyCodeVariantsBody: PostFamiliesFamilyCodeVariantsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/families/${familyCode}/variants`,
      postFamiliesFamilyCodeVariantsBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given family variant.
 * @summary Get a family variant
 */
export const getFamiliesFamilyCodeVariantsCode = <TData = AxiosResponse<GetFamiliesFamilyCodeVariantsCode200>>(
    familyCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/families/${familyCode}/variants/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given family variant. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
 * @summary Update/create a family variant
 */
export const patchFamiliesFamilyCodeVariantsCode = <TData = AxiosResponse<void>>(
    familyCode: string,
    code: string,
    patchFamiliesFamilyCodeVariantsCodeBody: PatchFamiliesFamilyCodeVariantsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/families/${familyCode}/variants/${code}`,
      patchFamiliesFamilyCodeVariantsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
 * @summary Get a list of locales
 */
export const getLocales = <TData = AxiosResponse<GetLocales200One>>(
    params?: GetLocalesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/locales`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get the information about a given locale.
 * @summary Get a locale
 */
export const getLocalesCode = <TData = AxiosResponse<GetLocalesCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/locales/${code}`,options
    );
  }

/**
 * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
 * @summary Get list of measure familiy
 */
export const measureFamiliesGetList = <TData = AxiosResponse<MeasureFamiliesGetList200One>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/measure-families`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given measure family.
 * @summary Get a measure family
 */
export const measureFamiliesGet = <TData = AxiosResponse<MeasureFamiliesGet200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/measure-families/${code}`,options
    );
  }

/**
 * This endpoint allows you to get a list of measurement families.
 * @summary Get list of measurement families
 */
export const measurementFamiliesGetList = <TData = AxiosResponse<MeasurementFamiliesGetList200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/measurement-families`,options
    );
  }

/**
 * This endpoint allows you to update and/or create several measurement families at once.
 * @summary Update/create several measurement families
 */
export const patchMeasurementFamilies = <TData = AxiosResponse<PatchMeasurementFamilies200Item[]>>(
    patchMeasurementFamiliesBodyItem: PatchMeasurementFamiliesBodyItem[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/measurement-families`,
      patchMeasurementFamiliesBodyItem,options
    );
  }

/**
 * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
 * @summary Get a list of product media files
 */
export const getMediaFiles = <TData = AxiosResponse<GetMediaFiles200One>>(
    params?: GetMediaFilesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/media-files`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
 * @summary Create a new product media file
 */
export const postMediaFiles = <TData = AxiosResponse<void>>(
    postMediaFilesBody: PostMediaFilesBody,
    headers: PostMediaFilesHeaders, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/media-files`,
      postMediaFilesBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }

/**
 * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
 * @summary Get a product media file
 */
export const getMediaFilesCode = <TData = AxiosResponse<GetMediaFilesCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/media-files/${code}`,options
    );
  }

/**
 * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
 * @summary Download a product media file
 */
export const getMediaFilesCodeDownload = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/media-files/${code}/download`,options
    );
  }

/**
 * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
 * @summary Get list of product models
 */
export const getProductModels = <TData = AxiosResponse<GetProductModels200One>>(
    params?: GetProductModelsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/product-models`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several product models at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model's categories.
 * @summary Update/create several product models
 */
export const patchProductModels = <TData = AxiosResponse<PatchProductModels200One>>(
    patchProductModelsBody: PatchProductModelsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/product-models`,
      patchProductModelsBody,options
    );
  }

/**
 * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
 * @summary Create a new product model
 */
export const postProductModels = <TData = AxiosResponse<void>>(
    postProductModelsBody: PostProductModelsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/product-models`,
      postProductModelsBody,options
    );
  }

/**
 * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
 * @summary Delete a product model
 */
export const deleteProductModelsCode = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/rest/v1/product-models/${code}`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
 * @summary Get a product model
 */
export const getProductModelsCode = <TData = AxiosResponse<GetProductModelsCode200>>(
    code: string,
    params?: GetProductModelsCodeParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/product-models/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update a given product model. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model's categories.
 * @summary Update/create a product model
 */
export const patchProductModelsCode = <TData = AxiosResponse<void>>(
    code: string,
    patchProductModelsCodeBody: PatchProductModelsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/product-models/${code}`,
      patchProductModelsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given product model draft.
 * @summary Get a draft
 */
export const getProductModelDraftCode = <TData = AxiosResponse<GetProductModelDraftCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/product-models/${code}/draft`,options
    );
  }

/**
 * This endpoint allows you to submit a product model draft for approval.
 * @summary Submit a draft for approval
 */
export const postProductModelProposal = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/product-models/${code}/proposal`,undefined,options
    );
  }

/**
 * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
 * @summary Get list of products
 */
export const getProducts = <TData = AxiosResponse<GetProducts200>>(
    params?: GetProductsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
 * @summary Update/create several products
 */
export const patchProducts = <TData = AxiosResponse<PatchProducts200One>>(
    patchProductsBody: PatchProductsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/products`,
      patchProductsBody,options
    );
  }

/**
 * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
 * @summary Create a new product
 */
export const postProducts = <TData = AxiosResponse<void>>(
    postProductsBody: PostProductsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/products`,
      postProductsBody,options
    );
  }

/**
 * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
 * @summary Get list of products
 */
export const getProductsUuid = <TData = AxiosResponse<GetProductsUuid200>>(
    params?: GetProductsUuidParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/products-uuid`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
 * @summary Update/create several products
 */
export const patchProductsUuid = <TData = AxiosResponse<PatchProductsUuid200One>>(
    patchProductsUuidBody: PatchProductsUuidBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/products-uuid`,
      patchProductsUuidBody,options
    );
  }

/**
 * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
 * @summary Create a new product
 */
export const postProductsUuid = <TData = AxiosResponse<void>>(
    postProductsUuidBody: PostProductsUuidBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/products-uuid`,
      postProductsUuidBody,options
    );
  }

/**
 * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
 * @summary Delete a product
 */
export const deleteProductsUuidUuid = <TData = AxiosResponse<void>>(
    uuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/rest/v1/products-uuid/${uuid}`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
 * @summary Get a product
 */
export const getProductsUuidUuid = <TData = AxiosResponse<GetProductsUuidUuid200>>(
    uuid: string,
    params?: GetProductsUuidUuidParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/products-uuid/${uuid}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
 * @summary Update/create a product
 */
export const patchProductsUuidUuid = <TData = AxiosResponse<void>>(
    uuid: string,
    patchProductsUuidUuidBody: PatchProductsUuidUuidBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/products-uuid/${uuid}`,
      patchProductsUuidUuidBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given draft.
 * @summary Get a draft
 */
export const getDraftUuidUuid = <TData = AxiosResponse<GetDraftUuidUuid200>>(
    uuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/products-uuid/${uuid}/draft`,options
    );
  }

/**
 * This endpoint allows you to submit a draft for approval.
 * @summary Submit a draft for approval
 */
export const postProposalUuid = <TData = AxiosResponse<void>>(
    uuid: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/products-uuid/${uuid}/proposal`,undefined,options
    );
  }

/**
 * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
 * @summary Delete a product
 */
export const deleteProductsCode = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.delete(
      `/api/rest/v1/products/${code}`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
 * @summary Get a product
 */
export const getProductsCode = <TData = AxiosResponse<GetProductsCode200>>(
    code: string,
    params?: GetProductsCodeParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/products/${code}`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
 * @summary Update/create a product
 */
export const patchProductsCode = <TData = AxiosResponse<void>>(
    code: string,
    patchProductsCodeBody: PatchProductsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/products/${code}`,
      patchProductsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given draft.
 * @summary Get a draft
 */
export const getDraftCode = <TData = AxiosResponse<GetDraftCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/products/${code}/draft`,options
    );
  }

/**
 * This endpoint allows you to submit a draft for approval.
 * @summary Submit a draft for approval
 */
export const postProposal = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/products/${code}/proposal`,undefined,options
    );
  }

/**
 * This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
 * @summary Get list of published products
 */
export const getPublishedProducts = <TData = AxiosResponse<GetPublishedProducts200One>>(
    params?: GetPublishedProductsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/published-products`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to get the information about a given published product.
 * @summary Get a published product
 */
export const getPublishedProductsCode = <TData = AxiosResponse<GetPublishedProductsCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/published-products/${code}`,options
    );
  }

/**
 * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
 * @summary Get list of reference entities
 */
export const getReferenceEntities = <TData = AxiosResponse<GetReferenceEntities200One>>(
    params?: GetReferenceEntitiesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
 * @summary Create a new media file for a reference entity or a record
 */
export const postReferenceEntityMediaFiles = <TData = AxiosResponse<void>>(
    postAssetMediaFilesBodyBody: PostAssetMediaFilesBodyBody,
    headers: PostReferenceEntityMediaFilesHeaders, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/api/rest/v1/reference-entities-media-files`,
      postAssetMediaFilesBodyBody,{
    ...options,
        headers: {...headers, ...options?.headers},}
    );
  }

/**
 * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
 * @summary Download the media file associated to a reference entity or a record
 */
export const getReferenceEntityMediaFilesCode = <TData = AxiosResponse<void>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities-media-files/${code}`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given reference entity.
 * @summary Get a reference entity
 */
export const getReferenceEntitiesCode = <TData = AxiosResponse<GetReferenceEntitiesCode200>>(
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
 * @summary Update/create a reference entity
 */
export const patchReferenceEntityCode = <TData = AxiosResponse<void>>(
    code: string,
    patchReferenceEntityCodeBody: PatchReferenceEntityCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/reference-entities/${code}`,
      patchReferenceEntityCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the list of attributes of a given reference entity.
 * @summary Get the list of attributes of a given reference entity
 */
export const getReferenceEntitiesCodeAttributes = <TData = AxiosResponse<GetReferenceEntitiesCodeAttributes200Item[]>>(
    referenceEntityCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes`,options
    );
  }

/**
 * This endpoint allows you to get a list of attribute options for a given reference entity.
 * @summary Get a list of attribute options of a given attribute for a given reference entity
 */
export const getReferenceEntityAttributesAttributeCodeOptions = <TData = AxiosResponse<GetReferenceEntityAttributesAttributeCodeOptions200Item[]>>(
    referenceEntityCode: string,
    attributeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${attributeCode}/options`,options
    );
  }

/**
 * This endpoint allows you to get the information about a given attribute option.
 * @summary Get an attribute option for a given attribute of a given reference entity
 */
export const getReferenceEntityAttributesAttributeCodeOptionsCode = <TData = AxiosResponse<GetReferenceEntityAttributesAttributeCodeOptionsCode200>>(
    referenceEntityCode: string,
    attributeCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${attributeCode}/options/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.
 * @summary Update/create a reference entity attribute option
 */
export const patchReferenceEntityAttributesAttributeCodeOptionsCode = <TData = AxiosResponse<void>>(
    referenceEntityCode: string,
    attributeCode: string,
    code: string,
    patchReferenceEntityAttributesAttributeCodeOptionsCodeBody: PatchReferenceEntityAttributesAttributeCodeOptionsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${attributeCode}/options/${code}`,
      patchReferenceEntityAttributesAttributeCodeOptionsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the information about a given attribute for a given reference entity.
 * @summary Get an attribute of a given reference entity
 */
export const getReferenceEntityAttributesCode = <TData = AxiosResponse<GetReferenceEntityAttributesCode200>>(
    referenceEntityCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
 * @summary Update/create an attribute of a given reference entity
 */
export const patchReferenceEntityAttributesCode = <TData = AxiosResponse<void>>(
    referenceEntityCode: string,
    code: string,
    patchReferenceEntityAttributesCodeBody: PatchReferenceEntityAttributesCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/attributes/${code}`,
      patchReferenceEntityAttributesCodeBody,options
    );
  }

/**
 * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
 * @summary Get the list of the records of a reference entity
 */
export const getReferenceEntityRecords = <TData = AxiosResponse<GetReferenceEntityRecords200One>>(
    referenceEntityCode: string,
    params?: GetReferenceEntityRecordsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/records`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
 * @summary Update/create several reference entity records
 */
export const patchReferenceEntityRecords = <TData = AxiosResponse<PatchReferenceEntityRecords200Item[]>>(
    referenceEntityCode: string,
    patchReferenceEntityRecordsBodyItem: PatchReferenceEntityRecordsBodyItem[], options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/records`,
      patchReferenceEntityRecordsBodyItem,options
    );
  }

/**
 * This endpoint allows you to get the information about a given record for a given reference entity.
 * @summary Get a record of a given reference entity
 */
export const getReferenceEntityRecordsCode = <TData = AxiosResponse<GetReferenceEntityRecordsCode200>>(
    referenceEntityCode: string,
    code: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/records/${code}`,options
    );
  }

/**
 * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
 * @summary Update/create a record of a given reference entity
 */
export const patchReferenceEntityRecordsCode = <TData = AxiosResponse<void>>(
    referenceEntityCode: string,
    code: string,
    patchReferenceEntityRecordsCodeBody: PatchReferenceEntityRecordsCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/api/rest/v1/reference-entities/${referenceEntityCode}/records/${code}`,
      patchReferenceEntityRecordsCodeBody,options
    );
  }

/**
 * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class="description-table"> <thead> <tr> <th align="center">Environment</th> <th align="center">Edition</th> <th align="center">Version</th> </tr> </thead> <tbody> <tr> <td align="center">SaaS EE</td> <td align="center">Serenity</td> <td align="center">v20230112013744</td> </tr> <tr> <td align="center">SaaS CE</td> <td align="center">GE</td> <td align="center">v20210526040645</td> </tr> <tr> <td align="center">PaaS or onPrem EE</td> <td align="center">EE</td> <td align="center">5.0.28</td> </tr> <tr> <td align="center">PaaS or onPrem CE</td> <td align="center">CE</td> <td align="center">5.0.28</td> </tr> </tbody> </table>
 * @summary Get system information
 */
export const getSystemInformation = <TData = AxiosResponse<GetSystemInformation200One>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/api/rest/v1/system-information`,options
    );
  }

export type PostTokenResult = AxiosResponse<PostToken200One>
export type GetEndpointsResult = AxiosResponse<GetEndpoints200One>
export type GetAssetCategoriesResult = AxiosResponse<GetAssetCategories200One>
export type PatchAssetCategoriesResult = AxiosResponse<PatchAssetCategories200One>
export type PostAssetCategoriesResult = AxiosResponse<void>
export type GetAssetCategoriesCodeResult = AxiosResponse<GetAssetCategoriesCode200>
export type PatchAssetCategoriesCodeResult = AxiosResponse<void>
export type GetAssetFamiliesResult = AxiosResponse<GetAssetFamilies200One>
export type GetAssetsResult = AxiosResponse<GetAssets200One>
export type PatchAssetsResult = AxiosResponse<PatchAssets200Item[]>
export type DeleteAssetsCodeResult = AxiosResponse<void>
export type GetAssetsCodeResult = AxiosResponse<GetAssetsCode200>
export type PatchAssetCodeResult = AxiosResponse<void>
export type GetAssetFamiliesCodeAttributesResult = AxiosResponse<GetAssetFamiliesCodeAttributes200Item[]>
export type GetAssetFamilyAttributesAttributeCodeOptionsResult = AxiosResponse<GetAssetFamilyAttributesAttributeCodeOptions200Item[]>
export type GetAssetAttributesAttributeCodeOptionsCodeResult = AxiosResponse<GetAssetAttributesAttributeCodeOptionsCode200>
export type PatchAssetAttributesAttributeCodeOptionsCodeResult = AxiosResponse<void>
export type GetAssetFamilyAttributesCodeResult = AxiosResponse<GetAssetFamilyAttributesCode200>
export type PatchAssetFamilyAttributesCodeResult = AxiosResponse<void>
export type GetAssetFamilyCodeResult = AxiosResponse<GetAssetFamilyCode200>
export type PatchAssetFamilyCodeResult = AxiosResponse<void>
export type PostAssetMediaFilesResult = AxiosResponse<void>
export type GetAssetMediaFilesCodeResult = AxiosResponse<void>
export type GetAssetTagsResult = AxiosResponse<GetAssetTags200One>
export type GetAssetTagsCodeResult = AxiosResponse<GetAssetTagsCode200>
export type PatchAssetTagsCodeResult = AxiosResponse<void>
export type GetPamAssetsResult = AxiosResponse<GetPamAssets200One>
export type PatchPamAssetsResult = AxiosResponse<PatchPamAssets200One>
export type PostPamAssetsResult = AxiosResponse<void>
export type GetReferenceFilesLocaleCodeResult = AxiosResponse<GetReferenceFilesLocaleCode200>
export type PostReferenceFilesLocaleCodeResult = AxiosResponse<PostReferenceFilesLocaleCode201>
export type GetReferenceFilesChannelCodeLocaleCodeDownloadResult = AxiosResponse<void>
export type GetVariationFilesChannelCodeLocaleCodeResult = AxiosResponse<GetVariationFilesChannelCodeLocaleCode200>
export type PostVariationFilesChannelCodeLocaleCodeResult = AxiosResponse<void>
export type GetVariationFilesChannelCodeLocaleCodeDownloadResult = AxiosResponse<void>
export type GetPamAssetsCodeResult = AxiosResponse<GetPamAssetsCode200>
export type PatchPamAssetsCodeResult = AxiosResponse<void>
export type AssociationTypesGetListResult = AxiosResponse<AssociationTypesGetList200One>
export type SeveralAssociationTypesPatchResult = AxiosResponse<SeveralAssociationTypesPatch200One>
export type AssociationTypesPostResult = AxiosResponse<void>
export type AssociationTypesGetResult = AxiosResponse<AssociationTypesGet200>
export type AssociationTypesPatchResult = AxiosResponse<void>
export type AttributeGroupsGetListResult = AxiosResponse<AttributeGroupsGetList200One>
export type SeveralAttributeGroupsPatchResult = AxiosResponse<SeveralAttributeGroupsPatch200One>
export type AttributeGroupsPostResult = AxiosResponse<void>
export type AttributeGroupsGetResult = AxiosResponse<AttributeGroupsGet200>
export type AttributeGroupsPatchResult = AxiosResponse<void>
export type GetAttributesResult = AxiosResponse<GetAttributes200One>
export type PatchAttributesResult = AxiosResponse<PatchAttributes200One>
export type PostAttributesResult = AxiosResponse<void>
export type GetAttributesAttributeCodeOptionsResult = AxiosResponse<GetAttributesAttributeCodeOptions200One>
export type PatchAttributesAttributeCodeOptionsResult = AxiosResponse<PatchAttributesAttributeCodeOptions200One>
export type PostAttributesAttributeCodeOptionsResult = AxiosResponse<void>
export type GetAttributesAttributeCodeOptionsCodeResult = AxiosResponse<GetAttributesAttributeCodeOptionsCode200>
export type PatchAttributesAttributeCodeOptionsCodeResult = AxiosResponse<void>
export type GetAttributesCodeResult = AxiosResponse<GetAttributesCode200>
export type PatchAttributesCodeResult = AxiosResponse<void>
export type GetAppCatalogsResult = AxiosResponse<GetAppCatalogs200>
export type PostAppCatalogResult = AxiosResponse<PostAppCatalog201>
export type DeleteAppCatalogResult = AxiosResponse<void>
export type GetAppCatalogResult = AxiosResponse<GetAppCatalog200>
export type PatchAppCatalogResult = AxiosResponse<PatchAppCatalog200>
export type GetAppCatalogProductUuidsResult = AxiosResponse<GetAppCatalogProductUuids200>
export type GetAppCatalogProductsResult = AxiosResponse<GetAppCatalogProducts200>
export type GetAppCatalogProductsUuidResult = AxiosResponse<void>
export type GetCategoriesResult = AxiosResponse<GetCategories200One>
export type PatchCategoriesResult = AxiosResponse<PatchCategories200One>
export type PostCategoriesResult = AxiosResponse<void>
export type GetCategoriesCodeResult = AxiosResponse<GetCategoriesCode200>
export type PatchCategoriesCodeResult = AxiosResponse<void>
export type GetCategoryMediaFilesCodeDownloadResult = AxiosResponse<void>
export type GetChannelsResult = AxiosResponse<GetChannels200One>
export type SeveralChannelsPatchResult = AxiosResponse<SeveralChannelsPatch200One>
export type ChannelsPostResult = AxiosResponse<void>
export type GetChannelsCodeResult = AxiosResponse<GetChannelsCode200>
export type ChannelsPatchResult = AxiosResponse<void>
export type CurrenciesGetListResult = AxiosResponse<CurrenciesGetList200One>
export type CurrenciesGetResult = AxiosResponse<CurrenciesGet200>
export type GetFamiliesResult = AxiosResponse<GetFamilies200One>
export type PatchFamiliesResult = AxiosResponse<PatchFamilies200One>
export type PostFamiliesResult = AxiosResponse<void>
export type GetFamiliesCodeResult = AxiosResponse<GetFamiliesCode200>
export type PatchFamiliesCodeResult = AxiosResponse<void>
export type GetFamiliesFamilyCodeVariantsResult = AxiosResponse<GetFamiliesFamilyCodeVariants200One>
export type PatchFamiliesFamilyCodeVariantsResult = AxiosResponse<PatchFamiliesFamilyCodeVariants200One>
export type PostFamiliesFamilyCodeVariantsResult = AxiosResponse<void>
export type GetFamiliesFamilyCodeVariantsCodeResult = AxiosResponse<GetFamiliesFamilyCodeVariantsCode200>
export type PatchFamiliesFamilyCodeVariantsCodeResult = AxiosResponse<void>
export type GetLocalesResult = AxiosResponse<GetLocales200One>
export type GetLocalesCodeResult = AxiosResponse<GetLocalesCode200>
export type MeasureFamiliesGetListResult = AxiosResponse<MeasureFamiliesGetList200One>
export type MeasureFamiliesGetResult = AxiosResponse<MeasureFamiliesGet200>
export type MeasurementFamiliesGetListResult = AxiosResponse<MeasurementFamiliesGetList200>
export type PatchMeasurementFamiliesResult = AxiosResponse<PatchMeasurementFamilies200Item[]>
export type GetMediaFilesResult = AxiosResponse<GetMediaFiles200One>
export type PostMediaFilesResult = AxiosResponse<void>
export type GetMediaFilesCodeResult = AxiosResponse<GetMediaFilesCode200>
export type GetMediaFilesCodeDownloadResult = AxiosResponse<void>
export type GetProductModelsResult = AxiosResponse<GetProductModels200One>
export type PatchProductModelsResult = AxiosResponse<PatchProductModels200One>
export type PostProductModelsResult = AxiosResponse<void>
export type DeleteProductModelsCodeResult = AxiosResponse<void>
export type GetProductModelsCodeResult = AxiosResponse<GetProductModelsCode200>
export type PatchProductModelsCodeResult = AxiosResponse<void>
export type GetProductModelDraftCodeResult = AxiosResponse<GetProductModelDraftCode200>
export type PostProductModelProposalResult = AxiosResponse<void>
export type GetProductsResult = AxiosResponse<GetProducts200>
export type PatchProductsResult = AxiosResponse<PatchProducts200One>
export type PostProductsResult = AxiosResponse<void>
export type GetProductsUuidResult = AxiosResponse<GetProductsUuid200>
export type PatchProductsUuidResult = AxiosResponse<PatchProductsUuid200One>
export type PostProductsUuidResult = AxiosResponse<void>
export type DeleteProductsUuidUuidResult = AxiosResponse<void>
export type GetProductsUuidUuidResult = AxiosResponse<GetProductsUuidUuid200>
export type PatchProductsUuidUuidResult = AxiosResponse<void>
export type GetDraftUuidUuidResult = AxiosResponse<GetDraftUuidUuid200>
export type PostProposalUuidResult = AxiosResponse<void>
export type DeleteProductsCodeResult = AxiosResponse<void>
export type GetProductsCodeResult = AxiosResponse<GetProductsCode200>
export type PatchProductsCodeResult = AxiosResponse<void>
export type GetDraftCodeResult = AxiosResponse<GetDraftCode200>
export type PostProposalResult = AxiosResponse<void>
export type GetPublishedProductsResult = AxiosResponse<GetPublishedProducts200One>
export type GetPublishedProductsCodeResult = AxiosResponse<GetPublishedProductsCode200>
export type GetReferenceEntitiesResult = AxiosResponse<GetReferenceEntities200One>
export type PostReferenceEntityMediaFilesResult = AxiosResponse<void>
export type GetReferenceEntityMediaFilesCodeResult = AxiosResponse<void>
export type GetReferenceEntitiesCodeResult = AxiosResponse<GetReferenceEntitiesCode200>
export type PatchReferenceEntityCodeResult = AxiosResponse<void>
export type GetReferenceEntitiesCodeAttributesResult = AxiosResponse<GetReferenceEntitiesCodeAttributes200Item[]>
export type GetReferenceEntityAttributesAttributeCodeOptionsResult = AxiosResponse<GetReferenceEntityAttributesAttributeCodeOptions200Item[]>
export type GetReferenceEntityAttributesAttributeCodeOptionsCodeResult = AxiosResponse<GetReferenceEntityAttributesAttributeCodeOptionsCode200>
export type PatchReferenceEntityAttributesAttributeCodeOptionsCodeResult = AxiosResponse<void>
export type GetReferenceEntityAttributesCodeResult = AxiosResponse<GetReferenceEntityAttributesCode200>
export type PatchReferenceEntityAttributesCodeResult = AxiosResponse<void>
export type GetReferenceEntityRecordsResult = AxiosResponse<GetReferenceEntityRecords200One>
export type PatchReferenceEntityRecordsResult = AxiosResponse<PatchReferenceEntityRecords200Item[]>
export type GetReferenceEntityRecordsCodeResult = AxiosResponse<GetReferenceEntityRecordsCode200>
export type PatchReferenceEntityRecordsCodeResult = AxiosResponse<void>
export type GetSystemInformationResult = AxiosResponse<GetSystemInformation200One>
