// This file is auto-generated by @hey-api/openapi-ts

export const AppCatalogListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        enabled: false,
        id: "12351d98-200e-4bbc-aa19-7fdda1bd14f2",
        name: "My app catalog",
      },
      properties: {
        enabled: {
          default: false,
          description: "Whether the catalog is enabled or not",
          type: "boolean",
        },
        id: {
          description: "Catalog id",
          type: "string",
          "x-immutable": true,
        },
        name: {
          description: "Catalog name",
          type: "string",
        },
      },
      type: "object",
    },
  ],
  type: "object",
} as const;

export const AssetAttributeListSchema = {
  items: {
    example: {
      code: "model_is_wearing_size",
      is_required_for_completeness: true,
      labels: {
        en_US: "Model is wearing size",
        fr_FR: "Le mannequin porte la taille",
      },
      type: "single_option",
      value_per_channel: false,
      value_per_locale: false,
    },
    properties: {
      allowed_extensions: {
        default: [],
        description:
          "Extensions allowed when the attribute type is `media_file`",
        items: {
          type: "string",
        },
        type: "array",
        "x-warning": "Only for `media_file` attribute type",
      },
      code: {
        description: "Attribute code",
        type: "string",
        "x-immutable": true,
      },
      decimals_allowed: {
        default: false,
        description:
          "Whether decimals are allowed when the attribute type is `number`",
        type: "boolean",
        "x-warning": "Only for `number` attribute type",
      },
      is_read_only: {
        default: false,
        description:
          "Whether the attribute should be in read only mode only in the UI, but you can still update it with the API",
        type: "boolean",
      },
      is_required_for_completeness: {
        default: false,
        description:
          "Whether the attribute should be part of the record's completeness calculation",
        type: "boolean",
      },
      is_rich_text_editor: {
        description:
          "Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`",
        type: "boolean",
        "x-validation-rules":
          "Required when the property `is_textarea` is equal to `true`",
        "x-warning": "Only for `text` attribute type",
      },
      is_textarea: {
        default: false,
        description:
          "Whether the UI should display a text area instead of a simple field when the attribute type is `text`",
        type: "boolean",
        "x-warning": "Only for `text` attribute type",
      },
      labels: {
        default: {},
        description: "Attribute labels for each locale",
        properties: {
          localeCode: {
            description: "Attribute label for the locale `localeCode`",
            type: "string",
          },
        },
        type: "object",
        "x-validation-rules":
          "The `localeCode` is the code of an existing and activated locale",
      },
      max_characters: {
        description:
          "Maximum number of characters allowed for the value of the attribute when the attribute type is `text`",
        type: "integer",
        "x-warning": "Only for `text` attribute type",
      },
      max_file_size: {
        default: null,
        description:
          "Max file size in MB when the attribute type is `media_file`",
        type: "string",
        "x-warning": "Only for `media_file` attribute type",
      },
      max_value: {
        default: null,
        description:
          "Maximum value allowed when the attribute type is `number`",
        type: "string",
        "x-validation-rules":
          "The maximum value must be greater than the minimum value",
        "x-warning": "Only for `number` attribute type",
      },
      media_type: {
        description:
          "For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.",
        enum: ["image", "pdf", "youtube", "vimeo", "other"],
        type: "string",
        "x-warning":
          "Only required for `media_link` and `media_file` attribute types",
      },
      min_value: {
        default: null,
        description:
          "Minimum value allowed when the attribute type is `number`",
        type: "string",
        "x-validation-rules":
          "The minimum value must be lower than the maximum value",
        "x-warning": "Only for `number` attribute type",
      },
      prefix: {
        default: null,
        description:
          "Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media",
        type: "string",
        "x-warning": "Only for `media_link` attribute type",
      },
      suffix: {
        default: null,
        description:
          "Suffix of the `media_link` attribute type. The common url suffix for the media",
        type: "string",
        "x-warning": "Only for `media_link` attribute type",
      },
      type: {
        description:
          "Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.",
        enum: [
          "text",
          "media_link",
          "number",
          "media_file",
          "single_option",
          "multiple_options",
          "reference_entity_single_link",
          "reference_entity_multiple_links",
          "boolean",
        ],
        type: "string",
        "x-immutable": true,
      },
      validation_regexp: {
        default: null,
        description:
          "Regexp expression used to validate the attribute value when the attribute type is `text`",
        type: "string",
        "x-validation-rules":
          "Required when the property `validation_rule` is equal to `regexp`",
        "x-warning": "Only for `text` attribute type",
      },
      validation_rule: {
        default: "none",
        description:
          "Validation rule type used to validate the attribute value when the attribute type is `text`",
        enum: ["email", "url", "regexp", "none"],
        type: "string",
        "x-warning": "Only for `text` attribute type",
      },
      value_per_channel: {
        default: false,
        description:
          "Whether the attribute is scopable, i.e. can have one value by channel",
        type: "boolean",
        "x-immutable": true,
      },
      value_per_locale: {
        default: false,
        description:
          "Whether the attribute is localizable, i.e. can have one value by locale",
        type: "boolean",
        "x-immutable": true,
      },
    },
    required: ["code", "type", "media_type"],
    type: "object",
  },
  type: "array",
} as const;

export const AssetAttributeOptionListSchema = {
  items: {
    example: {
      code: "small",
      labels: {
        en_US: "S",
        fr_FR: "S",
      },
    },
    properties: {
      code: {
        description: "Attribute's option code",
        type: "string",
        "x-immutable": true,
      },
      labels: {
        default: {},
        description: "Attribute labels for each locale",
        properties: {
          localeCode: {
            description: "Attribute label for the locale `localeCode`",
            type: "string",
          },
        },
        type: "object",
        "x-validation-rules":
          "The `localeCode` is the code of an existing and activated locale",
      },
    },
    required: ["code"],
    type: "object",
  },
  type: "array",
} as const;

export const AssetFamilyItemListSchema = {
  properties: {
    _links: {
      properties: {
        self: {
          properties: {
            href: {
              description: "URI of the resource",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const AssetFamilyListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        attribute_as_main_media: "main_image",
        code: "model_pictures",
        labels: {
          en_US: "Model pictures",
          fr_FR: "Photographies en pied",
        },
        naming_convention: {
          abort_asset_creation_on_error: true,
          pattern: "/(?P<product_ref>.*)-.*/",
          source: {
            channel: null,
            locale: null,
            property: "code",
          },
        },
        product_link_rules: [
          {
            assign_assets_to: [
              {
                attribute: "model_pictures",
                mode: "replace",
              },
            ],
            product_selections: [
              {
                field: "sku",
                operator: "EQUALS",
                value: "{{product_ref}}",
              },
            ],
          },
        ],
        transformations: [
          {
            filename_suffix: "_thumbnailBW",
            label: "Thumbnail plus black and white transformation",
            operations: [
              {
                parameters: {
                  height: 150,
                  width: 150,
                },
                type: "thumbnail",
              },
              {
                parameters: {
                  colorspace: "grey",
                },
                type: "colorspace",
              },
            ],
            source: {
              attribute: "main_image",
              channel: null,
              locale: null,
            },
            target: {
              attribute: "thumbnail",
              channel: null,
              locale: null,
            },
          },
        ],
      },
      properties: {
        attribute_as_main_media: {
          default: "First media file or media link attribute that was created",
          description:
            "Attribute code that is used as the main media of the asset family.",
          type: "string",
          "x-validation-rules":
            "It should be the code of an attribute that belongs to this family, and it must be a media file or a media link attribute type.",
        },
        code: {
          description: "Asset family code",
          type: "string",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "Asset family labels for each locale",
          properties: {
            localeCode: {
              description: "Asset family label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        naming_convention: {
          default: {},
          description:
            "The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.",
          properties: {
            abort_asset_creation_on_error: {
              description:
                "Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.",
              type: "boolean",
            },
            pattern: {
              description:
                "The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.",
              type: "string",
            },
            source: {
              description:
                "The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.",
              type: "object",
            },
          },
          type: "object",
          "x-validation-rules":
            "To know more about the validation of this property, take a look at our naming convention format.",
        },
        product_link_rules: {
          default: [],
          description:
            "The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.",
          items: {
            properties: {
              assign_assets_to: {
                description:
                  "The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.",
                items: {
                  properties: {
                    attribute: {
                      type: "string",
                    },
                    channel: {
                      type: "string",
                    },
                    locale: {
                      type: "string",
                    },
                    mode: {
                      type: "string",
                    },
                  },
                  required: ["attribute", "mode"],
                  type: "object",
                },
                type: "array",
              },
              product_selections: {
                description:
                  "The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.",
                items: {
                  properties: {
                    channel: {
                      type: "string",
                    },
                    field: {
                      type: "string",
                    },
                    locale: {
                      type: "string",
                    },
                    operator: {
                      type: "string",
                    },
                    value: {
                      type: "string",
                    },
                  },
                  required: ["field", "operator", "value"],
                  type: "object",
                },
                type: "array",
              },
            },
            type: "object",
          },
          type: "array",
          "x-validation-rules":
            "To know more about the validation of this property, take a look at our product link rule format.",
        },
        transformations: {
          default: [],
          description:
            "The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.",
          items: {
            properties: {
              filename_prefix: {
                description:
                  "The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.",
                type: "string",
              },
              filename_suffix: {
                description:
                  "The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.",
                type: "string",
              },
              label: {
                description: "The name of the transformation",
                type: "string",
              },
              operations: {
                description:
                  "The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.",
                properties: {
                  parameters: {
                    properties: {
                      colorspace: {
                        type: "string",
                      },
                      height: {
                        type: "integer",
                      },
                      quality: {
                        type: "integer",
                      },
                      ratio: {
                        type: "integer",
                      },
                      "resolution-unit": {
                        type: "string",
                      },
                      "resolution-x": {
                        type: "integer",
                      },
                      "resolution-y": {
                        type: "integer",
                      },
                      width: {
                        type: "integer",
                      },
                    },
                    type: "object",
                  },
                  type: {
                    type: "string",
                  },
                },
                type: "object",
                "x-validation-rules": "Should contain at least one operation",
              },
              source: {
                description:
                  "The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.",
                properties: {
                  attribute: {
                    type: "string",
                  },
                  channel: {
                    type: "string",
                  },
                  locale: {
                    type: "string",
                  },
                },
                required: ["attribute", "channel", "locale"],
                type: "object",
              },
              target: {
                description:
                  "The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.",
                properties: {
                  attribute: {
                    type: "string",
                  },
                  channel: {
                    type: "string",
                  },
                  locale: {
                    type: "string",
                  },
                },
                required: ["attribute", "channel", "locale"],
                type: "object",
              },
            },
            required: ["label", "target", "source", "operations"],
            type: "object",
          },
          type: "array",
          "x-from-version": "4.0",
          "x-validation-rules":
            "To know more about the validation of this property, take a look at our transformation format.",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const AssetItemListSchema = {
  properties: {
    _links: {
      properties: {
        self: {
          properties: {
            href: {
              description: "URI of the resource",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const AssetListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "sku_54628_picture1",
        created: "2021-05-31T09:23:34+00:00",
        updated: "2021-05-31T09:23:34+00:00",
        values: {
          end_of_use_date: [
            {
              channel: null,
              data: "02/03/2021",
              locale: null,
            },
          ],
          main_colors: [
            {
              channel: null,
              data: ["red", "purple"],
              locale: null,
            },
          ],
          media_preview: [
            {
              channel: null,
              data: "sku_54628_picture1.jpg",
              locale: null,
            },
          ],
          model_wears_size: [
            {
              channel: null,
              data: "s",
              locale: null,
            },
          ],
          photographer: [
            {
              channel: null,
              data: "ben_levy",
              locale: null,
            },
          ],
        },
      },
      properties: {
        code: {
          description: "Code of the asset",
          type: "string",
          "x-immutable": true,
        },
        created: {
          description: "Date of creation",
          format: "dateTime",
          type: "string",
          "x-from-version": "6.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        updated: {
          description: "Date of the last update",
          format: "dateTime",
          type: "string",
          "x-from-version": "6.0",
          "x-read-only": true,
        },
        values: {
          description:
            "Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.",
          properties: {
            attributeCode: {
              items: {
                properties: {
                  channel: {
                    description: "Channel code of the asset attribute value",
                    type: "string",
                  },
                  data: {
                    description:
                      "Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.",
                    type: "object",
                  },
                  locale: {
                    description: "Locale code of the asset attribute value",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "Validation rules detailed in Asset attribute values section",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const AssociationTypeSchema = {
  example: {
    code: "upsell",
    is_quantified: false,
    is_two_way: false,
    labels: {
      en_US: "Upsell",
      fr_FR: "Vente incitative",
    },
  },
  properties: {
    code: {
      description: "Association type code",
      type: "string",
      "x-immutable": true,
    },
    is_quantified: {
      default: false,
      description:
        "When true, the association is a quantified association (Only available in the PIM Serenity version.)",
      type: "boolean",
      "x-immutable": true,
    },
    is_two_way: {
      default: false,
      description:
        "When true, the association is a two-way association (Only available in the PIM Serenity version.)",
      type: "boolean",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Association type labels for each locale",
      properties: {
        localeCode: {
          description: "Association type label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const AssociationTypeListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "upsell",
        is_quantified: false,
        is_two_way: false,
        labels: {
          en_US: "Upsell",
          fr_FR: "Vente incitative",
        },
      },
      properties: {
        code: {
          description: "Association type code",
          type: "string",
          "x-immutable": true,
        },
        is_quantified: {
          default: false,
          description:
            "When true, the association is a quantified association (Only available in the PIM Serenity version.)",
          type: "boolean",
          "x-immutable": true,
        },
        is_two_way: {
          default: false,
          description:
            "When true, the association is a two-way association (Only available in the PIM Serenity version.)",
          type: "boolean",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "Association type labels for each locale",
          properties: {
            localeCode: {
              description: "Association type label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const AttributeSchema = {
  example: {
    allowed_extensions: [],
    available_locales: [],
    code: "release_date",
    date_max: "2017-08-08T22:00:00",
    date_min: "2017-06-28T08:00:00",
    decimals_allowed: null,
    default_metric_unit: null,
    default_value: null,
    group: "marketing",
    group_labels: {
      en_US: "Marketing",
      fr_FR: "Marketing",
    },
    labels: {
      en_US: "Sale date",
      fr_FR: "Date des soldes",
    },
    localizable: false,
    max_characters: null,
    max_file_size: null,
    metric_family: null,
    minimum_input_length: null,
    negative_allowed: null,
    number_max: null,
    number_min: null,
    reference_data_name: null,
    scopable: false,
    sort_order: 1,
    type: "pim_catalog_date",
    unique: false,
    useable_as_grid_filter: true,
    validation_regexp: null,
    validation_rule: null,
    wysiwyg_enabled: null,
  },
  properties: {
    allowed_extensions: {
      description:
        "Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`",
      items: {
        type: "string",
      },
      type: "array",
      "x-warning":
        "Only for `pim_catalog_file` or `pim_catalog_image` attribute types",
    },
    available_locales: {
      description:
        "To make the attribute locale specfic, specify here for which locales it is specific",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is an existing and activated locale",
    },
    code: {
      description: "Attribute code",
      type: "string",
      "x-immutable": true,
    },
    date_max: {
      description:
        "Maximum date allowed when the attribute type is `pim_catalog_date`",
      format: "date-time",
      type: "string",
      "x-validation-rules": "The datetime format follows the ISO-8601 norm",
      "x-warning": "Only for `pim_catalog_date` attribute type",
    },
    date_min: {
      description:
        "Minimum date allowed when the attribute type is `pim_catalog_date`",
      format: "date-time",
      type: "string",
      "x-validation-rules": "The datetime format follows the ISO-8601 norm",
      "x-warning": "Only for `pim_catalog_date` attribute type",
    },
    decimals_allowed: {
      description:
        "Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`",
      type: "boolean",
      "x-warning":
        "Only for `pim_catalog_metric`, `pim_catalog_price_collection` or `pim_catalog_number` attribute types",
    },
    default_metric_unit: {
      description:
        "Default metric unit when the attribute type is `pim_catalog_metric`",
      type: "string",
      "x-validation-rules": "Required for `pim_catalog_metric` attribute type",
      "x-warning": "Only for `pim_catalog_metric` attribute type",
    },
    default_value: {
      description:
        "Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)",
      type: "boolean",
      "x-from-version": "5.0",
      "x-warning": "Only for `pim_catalog_boolean` attribute type",
    },
    group: {
      description: "Attribute group",
      type: "string",
      "x-validation-rules": "It is the code of an existing group",
    },
    group_labels: {
      default: {},
      description: "Group labels for each locale",
      properties: {
        localeCode: {
          description: "Group label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-read-only": true,
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    labels: {
      default: {},
      description: "Attribute labels for each locale",
      properties: {
        localeCode: {
          description: "Attribute label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    localizable: {
      default: false,
      description:
        "Whether the attribute is localizable, i.e. can have one value by locale",
      type: "boolean",
      "x-immutable": true,
    },
    max_characters: {
      description:
        "Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`",
      type: "integer",
      "x-warning":
        "Only for `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` attribute types",
    },
    max_file_size: {
      description:
        "Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`",
      type: "string",
      "x-warning":
        "Only for `pim_catalog_file` or `pim_catalog_image` attribute types",
    },
    metric_family: {
      description:
        "Metric family when the attribute type is `pim_catalog_metric`",
      type: "string",
      "x-immutable": true,
      "x-validation-rules": "Required for `pim_catalog_metric` attribute type",
      "x-warning": "Only for `pim_catalog_metric` attribute type",
    },
    negative_allowed: {
      description:
        "Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`",
      type: "boolean",
      "x-warning":
        "Only for `pim_catalog_metric` or `pim_catalog_number` attribute types",
    },
    number_max: {
      description:
        "Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`",
      type: "string",
      "x-warning":
        "Only for `pim_catalog_metric`, `pim_catalog_price_collection` or `pim_catalog_number` attribute types",
    },
    number_min: {
      description:
        "Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`",
      type: "string",
      "x-warning":
        "Only for `pim_catalog_metric`, `pim_catalog_price_collection` or `pim_catalog_number` attribute types",
    },
    reference_data_name: {
      description:
        "Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`",
      type: "string",
      "x-validation-rules":
        "Required only for `akeneo_reference_entity` or `akeneo_reference_entity_collection` or `pim_catalog_asset_collection` attribute types",
      "x-warning":
        "Only for `akeneo_reference_entity` or `akeneo_reference_entity_collection` or `pim_catalog_asset_collection` attribute types",
    },
    scopable: {
      default: false,
      description:
        "Whether the attribute is scopable, i.e. can have one value by channel",
      type: "boolean",
      "x-immutable": true,
    },
    sort_order: {
      default: 0,
      description: "Order of the attribute in its group",
      type: "integer",
      "x-validation-rules": "It is a positive integer",
    },
    table_configuration: {
      description: "Configuration of the Table attribute (columns)",
      items: {
        properties: {
          code: {
            description: "Column code",
            type: "string",
          },
          data_type: {
            description: "Column data type",
            enum: ["select", "text", "number", "boolean"],
            type: "string",
          },
          is_required_for_completeness: {
            default: false,
            description:
              "Defines if the column should be entirely filled for the attribute to be considered complete",
            type: "boolean",
            "x-warning":
              "This value is always true for the first column in a table configuration",
          },
          labels: {
            default: {},
            description: "Column labels for each locale",
            properties: {
              localeCode: {
                description: "Column label for the locale `localeCode`",
                type: "string",
              },
            },
            type: "object",
            "x-validation-rules":
              "The `localeCode` is the code of an existing and activated locale",
          },
          validations: {
            default: {},
            description:
              "User defined validation constraints on the cell content",
            properties: {
              decimals_allowed: {
                description:
                  "whether the value of a numeric cell can hold a decimal part",
                type: "boolean",
                "x-validation-rules": "only for `number` data type columns",
              },
              max: {
                description: "maximum value of a numeric cell",
                type: "number",
                "x-validation-rules": "only for `number` data type columns",
              },
              max_length: {
                description: "maximum length of a text cell",
                type: "number",
                "x-validation-rules": "only for `text` data type columns",
              },
              min: {
                description: "minimum value of a numeric cell",
                type: "number",
                "x-validation-rules": "only for `number` data type columns",
              },
            },
            type: "object",
          },
        },
        required: ["code", "data_type"],
        type: "object",
      },
      type: "array",
      "x-validation-rules":
        "Required only for `pim_catalog_table` attribute type",
      "x-warning": "Only for `pim_catalog_table` attribute type",
    },
    type: {
      description:
        "Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.",
      enum: [
        "pim_catalog_identifier",
        "pim_catalog_metric",
        "pim_catalog_number",
        "pim_catalog_reference_data_multi_select",
        "pim_catalog_reference_data_simple_select",
        "pim_catalog_simpleselect",
        "pim_catalog_multiselect",
        "pim_catalog_date",
        "pim_catalog_textarea",
        "pim_catalog_text",
        "pim_catalog_file",
        "pim_catalog_image",
        "pim_catalog_price_collection",
        "pim_catalog_boolean",
        "akeneo_reference_entity",
        "akeneo_reference_entity_collection",
        "pim_catalog_asset_collection",
      ],
      type: "string",
      "x-immutable": true,
      "x-validation-rules": "The type is one of the following values",
    },
    unique: {
      description: "Whether two values for the attribute cannot be the same",
      type: "boolean",
      "x-immutable": true,
    },
    useable_as_grid_filter: {
      description:
        "Whether the attribute can be used as a filter for the product grid in the PIM user interface",
      type: "boolean",
    },
    validation_regexp: {
      description:
        "Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`",
      type: "string",
      "x-validation-rules":
        "Required when the property `validation_rule` is equal to `regexp`",
      "x-warning":
        "Only for `pim_catalog_text` or `pim_catalog_identifier` attribute types",
    },
    validation_rule: {
      description:
        "Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`",
      type: "string",
      "x-validation-rules":
        "Equal to `regexp` when the attribute type is equal to `pim_catalog_identifier`",
      "x-warning":
        "Only for `pim_catalog_text` or `pim_catalog_identifier` attribute types",
    },
    wysiwyg_enabled: {
      description:
        "Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`",
      type: "boolean",
      "x-warning": "Only for `pim_catalog_textarea` attribute type",
    },
  },
  required: ["code", "type", "group"],
  type: "object",
} as const;

export const AttributeGroupSchema = {
  example: {
    attributes: [
      "sku",
      "name",
      "description",
      "response_time",
      "release_date",
      "price",
    ],
    code: "marketing",
    labels: {
      en_US: "Marketing",
      fr_FR: "Marketing",
    },
    sort_order: 4,
  },
  properties: {
    attributes: {
      default: [],
      description: "Attribute codes that compose the attribute group",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is an existing attribute code, an attribute can only be in one attribute group",
    },
    code: {
      description: "Attribute group code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Attribute group labels for each locale",
      properties: {
        localeCode: {
          description: "Attribute group label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    sort_order: {
      default: 0,
      description: "Attribute group order among other attribute groups",
      type: "integer",
      "x-validation-rules": "It is a positive integer",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const AttributeGroupListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        attributes: [
          "sku",
          "name",
          "description",
          "response_time",
          "release_date",
          "price",
        ],
        code: "marketing",
        labels: {
          en_US: "Marketing",
          fr_FR: "Marketing",
        },
        sort_order: 4,
      },
      properties: {
        attributes: {
          default: [],
          description: "Attribute codes that compose the attribute group",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is an existing attribute code, an attribute can only be in one attribute group",
        },
        code: {
          description: "Attribute group code",
          type: "string",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "Attribute group labels for each locale",
          properties: {
            localeCode: {
              description: "Attribute group label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        sort_order: {
          default: 0,
          description: "Attribute group order among other attribute groups",
          type: "integer",
          "x-validation-rules": "It is a positive integer",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const AttributeListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        allowed_extensions: [],
        available_locales: [],
        code: "release_date",
        date_max: "2017-08-08T22:00:00",
        date_min: "2017-06-28T08:00:00",
        decimals_allowed: null,
        default_metric_unit: null,
        default_value: null,
        group: "marketing",
        group_labels: {
          en_US: "Marketing",
          fr_FR: "Marketing",
        },
        labels: {
          en_US: "Sale date",
          fr_FR: "Date des soldes",
        },
        localizable: false,
        max_characters: null,
        max_file_size: null,
        metric_family: null,
        minimum_input_length: null,
        negative_allowed: null,
        number_max: null,
        number_min: null,
        reference_data_name: null,
        scopable: false,
        sort_order: 1,
        type: "pim_catalog_date",
        unique: false,
        useable_as_grid_filter: true,
        validation_regexp: null,
        validation_rule: null,
        wysiwyg_enabled: null,
      },
      properties: {
        allowed_extensions: {
          description:
            "Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`",
          items: {
            type: "string",
          },
          type: "array",
          "x-warning":
            "Only for `pim_catalog_file` or `pim_catalog_image` attribute types",
        },
        available_locales: {
          description:
            "To make the attribute locale specfic, specify here for which locales it is specific",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is an existing and activated locale",
        },
        code: {
          description: "Attribute code",
          type: "string",
          "x-immutable": true,
        },
        date_max: {
          description:
            "Maximum date allowed when the attribute type is `pim_catalog_date`",
          format: "date-time",
          type: "string",
          "x-validation-rules": "The datetime format follows the ISO-8601 norm",
          "x-warning": "Only for `pim_catalog_date` attribute type",
        },
        date_min: {
          description:
            "Minimum date allowed when the attribute type is `pim_catalog_date`",
          format: "date-time",
          type: "string",
          "x-validation-rules": "The datetime format follows the ISO-8601 norm",
          "x-warning": "Only for `pim_catalog_date` attribute type",
        },
        decimals_allowed: {
          description:
            "Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`",
          type: "boolean",
          "x-warning":
            "Only for `pim_catalog_metric`, `pim_catalog_price_collection` or `pim_catalog_number` attribute types",
        },
        default_metric_unit: {
          description:
            "Default metric unit when the attribute type is `pim_catalog_metric`",
          type: "string",
          "x-validation-rules":
            "Required for `pim_catalog_metric` attribute type",
          "x-warning": "Only for `pim_catalog_metric` attribute type",
        },
        default_value: {
          description:
            "Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)",
          type: "boolean",
          "x-from-version": "5.0",
          "x-warning": "Only for `pim_catalog_boolean` attribute type",
        },
        group: {
          description: "Attribute group",
          type: "string",
          "x-validation-rules": "It is the code of an existing group",
        },
        group_labels: {
          default: {},
          description: "Group labels for each locale",
          properties: {
            localeCode: {
              description: "Group label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-read-only": true,
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        labels: {
          default: {},
          description: "Attribute labels for each locale",
          properties: {
            localeCode: {
              description: "Attribute label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        localizable: {
          default: false,
          description:
            "Whether the attribute is localizable, i.e. can have one value by locale",
          type: "boolean",
          "x-immutable": true,
        },
        max_characters: {
          description:
            "Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`",
          type: "integer",
          "x-warning":
            "Only for `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier` attribute types",
        },
        max_file_size: {
          description:
            "Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`",
          type: "string",
          "x-warning":
            "Only for `pim_catalog_file` or `pim_catalog_image` attribute types",
        },
        metric_family: {
          description:
            "Metric family when the attribute type is `pim_catalog_metric`",
          type: "string",
          "x-immutable": true,
          "x-validation-rules":
            "Required for `pim_catalog_metric` attribute type",
          "x-warning": "Only for `pim_catalog_metric` attribute type",
        },
        negative_allowed: {
          description:
            "Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`",
          type: "boolean",
          "x-warning":
            "Only for `pim_catalog_metric` or `pim_catalog_number` attribute types",
        },
        number_max: {
          description:
            "Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`",
          type: "string",
          "x-warning":
            "Only for `pim_catalog_metric`, `pim_catalog_price_collection` or `pim_catalog_number` attribute types",
        },
        number_min: {
          description:
            "Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`",
          type: "string",
          "x-warning":
            "Only for `pim_catalog_metric`, `pim_catalog_price_collection` or `pim_catalog_number` attribute types",
        },
        reference_data_name: {
          description:
            "Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`",
          type: "string",
          "x-validation-rules":
            "Required only for `akeneo_reference_entity` or `akeneo_reference_entity_collection` or `pim_catalog_asset_collection` attribute types",
          "x-warning":
            "Only for `akeneo_reference_entity` or `akeneo_reference_entity_collection` or `pim_catalog_asset_collection` attribute types",
        },
        scopable: {
          default: false,
          description:
            "Whether the attribute is scopable, i.e. can have one value by channel",
          type: "boolean",
          "x-immutable": true,
        },
        sort_order: {
          default: 0,
          description: "Order of the attribute in its group",
          type: "integer",
          "x-validation-rules": "It is a positive integer",
        },
        table_configuration: {
          description: "Configuration of the Table attribute (columns)",
          items: {
            properties: {
              code: {
                description: "Column code",
                type: "string",
              },
              data_type: {
                description: "Column data type",
                enum: ["select", "text", "number", "boolean"],
                type: "string",
              },
              is_required_for_completeness: {
                default: false,
                description:
                  "Defines if the column should be entirely filled for the attribute to be considered complete",
                type: "boolean",
                "x-warning":
                  "This value is always true for the first column in a table configuration",
              },
              labels: {
                default: {},
                description: "Column labels for each locale",
                properties: {
                  localeCode: {
                    description: "Column label for the locale `localeCode`",
                    type: "string",
                  },
                },
                type: "object",
                "x-validation-rules":
                  "The `localeCode` is the code of an existing and activated locale",
              },
              validations: {
                default: {},
                description:
                  "User defined validation constraints on the cell content",
                properties: {
                  decimals_allowed: {
                    description:
                      "whether the value of a numeric cell can hold a decimal part",
                    type: "boolean",
                    "x-validation-rules": "only for `number` data type columns",
                  },
                  max: {
                    description: "maximum value of a numeric cell",
                    type: "number",
                    "x-validation-rules": "only for `number` data type columns",
                  },
                  max_length: {
                    description: "maximum length of a text cell",
                    type: "number",
                    "x-validation-rules": "only for `text` data type columns",
                  },
                  min: {
                    description: "minimum value of a numeric cell",
                    type: "number",
                    "x-validation-rules": "only for `number` data type columns",
                  },
                },
                type: "object",
              },
            },
            required: ["code", "data_type"],
            type: "object",
          },
          type: "array",
          "x-validation-rules":
            "Required only for `pim_catalog_table` attribute type",
          "x-warning": "Only for `pim_catalog_table` attribute type",
        },
        type: {
          description:
            "Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.",
          enum: [
            "pim_catalog_identifier",
            "pim_catalog_metric",
            "pim_catalog_number",
            "pim_catalog_reference_data_multi_select",
            "pim_catalog_reference_data_simple_select",
            "pim_catalog_simpleselect",
            "pim_catalog_multiselect",
            "pim_catalog_date",
            "pim_catalog_textarea",
            "pim_catalog_text",
            "pim_catalog_file",
            "pim_catalog_image",
            "pim_catalog_price_collection",
            "pim_catalog_boolean",
            "akeneo_reference_entity",
            "akeneo_reference_entity_collection",
            "pim_catalog_asset_collection",
          ],
          type: "string",
          "x-immutable": true,
          "x-validation-rules": "The type is one of the following values",
        },
        unique: {
          description:
            "Whether two values for the attribute cannot be the same",
          type: "boolean",
          "x-immutable": true,
        },
        useable_as_grid_filter: {
          description:
            "Whether the attribute can be used as a filter for the product grid in the PIM user interface",
          type: "boolean",
        },
        validation_regexp: {
          description:
            "Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`",
          type: "string",
          "x-validation-rules":
            "Required when the property `validation_rule` is equal to `regexp`",
          "x-warning":
            "Only for `pim_catalog_text` or `pim_catalog_identifier` attribute types",
        },
        validation_rule: {
          description:
            "Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`",
          type: "string",
          "x-validation-rules":
            "Equal to `regexp` when the attribute type is equal to `pim_catalog_identifier`",
          "x-warning":
            "Only for `pim_catalog_text` or `pim_catalog_identifier` attribute types",
        },
        wysiwyg_enabled: {
          description:
            "Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`",
          type: "boolean",
          "x-warning": "Only for `pim_catalog_textarea` attribute type",
        },
      },
      required: ["code", "type", "group"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const AttributeOptionSchema = {
  example: {
    attribute: "a_simple_select",
    code: "black",
    labels: {
      en_US: "Black",
      fr_FR: "Noir",
    },
    sort_order: 2,
  },
  properties: {
    attribute: {
      description: "Code of attribute related to the attribute option",
      type: "string",
      "x-validation-rules":
        "It is the same attribute code as the one given as path parameter",
    },
    code: {
      description: "Code of option",
      type: "string",
    },
    labels: {
      default: {},
      description: "Attribute option labels for each locale",
      properties: {
        localeCode: {
          description: "Attribute option label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    sort_order: {
      description: "Order of attribute option",
      type: "integer",
      "x-validation-rules": "It is a positive integer",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const AttributeOptionListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        attribute: "a_simple_select",
        code: "black",
        labels: {
          en_US: "Black",
          fr_FR: "Noir",
        },
        sort_order: 2,
      },
      properties: {
        attribute: {
          description: "Code of attribute related to the attribute option",
          type: "string",
          "x-validation-rules":
            "It is the same attribute code as the one given as path parameter",
        },
        code: {
          description: "Code of option",
          type: "string",
        },
        labels: {
          default: {},
          description: "Attribute option labels for each locale",
          properties: {
            localeCode: {
              description: "Attribute option label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        sort_order: {
          description: "Order of attribute option",
          type: "integer",
          "x-validation-rules": "It is a positive integer",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const CategorySchema = {
  example: {
    code: "winter_collection",
    labels: {
      en_US: "Winter collection",
      fr_FR: "Collection hiver",
    },
    parent: null,
    position: 1,
    updated: "2021-05-22T12:48:00+02:00",
    values: {
      "description|96b88bf4-c2b7-4b64-a1f9-5d4876c02c26|ecommerce|en_US": {
        attribute_code: "description|96b88bf4-c2b7-4b64-a1f9-5d4876c02c26",
        channel: "ecommerce",
        data: `<p>Winter collection description</p>
`,
        locale: "en_US",
        type: "textarea",
      },
    },
  },
  properties: {
    code: {
      description: "Category code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Category labels for each locale",
      properties: {
        localeCode: {
          description: "Category label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    parent: {
      default: "null",
      description: "Category code of the parent's category",
      type: "string",
      "x-validation-rules":
        "&bull; It is either equal to `null` or to an existing category code. &#10;&bull; If equal to an existing category code, it cannot reference itself.",
    },
    position: {
      description:
        'Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")',
      type: "integer",
      "x-read-only": true,
    },
    updated: {
      description: "Date of the last update",
      format: "dateTime",
      type: "string",
      "x-read-only": true,
    },
    values: {
      default: null,
      description: "Attribute values",
      properties: {
        "attributeCode|attributeUuid|channelCode|localeCode": {
          items: {
            properties: {
              attribute_code: {
                description:
                  "The attribute code with its uuid (attributeCode|attributeUuid)",
                type: "string",
              },
              channel: {
                description:
                  "<a href='api-reference.html#Channel'>Channel</a> code of the attribute value",
                type: "string",
              },
              data: {
                description: "Attribute value",
                type: "object",
              },
              locale: {
                description:
                  "<a href='api-reference.html#Locale'>Locale</a> code of the attribute value",
                type: "string",
              },
              type: {
                description: "The attribute type",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      type: "object",
      "x-read-only": true,
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const CategoryListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "winter_collection",
        labels: {
          en_US: "Winter collection",
          fr_FR: "Collection hiver",
        },
        parent: null,
        position: 1,
        updated: "2021-05-22T12:48:00+02:00",
        values: {
          "description|96b88bf4-c2b7-4b64-a1f9-5d4876c02c26|ecommerce|en_US": {
            attribute_code: "description|96b88bf4-c2b7-4b64-a1f9-5d4876c02c26",
            channel: "ecommerce",
            data: `<p>Winter collection description</p>
`,
            locale: "en_US",
            type: "textarea",
          },
        },
      },
      properties: {
        code: {
          description: "Category code",
          type: "string",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "Category labels for each locale",
          properties: {
            localeCode: {
              description: "Category label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        parent: {
          default: "null",
          description: "Category code of the parent's category",
          type: "string",
          "x-validation-rules":
            "&bull; It is either equal to `null` or to an existing category code. &#10;&bull; If equal to an existing category code, it cannot reference itself.",
        },
        position: {
          description:
            'Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")',
          type: "integer",
          "x-read-only": true,
        },
        updated: {
          description: "Date of the last update",
          format: "dateTime",
          type: "string",
          "x-read-only": true,
        },
        values: {
          default: null,
          description: "Attribute values",
          properties: {
            "attributeCode|attributeUuid|channelCode|localeCode": {
              items: {
                properties: {
                  attribute_code: {
                    description:
                      "The attribute code with its uuid (attributeCode|attributeUuid)",
                    type: "string",
                  },
                  channel: {
                    description:
                      "<a href='api-reference.html#Channel'>Channel</a> code of the attribute value",
                    type: "string",
                  },
                  data: {
                    description: "Attribute value",
                    type: "object",
                  },
                  locale: {
                    description:
                      "<a href='api-reference.html#Locale'>Locale</a> code of the attribute value",
                    type: "string",
                  },
                  type: {
                    description: "The attribute type",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-read-only": true,
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const ChannelSchema = {
  example: {
    category_tree: "master",
    code: "ecommerce",
    conversion_units: {
      weight: "KILOGRAM",
    },
    currencies: ["USD", "EUR"],
    labels: {
      de_DE: "Ecommerce",
      en_US: "Ecommerce",
      fr_FR: "Ecommerce",
    },
    locales: ["de_DE", "en_US", "fr_FR"],
  },
  properties: {
    category_tree: {
      description: "Code of the category tree linked to the channel",
      type: "string",
      "x-validation-rules":
        "It is the code of an existing category code that is a tree (a category without parent)",
    },
    code: {
      description: "Channel code",
      type: "string",
      "x-immutable": true,
    },
    conversion_units: {
      description:
        "Units to which the given metric attributes should be converted when exporting products",
      properties: {
        attributeCode: {
          description:
            "Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "&bull; The `attributeCode` is the code of an existing attribute whose type is `pim_catalog_metric` &#10;&bull; The strings are existing unit codes.",
    },
    currencies: {
      description: "Codes of activated currencies for the channel",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "&bull; Each string of the array is an existing currency code &#10;&bull; At least one currency in the array",
    },
    labels: {
      default: {},
      description: "Channel labels for each locale",
      properties: {
        localeCode: {
          description: "Channel label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    locales: {
      description: "Codes of activated locales for the channel",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "&bull; Each string of the array is an existing locale code &#10;&bull; At least one locale in the array",
    },
  },
  required: ["code", "category_tree", "locales", "currencies"],
  type: "object",
} as const;

export const ChannelListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        category_tree: "master",
        code: "ecommerce",
        conversion_units: {
          weight: "KILOGRAM",
        },
        currencies: ["USD", "EUR"],
        labels: {
          de_DE: "Ecommerce",
          en_US: "Ecommerce",
          fr_FR: "Ecommerce",
        },
        locales: ["de_DE", "en_US", "fr_FR"],
      },
      properties: {
        category_tree: {
          description: "Code of the category tree linked to the channel",
          type: "string",
          "x-validation-rules":
            "It is the code of an existing category code that is a tree (a category without parent)",
        },
        code: {
          description: "Channel code",
          type: "string",
          "x-immutable": true,
        },
        conversion_units: {
          description:
            "Units to which the given metric attributes should be converted when exporting products",
          properties: {
            attributeCode: {
              description:
                "Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "&bull; The `attributeCode` is the code of an existing attribute whose type is `pim_catalog_metric` &#10;&bull; The strings are existing unit codes.",
        },
        currencies: {
          description: "Codes of activated currencies for the channel",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "&bull; Each string of the array is an existing currency code &#10;&bull; At least one currency in the array",
        },
        labels: {
          default: {},
          description: "Channel labels for each locale",
          properties: {
            localeCode: {
              description: "Channel label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        locales: {
          description: "Codes of activated locales for the channel",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "&bull; Each string of the array is an existing locale code &#10;&bull; At least one locale in the array",
        },
      },
      required: ["code", "category_tree", "locales", "currencies"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const CurrencySchema = {
  example: {
    code: "EUR",
    enabled: true,
  },
  properties: {
    code: {
      description: "Currency code",
      type: "string",
      "x-immutable": true,
    },
    enabled: {
      description: "Whether the currency is enabled",
      type: "boolean",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const CurrencyListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "EUR",
        enabled: true,
      },
      properties: {
        code: {
          description: "Currency code",
          type: "string",
          "x-immutable": true,
        },
        enabled: {
          description: "Whether the currency is enabled",
          type: "boolean",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const DeprecatedAssetSchema = {
  example: {
    categories: ["tshirts_assets"],
    code: "tshirt_artemis_main_picture",
    description: "The main picture of the Artemis t-shirt",
    end_of_use: "2019-09-01T00:00:00+0200",
    localizable: false,
    reference_files: [
      {
        _link: {
          download: {
            href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/reference-files/no_locale/download",
          },
          self: {
            href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/reference-files/no_locale",
          },
        },
        code: "7/5/8/e/759e39d48va7b42a55002434fd3d7b6cf3189b7f_tshirt_artemis_main_picture.jpg",
        locale: null,
      },
    ],
    tags: ["tshirts", "red", "summer"],
    variation_files: [
      {
        _link: {
          download: {
            href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/ecommerce/no_locale/download",
          },
          self: {
            href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/ecommerce/no_locale",
          },
        },
        code: "7/5/8/e/758e39d48va7b42a55001434fd3d7b6cf3189b7f_tshirt_artemis_main_picture_ecommerce.jpg",
        locale: null,
        scope: "e_commerce",
      },
      {
        _link: {
          download: {
            href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/print/no_locale/download",
          },
          self: {
            href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/print/no_locale",
          },
        },
        code: "7/5/8/e/759e39d48va7b42a55002434fd3d7b6cf3189b7f_tshirt_artemis_main_picture_print.jpg",
        locale: null,
        scope: "print",
      },
    ],
  },
  properties: {
    categories: {
      default: [],
      description:
        "Codes of the PAM asset categories in which the asset is classified",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing asset category code",
    },
    code: {
      description: "PAM asset code",
      type: "string",
      "x-immutable": true,
    },
    description: {
      default: null,
      description: "Description of the PAM asset",
      type: "string",
    },
    end_of_use: {
      default: null,
      description: "Date on which the PAM asset expire",
      format: "dateTime",
      type: "string",
      "x-validation-rules": "The date follows the ISO 8601 format",
    },
    localizable: {
      default: false,
      description:
        "Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale",
      type: "boolean",
      "x-immutable": true,
    },
    reference_files: {
      description: "Reference files of the PAM asset",
      items: {
        properties: {
          _link: {
            description: "Links to get and download the reference file",
            properties: {
              download: {
                properties: {
                  href: {
                    description: "URI to download the reference file",
                    type: "string",
                  },
                },
                type: "object",
              },
              self: {
                properties: {
                  href: {
                    description: "URI of the reference file entity",
                    type: "string",
                  },
                },
                type: "object",
              },
            },
            type: "object",
          },
          code: {
            description: "Code of the reference file",
            type: "string",
          },
          locale: {
            description: "Locale code of the reference file",
            type: "string",
          },
        },
        type: "object",
      },
      type: "array",
      "x-read-only": true,
    },
    tags: {
      default: [],
      description: "Tags of the PAM asset",
      items: {
        type: "string",
      },
      type: "array",
    },
    variation_files: {
      description: "Variations of the PAM asset",
      items: {
        properties: {
          _link: {
            description: "Links to get and download the variation file",
            properties: {
              download: {
                properties: {
                  href: {
                    description: "URI to download the variation file",
                    type: "string",
                  },
                },
                type: "object",
              },
              self: {
                properties: {
                  href: {
                    description: "URI of the variation entity",
                    type: "string",
                  },
                },
                type: "object",
              },
            },
            type: "object",
          },
          code: {
            description: "Code of the variation",
            type: "string",
          },
          locale: {
            description: "Locale code of the variation",
            type: "string",
          },
          scope: {
            description: "Channel code of the variation",
            type: "string",
          },
        },
        type: "object",
      },
      type: "array",
      "x-read-only": true,
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const DeprecatedAssetCategorySchema = {
  example: {
    code: "front_views",
    labels: {
      en_US: "Front views",
      fr_FR: "Vues de face",
    },
    parent: "pictures",
  },
  properties: {
    code: {
      description: "PAM asset category code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "PAM asset category labels for each locale",
      properties: {
        localeCode: {
          description: "PAM asset category label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    parent: {
      default: "null",
      description: "PAM ssset category code of the parent's asset category",
      type: "string",
      "x-validation-rules":
        "&bull; It is either equal to `null` or to an existing asset category code. &#10;&bull; If equal to an existing asset category code, it cannot reference itself.",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const DeprecatedAssetCategoryListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "front_views",
        labels: {
          en_US: "Front views",
          fr_FR: "Vues de face",
        },
        parent: "pictures",
      },
      properties: {
        code: {
          description: "PAM asset category code",
          type: "string",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "PAM asset category labels for each locale",
          properties: {
            localeCode: {
              description:
                "PAM asset category label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        parent: {
          default: "null",
          description: "PAM ssset category code of the parent's asset category",
          type: "string",
          "x-validation-rules":
            "&bull; It is either equal to `null` or to an existing asset category code. &#10;&bull; If equal to an existing asset category code, it cannot reference itself.",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const DeprecatedAssetListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        categories: ["tshirts_assets"],
        code: "tshirt_artemis_main_picture",
        description: "The main picture of the Artemis t-shirt",
        end_of_use: "2019-09-01T00:00:00+0200",
        localizable: false,
        reference_files: [
          {
            _link: {
              download: {
                href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/reference-files/no_locale/download",
              },
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/reference-files/no_locale",
              },
            },
            code: "7/5/8/e/759e39d48va7b42a55002434fd3d7b6cf3189b7f_tshirt_artemis_main_picture.jpg",
            locale: null,
          },
        ],
        tags: ["tshirts", "red", "summer"],
        variation_files: [
          {
            _link: {
              download: {
                href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/ecommerce/no_locale/download",
              },
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/ecommerce/no_locale",
              },
            },
            code: "7/5/8/e/758e39d48va7b42a55001434fd3d7b6cf3189b7f_tshirt_artemis_main_picture_ecommerce.jpg",
            locale: null,
            scope: "e_commerce",
          },
          {
            _link: {
              download: {
                href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/print/no_locale/download",
              },
              self: {
                href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/print/no_locale",
              },
            },
            code: "7/5/8/e/759e39d48va7b42a55002434fd3d7b6cf3189b7f_tshirt_artemis_main_picture_print.jpg",
            locale: null,
            scope: "print",
          },
        ],
      },
      properties: {
        categories: {
          default: [],
          description:
            "Codes of the PAM asset categories in which the asset is classified",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing asset category code",
        },
        code: {
          description: "PAM asset code",
          type: "string",
          "x-immutable": true,
        },
        description: {
          default: null,
          description: "Description of the PAM asset",
          type: "string",
        },
        end_of_use: {
          default: null,
          description: "Date on which the PAM asset expire",
          format: "dateTime",
          type: "string",
          "x-validation-rules": "The date follows the ISO 8601 format",
        },
        localizable: {
          default: false,
          description:
            "Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale",
          type: "boolean",
          "x-immutable": true,
        },
        reference_files: {
          description: "Reference files of the PAM asset",
          items: {
            properties: {
              _link: {
                description: "Links to get and download the reference file",
                properties: {
                  download: {
                    properties: {
                      href: {
                        description: "URI to download the reference file",
                        type: "string",
                      },
                    },
                    type: "object",
                  },
                  self: {
                    properties: {
                      href: {
                        description: "URI of the reference file entity",
                        type: "string",
                      },
                    },
                    type: "object",
                  },
                },
                type: "object",
              },
              code: {
                description: "Code of the reference file",
                type: "string",
              },
              locale: {
                description: "Locale code of the reference file",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
          "x-read-only": true,
        },
        tags: {
          default: [],
          description: "Tags of the PAM asset",
          items: {
            type: "string",
          },
          type: "array",
        },
        variation_files: {
          description: "Variations of the PAM asset",
          items: {
            properties: {
              _link: {
                description: "Links to get and download the variation file",
                properties: {
                  download: {
                    properties: {
                      href: {
                        description: "URI to download the variation file",
                        type: "string",
                      },
                    },
                    type: "object",
                  },
                  self: {
                    properties: {
                      href: {
                        description: "URI of the variation entity",
                        type: "string",
                      },
                    },
                    type: "object",
                  },
                },
                type: "object",
              },
              code: {
                description: "Code of the variation",
                type: "string",
              },
              locale: {
                description: "Locale code of the variation",
                type: "string",
              },
              scope: {
                description: "Channel code of the variation",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
          "x-read-only": true,
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const DeprecatedAssetReferenceFileSchema = {
  example: {
    _link: {
      download: {
        href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/reference-files/no_locale/download",
      },
    },
    code: "7/5/8/e/759e39d48va7b42a55002434fd3d7b6cf3189b7f_tshirt_artemis_main_picture.jpg",
    locale: null,
  },
  properties: {
    _link: {
      description: "Links to get and download the reference file",
      properties: {
        download: {
          properties: {
            href: {
              description: "URI to download the reference file",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    code: {
      description: "Code of the PAM asset reference file",
      type: "string",
      "x-immutable": true,
    },
    locale: {
      description:
        "Locale of the PAM asset reference file, equal to `null` if the asset is not localizable",
      type: "string",
    },
  },
  type: "object",
} as const;

export const DeprecatedAssetReferenceFileUploadWarningSchema = {
  properties: {
    errors: {
      items: {
        properties: {
          channel: {
            description:
              "Channel for which the variation file generation failed",
            type: "string",
          },
          locale: {
            description:
              "Locale for which the variation file generation failed",
            type: "string",
          },
          message: {
            description:
              "Message explaining why the variation file generation failed",
            type: "string",
          },
        },
        type: "object",
      },
      type: "array",
    },
    message: {
      description: "Message explaining the warning",
      type: "string",
    },
  },
  type: "object",
} as const;

export const DeprecatedAssetTagSchema = {
  example: {
    code: "tshirt",
  },
  properties: {
    code: {
      description: "PAM asset tag code",
      type: "string",
      "x-immutable": true,
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const DeprecatedAssetTagListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "tshirt",
      },
      properties: {
        code: {
          description: "PAM asset tag code",
          type: "string",
          "x-immutable": true,
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const DeprecatedAssetVariationFileSchema = {
  example: {
    _link: {
      download: {
        href: "https://demo.akeneo.com/api/rest/v1/assets/tshirt_artemis_main_picture/variation-files/ecommerce/no_locale/download",
      },
    },
    code: "7/5/8/e/758e39d48va7b42a55001434fd3d7b6cf3189b7f_tshirt_artemis_main_picture_ecommerce.jpg",
    locale: null,
    scope: "ecommerce",
  },
  properties: {
    _link: {
      description: "Links to get and download the reference file",
      properties: {
        download: {
          properties: {
            href: {
              description: "URI to download the variation file",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    code: {
      description: "Code of the PAM asset variation file",
      type: "string",
      "x-immutable": true,
    },
    locale: {
      description:
        "Locale of the PAM asset variation file, equal to `null` if the asset is not localizable",
      type: "string",
    },
    scope: {
      description: "Channel of the PAM asset variation file",
      type: "string",
    },
  },
  type: "object",
} as const;

export const ErrorSchema = {
  properties: {
    code: {
      description: "HTTP status code",
      type: "integer",
    },
    message: {
      description: "Message explaining the error",
      type: "string",
    },
  },
  type: "object",
} as const;

export const ErrorByLineSchema = {
  properties: {
    code: {
      description:
        "Resource code, only filled when the resource is not a product",
      type: "string",
    },
    identifier: {
      description:
        "Resource identifier, only filled when the resource is a product",
      type: "string",
    },
    line: {
      description: "Line number",
      type: "integer",
    },
    message: {
      description: "Message explaining the error",
      type: "string",
    },
    status_code: {
      description:
        'HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code',
      type: "integer",
    },
  },
  type: "object",
} as const;

export const ErrorByLineProductUuidSchema = {
  properties: {
    line: {
      description: "Line number",
      type: "integer",
    },
    message: {
      description: "Message explaining the error",
      type: "string",
    },
    status_code: {
      description:
        'HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code',
      type: "integer",
    },
    uuid: {
      description: "Product uuid",
      type: "string",
    },
  },
  type: "object",
} as const;

export const ErrorByObjectSchema = {
  items: {
    properties: {
      code: {
        description: "Resource code",
        type: "string",
      },
      message: {
        description: "Message explaining the error",
        type: "string",
      },
      status_code: {
        description:
          'HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code',
        type: "integer",
      },
    },
    type: "object",
  },
  type: "array",
} as const;

export const FamilySchema = {
  example: {
    attribute_as_image: "picture",
    attribute_as_label: "name",
    attribute_requirements: {
      ecommerce: ["sku", "name", "description", "price", "color"],
      tablet: ["sku", "name", "description", "price"],
    },
    attributes: ["sku", "name", "description", "price", "color", "picture"],
    code: "caps",
    labels: {
      en_US: "Caps",
      fr_FR: "Casquettes",
    },
  },
  properties: {
    attribute_as_image: {
      default: "null",
      description:
        "Attribute code used as the main picture in the user interface (only since v2.0)",
      type: "string",
      "x-from-version": "2.0",
      "x-validation-rules":
        "&bull; It is equal to an existing attribute code &#10;&bull; This attribute code is in the array of the property `attributes` &#10;&bull; The type of this attribute is `pim_catalog_image`. Since v2.1, you can also use a `pim_assets_collection` attribute type",
    },
    attribute_as_label: {
      description: "Attribute code used as label",
      type: "string",
      "x-validation-rules":
        "&bull; It is equal to an existing attribute code &#10;&bull; This attribute code is in the array of the property `attributes` &#10;&bull; The type of this attribute is either `pim_catalog_identifier` or `pim_catalog_text`",
    },
    attribute_requirements: {
      description:
        "Attributes codes of the family that are required for the completeness calculation for each channel",
      properties: {
        channelCode: {
          items: {
            description:
              "Attributes codes of the family that are required for the completeness calculation for the channel `channelCode`",
            type: "string",
          },
          type: "array",
        },
      },
      type: "object",
      "x-validation-rules":
        "&bull; Each string of these arrays is an existing attribute code &#10;&bull; These attribute codes are in the array of the property `attributes` &#10;&bull; The `channelCode` is the code of an existing and activated channel",
    },
    attributes: {
      default: [],
      description: "Attributes codes that compose the family",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is an existing attribute code",
    },
    code: {
      description: "Family code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Family labels for each locale",
      properties: {
        localeCode: {
          description: "Family label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
  },
  required: ["code", "attribute_as_label"],
  type: "object",
} as const;

export const FamilyListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        attribute_as_image: "picture",
        attribute_as_label: "name",
        attribute_requirements: {
          ecommerce: ["sku", "name", "description", "price", "color"],
          tablet: ["sku", "name", "description", "price"],
        },
        attributes: ["sku", "name", "description", "price", "color", "picture"],
        code: "caps",
        labels: {
          en_US: "Caps",
          fr_FR: "Casquettes",
        },
      },
      properties: {
        attribute_as_image: {
          default: "null",
          description:
            "Attribute code used as the main picture in the user interface (only since v2.0)",
          type: "string",
          "x-from-version": "2.0",
          "x-validation-rules":
            "&bull; It is equal to an existing attribute code &#10;&bull; This attribute code is in the array of the property `attributes` &#10;&bull; The type of this attribute is `pim_catalog_image`. Since v2.1, you can also use a `pim_assets_collection` attribute type",
        },
        attribute_as_label: {
          description: "Attribute code used as label",
          type: "string",
          "x-validation-rules":
            "&bull; It is equal to an existing attribute code &#10;&bull; This attribute code is in the array of the property `attributes` &#10;&bull; The type of this attribute is either `pim_catalog_identifier` or `pim_catalog_text`",
        },
        attribute_requirements: {
          description:
            "Attributes codes of the family that are required for the completeness calculation for each channel",
          properties: {
            channelCode: {
              items: {
                description:
                  "Attributes codes of the family that are required for the completeness calculation for the channel `channelCode`",
                type: "string",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "&bull; Each string of these arrays is an existing attribute code &#10;&bull; These attribute codes are in the array of the property `attributes` &#10;&bull; The `channelCode` is the code of an existing and activated channel",
        },
        attributes: {
          default: [],
          description: "Attributes codes that compose the family",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is an existing attribute code",
        },
        code: {
          description: "Family code",
          type: "string",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "Family labels for each locale",
          properties: {
            localeCode: {
              description: "Family label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
      },
      required: ["code", "attribute_as_label"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const FamilyVariantSchema = {
  example: {
    code: "shoesVariant",
    labels: {
      en_US: "Shoes variant",
      fr_FR: "Variante de chaussures",
    },
    variant_attribute_sets: [
      {
        attributes: ["color", "material"],
        axes: ["color"],
        level: 1,
      },
      {
        attributes: ["sku", "size"],
        axes: ["size"],
        level: 2,
      },
    ],
  },
  properties: {
    code: {
      description: "Family variant code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Family variant labels for each locale",
      properties: {
        localeCode: {
          description: "Family variant label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    variant_attribute_sets: {
      description: "Attributes distribution according to the enrichment level",
      items: {
        description: "Enrichment level",
        properties: {
          attributes: {
            default: [],
            description: "Codes of attributes bind to this enrichment level",
            items: {
              type: "string",
            },
            type: "array",
            "x-validation-rules":
              "&bull; Should be an array of existing attribute codes &#10;&bull; These attributes should belong to the family of the family variant &#10;&bull; Attributes used as attribute in one level cannot be used as axes or as attributes in the other level &#10;&bull; Attributes that are `unique value` or `identifier` are automatically distributed to the lower level.",
          },
          axes: {
            default: [],
            description: "Codes of attributes used as variant axes",
            items: {
              type: "string",
            },
            type: "array",
            "x-immutable": true,
            "x-validation-rules":
              "&bull; Should be an array of maximum 5 existing attribute codes &#10;&bull; These attributes should belong to the family of the family variant &#10;&bull; Only the following attribute types are allowed: `simple select`, `multi select`, `reference data`, `metric`, `boolean` &#10;&bull; Attributes cannot be scopable, nor localizable nor locale specific &#10;&bull; Attributes used as axes in one level cannot be used as axes or as attributes in the other level",
          },
          level: {
            description: "Enrichment level",
            type: "integer",
            "x-immutable": true,
            "x-validation-rules":
              "&bull; Number representing the level of the attribute set. &#10;&bull; It should be equal to 1 or 2. &#10;&bull; If you specify the level 2, you have to specify the level 1 as well.",
          },
        },
        required: ["level", "axes"],
        type: "object",
      },
      type: "array",
    },
  },
  required: ["code", "variant_attribute_sets"],
  type: "object",
} as const;

export const FamilyVariantListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "shoesVariant",
        labels: {
          en_US: "Shoes variant",
          fr_FR: "Variante de chaussures",
        },
        variant_attribute_sets: [
          {
            attributes: ["color", "material"],
            axes: ["color"],
            level: 1,
          },
          {
            attributes: ["sku", "size"],
            axes: ["size"],
            level: 2,
          },
        ],
      },
      properties: {
        code: {
          description: "Family variant code",
          type: "string",
          "x-immutable": true,
        },
        labels: {
          default: {},
          description: "Family variant labels for each locale",
          properties: {
            localeCode: {
              description: "Family variant label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
        variant_attribute_sets: {
          description:
            "Attributes distribution according to the enrichment level",
          items: {
            description: "Enrichment level",
            properties: {
              attributes: {
                default: [],
                description:
                  "Codes of attributes bind to this enrichment level",
                items: {
                  type: "string",
                },
                type: "array",
                "x-validation-rules":
                  "&bull; Should be an array of existing attribute codes &#10;&bull; These attributes should belong to the family of the family variant &#10;&bull; Attributes used as attribute in one level cannot be used as axes or as attributes in the other level &#10;&bull; Attributes that are `unique value` or `identifier` are automatically distributed to the lower level.",
              },
              axes: {
                default: [],
                description: "Codes of attributes used as variant axes",
                items: {
                  type: "string",
                },
                type: "array",
                "x-immutable": true,
                "x-validation-rules":
                  "&bull; Should be an array of maximum 5 existing attribute codes &#10;&bull; These attributes should belong to the family of the family variant &#10;&bull; Only the following attribute types are allowed: `simple select`, `multi select`, `reference data`, `metric`, `boolean` &#10;&bull; Attributes cannot be scopable, nor localizable nor locale specific &#10;&bull; Attributes used as axes in one level cannot be used as axes or as attributes in the other level",
              },
              level: {
                description: "Enrichment level",
                type: "integer",
                "x-immutable": true,
                "x-validation-rules":
                  "&bull; Number representing the level of the attribute set. &#10;&bull; It should be equal to 1 or 2. &#10;&bull; If you specify the level 2, you have to specify the level 1 as well.",
              },
            },
            required: ["level", "axes"],
            type: "object",
          },
          type: "array",
        },
      },
      required: ["code", "variant_attribute_sets"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const ItemListSchema = {
  properties: {
    _links: {
      properties: {
        self: {
          properties: {
            href: {
              description: "URI of the resource",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const LocaleSchema = {
  example: {
    code: "en_US",
    enable: true,
  },
  properties: {
    code: {
      description: "Locale code",
      type: "string",
      "x-immutable": true,
    },
    enabled: {
      default: false,
      description: "Whether the locale is enabled",
      type: "boolean",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const LocaleListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "en_US",
        enable: true,
      },
      properties: {
        code: {
          description: "Locale code",
          type: "string",
          "x-immutable": true,
        },
        enabled: {
          default: false,
          description: "Whether the locale is enabled",
          type: "boolean",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const MeasureFamilySchema = {
  example: {
    code: "Area",
    standard: "SQUARE_METER",
    units: [
      {
        code: "SQUARE_MILLIMETER",
        convert: {
          mul: "0.001",
        },
        symbol: "mm²",
      },
      {
        code: "SQUARE_CENTIMETER",
        convert: {
          mul: "0.001",
        },
        symbol: "cm²",
      },
    ],
  },
  properties: {
    code: {
      description: "Measure family code",
      type: "string",
      "x-immutable": true,
    },
    standard: {
      description: "Measure family standard",
      type: "string",
      "x-immutable": true,
    },
    units: {
      description: "Family units",
      items: {
        properties: {
          code: {
            description: "Measure code",
            type: "string",
            "x-immutable": true,
          },
          convert: {
            description:
              "Mathematic operation to convert the unit into the standard unit",
            type: "object",
          },
          symbol: {
            description: "Measure symbol",
            type: "string",
            "x-immutable": true,
          },
        },
        type: "object",
      },
      type: "array",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const MeasureFamilyListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "Area",
        standard: "SQUARE_METER",
        units: [
          {
            code: "SQUARE_MILLIMETER",
            convert: {
              mul: "0.001",
            },
            symbol: "mm²",
          },
          {
            code: "SQUARE_CENTIMETER",
            convert: {
              mul: "0.001",
            },
            symbol: "cm²",
          },
        ],
      },
      properties: {
        code: {
          description: "Measure family code",
          type: "string",
          "x-immutable": true,
        },
        standard: {
          description: "Measure family standard",
          type: "string",
          "x-immutable": true,
        },
        units: {
          description: "Family units",
          items: {
            properties: {
              code: {
                description: "Measure code",
                type: "string",
                "x-immutable": true,
              },
              convert: {
                description:
                  "Mathematic operation to convert the unit into the standard unit",
                type: "object",
              },
              symbol: {
                description: "Measure symbol",
                type: "string",
                "x-immutable": true,
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const MeasurementFamilySchema = {
  example: {
    code: "AREA",
    labels: {
      en_US: "Area",
      fr_FR: "Surface",
    },
    standard_unit_code: "SQUARE_METER",
    units: {
      SQUARE_CENTIMETER: {
        code: "SQUARE_CENTIMETER",
        convert_from_standard: [
          {
            operator: "mul",
            value: "0.0001",
          },
        ],
        labels: {
          en_US: "Square centimeter",
          fr_FR: "Centimètre carré",
        },
        symbol: "cm²",
      },
      SQUARE_METER: {
        code: "SQUARE_METER",
        convert_from_standard: [
          {
            operator: "mul",
            value: "1",
          },
        ],
        labels: {
          en_US: "Square meter",
          fr_FR: "Mètre carré",
        },
        symbol: "m²",
      },
      SQUARE_MILLIMETER: {
        code: "SQUARE_MILLIMETER",
        convert_from_standard: [
          {
            operator: "mul",
            value: "0.000001",
          },
        ],
        labels: {
          en_US: "Square millimeter",
          fr_FR: "Millimètre carré",
        },
        symbol: "mm²",
      },
    },
  },
  properties: {
    code: {
      description: "Measurement family code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Measurement family labels for each locale",
      properties: {
        localeCode: {
          description: "Measurement family label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    standard_unit_code: {
      description:
        "Unit code used as the standard unit for this measurement family",
      type: "string",
      "x-immutable": true,
      "x-validation-rules":
        "The unit code exists in the list of the property `units`",
    },
    units: {
      description:
        "Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
      properties: {
        unitCode: {
          properties: {
            code: {
              description:
                "Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              type: "string",
              "x-immutable": true,
            },
            convert_from_standard: {
              description:
                "Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              items: {
                properties: {
                  operator: {
                    description:
                      "Operator for a conversion operation to convert the unit in the standard unit",
                    enum: ["mul", "div", "add", "sub"],
                    type: "string",
                    "x-validation-rules":
                      "The operator is one of the following values",
                  },
                  value: {
                    description:
                      "Value for a conversion operation to convert the unit in the standard unit",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
              "x-validation-rules":
                "&bull; The conversion operations can't be updated when a product attribute is linked to this measurement family &#10;&bull; At least one conversion operation per unit is required",
            },
            labels: {
              default: {},
              description:
                "Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              properties: {
                localeCode: {
                  description: "Unit label for the locale `localeCode`",
                  type: "string",
                },
              },
              type: "object",
              "x-validation-rules":
                "The `localeCode` is the code of an existing and activated locale",
            },
            symbol: {
              description:
                "Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-validation-rules":
        "A unit can't be added when a product attribute is linked to this measurement family",
    },
  },
  required: ["code", "standard_unit_code", "units"],
  type: "object",
} as const;

export const MeasurementFamilyListSchema = {
  example: {
    code: "AREA",
    labels: {
      en_US: "Area",
      fr_FR: "Surface",
    },
    standard_unit_code: "SQUARE_METER",
    units: {
      SQUARE_CENTIMETER: {
        code: "SQUARE_CENTIMETER",
        convert_from_standard: [
          {
            operator: "mul",
            value: "0.0001",
          },
        ],
        labels: {
          en_US: "Square centimeter",
          fr_FR: "Centimètre carré",
        },
        symbol: "cm²",
      },
      SQUARE_METER: {
        code: "SQUARE_METER",
        convert_from_standard: [
          {
            operator: "mul",
            value: "1",
          },
        ],
        labels: {
          en_US: "Square meter",
          fr_FR: "Mètre carré",
        },
        symbol: "m²",
      },
      SQUARE_MILLIMETER: {
        code: "SQUARE_MILLIMETER",
        convert_from_standard: [
          {
            operator: "mul",
            value: "0.000001",
          },
        ],
        labels: {
          en_US: "Square millimeter",
          fr_FR: "Millimètre carré",
        },
        symbol: "mm²",
      },
    },
  },
  properties: {
    code: {
      description: "Measurement family code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Measurement family labels for each locale",
      properties: {
        localeCode: {
          description: "Measurement family label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    standard_unit_code: {
      description:
        "Unit code used as the standard unit for this measurement family",
      type: "string",
      "x-immutable": true,
      "x-validation-rules":
        "The unit code exists in the list of the property `units`",
    },
    units: {
      description:
        "Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
      properties: {
        unitCode: {
          properties: {
            code: {
              description:
                "Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              type: "string",
              "x-immutable": true,
            },
            convert_from_standard: {
              description:
                "Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              items: {
                properties: {
                  operator: {
                    description:
                      "Operator for a conversion operation to convert the unit in the standard unit",
                    enum: ["mul", "div", "add", "sub"],
                    type: "string",
                    "x-validation-rules":
                      "The operator is one of the following values",
                  },
                  value: {
                    description:
                      "Value for a conversion operation to convert the unit in the standard unit",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
              "x-validation-rules":
                "&bull; The conversion operations can't be updated when a product attribute is linked to this measurement family &#10;&bull; At least one conversion operation per unit is required",
            },
            labels: {
              default: {},
              description:
                "Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              properties: {
                localeCode: {
                  description: "Unit label for the locale `localeCode`",
                  type: "string",
                },
              },
              type: "object",
              "x-validation-rules":
                "The `localeCode` is the code of an existing and activated locale",
            },
            symbol: {
              description:
                "Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-validation-rules":
        "A unit can't be added when a product attribute is linked to this measurement family",
    },
  },
  required: ["code", "standard_unit_code", "units"],
  type: "object",
} as const;

export const MediaFileSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            download: {
              properties: {
                href: {
                  description: "URI to download the binaries of the media file",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-read-only": true,
        },
      },
      type: "object",
    },
    {
      example: {
        code: "7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg",
        extension: "jpg",
        mime_type: "image/jpeg",
        original_filename: "10806799-1356.jpg",
        size: 16070,
      },
      properties: {
        code: {
          description: "Media file code",
          type: "string",
          "x-immutable": true,
        },
        extension: {
          description: "Extension of the media file",
          type: "string",
          "x-read-only": true,
        },
        mime_type: {
          description: "Mime type of the media file",
          type: "string",
          "x-read-only": true,
        },
        original_filename: {
          description: "Original filename of the media file",
          type: "string",
        },
        size: {
          description: "Size of the media file",
          type: "integer",
          "x-read-only": true,
        },
      },
      type: "object",
    },
  ],
  example: {
    _links: {
      download: {
        href: "https://demo.akeneo.com/api/rest/v1/media-files/7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg/download",
      },
    },
    code: "7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg",
    extension: "jpg",
    mime_type: "image/jpeg",
    original_filename: "10806799-1356.jpg",
    size: 16070,
  },
} as const;

export const MediaFileItemListSchema = {
  properties: {
    _links: {
      properties: {
        download: {
          properties: {
            href: {
              description: "URI to download the binaries of the media file",
              type: "string",
            },
          },
          type: "object",
        },
        self: {
          properties: {
            href: {
              description: "URI to get the metadata of the media file",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const MediaFileListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            download: {
              properties: {
                href: {
                  description: "URI to download the binaries of the media file",
                  type: "string",
                },
              },
              type: "object",
            },
            self: {
              properties: {
                href: {
                  description: "URI to get the metadata of the media file",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "7/5/8/e/758e39d48ea7b42a55091434fd3d8b6cf3189b7f_10806799_1356.jpg",
        extension: "jpg",
        mime_type: "image/jpeg",
        original_filename: "10806799-1356.jpg",
        size: 16070,
      },
      properties: {
        code: {
          description: "Media file code",
          type: "string",
          "x-immutable": true,
        },
        extension: {
          description: "Extension of the media file",
          type: "string",
          "x-read-only": true,
        },
        mime_type: {
          description: "Mime type of the media file",
          type: "string",
          "x-read-only": true,
        },
        original_filename: {
          description: "Original filename of the media file",
          type: "string",
        },
        size: {
          description: "Size of the media file",
          type: "integer",
          "x-read-only": true,
        },
      },
      type: "object",
    },
  ],
  type: "object",
} as const;

export const PaginationSchema = {
  properties: {
    _links: {
      properties: {
        first: {
          properties: {
            href: {
              description: "URI of the first page of resources",
              type: "string",
            },
          },
          type: "object",
        },
        next: {
          properties: {
            href: {
              description: "URI of the next page of resources",
              type: "string",
            },
          },
          type: "object",
        },
        previous: {
          properties: {
            href: {
              description: "URI of the previous page of resources",
              type: "string",
            },
          },
          type: "object",
        },
        self: {
          properties: {
            href: {
              description: "URI of the current page of resources",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    current_page: {
      description: "Current page number",
      type: "integer",
    },
  },
  type: "object",
} as const;

export const ProductSchema = {
  example: {
    associations: {
      PACK: {
        groups: [],
        product_models: [],
        products: ["sunglass"],
      },
    },
    categories: ["summer_collection"],
    completenesses: [
      {
        data: 10,
        locale: "en_US",
        scope: "ecommerce",
      },
      {
        data: 20,
        locale: "fr_FR",
        scope: "ecommerce",
      },
      {
        data: 30,
        locale: "en_US",
        scope: "tablet",
      },
      {
        data: 40,
        locale: "fr_FR",
        scope: "tablet",
      },
    ],
    created: "2016-06-23T18:24:44+02:00",
    enabled: true,
    family: "tshirt",
    groups: [],
    identifier: "top",
    parent: null,
    quality_scores: [
      {
        data: "A",
        locale: "en_US",
        scope: "ecommerce",
      },
      {
        data: "B",
        locale: "fr_FR",
        scope: "ecommerce",
      },
      {
        data: "D",
        locale: "en_US",
        scope: "tablet",
      },
      {
        data: "E",
        locale: "fr_FR",
        scope: "tablet",
      },
    ],
    quantified_associations: {
      PRODUCT_SET: {
        product_models: [
          {
            identifier: "model-biker-jacket-leather",
            quantity: 2,
          },
        ],
        products: [
          {
            identifier: "cap",
            quantity: 2,
          },
          {
            identifier: "shoes",
            quantity: 1,
          },
        ],
      },
    },
    updated: "2016-06-25T17:56:12+02:00",
    values: {
      collection: [
        {
          data: ["winter_2016"],
          linked_data: {
            winter_2016: {
              attribute: "collection",
              code: "winter_2016",
              labels: {
                en_US: "Winter 2016",
                fr_FR: "Hiver 2016",
              },
            },
          },
          locale: null,
          scope: null,
        },
      ],
      color: [
        {
          data: "black",
          linked_data: {
            attribute: "color",
            code: "black",
            labels: {
              en_US: "Black",
              fr_FR: "Noir",
            },
          },
          locale: null,
          scope: null,
        },
      ],
      description: [
        {
          data: "Summer top",
          locale: "en_US",
          scope: "ecommerce",
        },
        {
          data: "Top",
          locale: "en_US",
          scope: "tablet",
        },
        {
          data: "Débardeur pour l'été",
          locale: "fr_FR",
          scope: "ecommerce",
        },
        {
          data: "Débardeur",
          locale: "fr_FR",
          scope: "tablet",
        },
      ],
      name: [
        {
          data: "Top",
          locale: "en_US",
          scope: null,
        },
        {
          data: "Débardeur",
          locale: "fr_FR",
          scope: null,
        },
      ],
      price: [
        {
          data: [
            {
              amount: "15.5",
              currency: "EUR",
            },
            {
              amount: "15",
              currency: "USD",
            },
          ],
          locale: null,
          scope: null,
        },
      ],
      size: [
        {
          data: "m",
          linked_data: {
            attribute: "size",
            code: "m",
            labels: {
              en_US: "M",
              fr_FR: "M",
            },
          },
          locale: null,
          scope: null,
        },
      ],
    },
  },
  properties: {
    associations: {
      description:
        "Several associations related to groups, product models and/or other products, grouped by association types",
      properties: {
        associationTypeCode: {
          properties: {
            groups: {
              description:
                "Array of groups codes with which the product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
            product_models: {
              description:
                "Array of product model codes with which the product is in relation (only available since the v2.1)",
              items: {
                type: "string",
              },
              type: "array",
              "x-from-version": "2.1",
            },
            products: {
              description:
                "Array of product identifiers with which the product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-validation-rules":
        "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Each string in the array of the property `product_models` is the code of an existing product model.",
    },
    categories: {
      default: [],
      description:
        "Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing category code",
    },
    completenesses: {
      description:
        'Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")',
      items: {
        properties: {
          data: {
            type: "integer",
          },
          locale: {
            type: "string",
          },
          scope: {
            type: "string",
          },
        },
        type: "object",
      },
      type: "array",
      "x-from-version": "7.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    created: {
      description: "Date of creation",
      format: "dateTime",
      type: "string",
      "x-immutable": true,
      "x-read-only": true,
    },
    enabled: {
      default: true,
      description: "Whether the product is enabled",
      type: "boolean",
    },
    family: {
      default: "null only in the case of a non variant product",
      description:
        "<a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.",
      type: "string",
      "x-validation-rules":
        "It is equal to an existing family code. In the case of variant product, the given family should be the same as the product model family.",
    },
    groups: {
      default: [],
      description: "Codes of the groups to which the product belong",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing group code",
    },
    identifier: {
      description:
        "Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute",
      type: "string",
    },
    metadata: {
      description:
        "More information around the product (only available since the v2.0 in the Enterprise Edition)",
      properties: {
        workflow_status: {
          description: "Status of the product regarding the user permissions",
          enum: [
            "read_only",
            "draft_in_progress",
            "proposal_waiting_for_approval",
            "working_copy",
          ],
          type: "string",
        },
      },
      type: "object",
      "x-from-version": "2.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    parent: {
      default: "null",
      description:
        "Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.",
      type: "string",
      "x-from-version": "2.0",
      "x-validation-rules":
        "It is equal to an existing product model code only if the product is variant otherwise it's equal to null",
    },
    quality_scores: {
      description:
        'Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")',
      type: "object",
      "x-from-version": "5.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    quantified_associations: {
      description:
        "Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)",
      properties: {
        quantifiedAssociationTypeCode: {
          properties: {
            product_models: {
              description:
                "Array of objects containing product model codes and quantities with which the product is in relation",
              items: {
                properties: {
                  code: {
                    type: "string",
                  },
                  quantity: {
                    type: "integer",
                  },
                },
                type: "object",
              },
              type: "array",
            },
            products: {
              description:
                "Array of objects containing product identifiers and quantities with which the product is in relation",
              items: {
                properties: {
                  identifier: {
                    type: "string",
                  },
                  quantity: {
                    type: "integer",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-from-version": "5.0",
      "x-validation-rules":
        "&bull; The `quantifiedAssociationTypeCode` is the code of an existing association type which provides quantity information. &#10;&bull; Each object in the array of the property `products` contains the identifier of an existing product and the quantity of it.",
    },
    updated: {
      description: "Date of the last update",
      format: "dateTime",
      type: "string",
      "x-read-only": true,
    },
    uuid: {
      description: "Product UUID",
      type: "string",
      "x-from-version": "7.0",
    },
    values: {
      description:
        "Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
      properties: {
        attributeCode: {
          items: {
            properties: {
              data: {
                description:
                  "Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.",
                type: "object",
              },
              linked_data: {
                description: `Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the \`linked_data\` format</a> section for more details.`,
                properties: {
                  attribute: {
                    type: "string",
                  },
                  code: {
                    type: "string",
                  },
                  labels: {
                    type: "object",
                  },
                },
                type: "object",
                "x-from-version": "5.0",
                "x-read-only": true,
              },
              locale: {
                description:
                  "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                type: "string",
              },
              scope: {
                description:
                  "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      type: "object",
      "x-validation-rules":
        "Validation rules detailed in Product values section",
    },
  },
  required: ["identifier"],
  type: "object",
} as const;

export const ProductExamplesSchema = {
  "x-1.7": {
    _embedded: {
      items: [
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/top",
            },
          },
          associations: {
            PACK: {
              groups: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "tshirt",
          groups: [],
          identifier: "top",
          quantified_associations: {
            PRODUCT_SET: {
              products: [
                {
                  identifier: "cap",
                  quantity: 2,
                },
                {
                  identifier: "shoes",
                  quantity: 1,
                },
              ],
            },
          },
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            collection: [
              {
                data: ["winter_2016"],
                locale: null,
                scope: null,
              },
            ],
            color: [
              {
                data: "black",
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Summer top",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Top",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Débardeur pour l'été",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Top",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "15.5",
                    currency: "EUR",
                  },
                  {
                    amount: "15",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            size: [
              {
                data: "m",
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/cap",
            },
          },
          associations: {
            PACK: {
              groups: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "caps",
          groups: [],
          identifier: "cap",
          quantified_associations: {},
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            color: [
              {
                data: "black",
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Cap",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Casquette",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "20",
                    currency: "EUR",
                  },
                  {
                    amount: "20",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/sweat",
            },
          },
          associations: {},
          categories: ["winter_collection"],
          created: "2016-06-23T11:24:44+02:00",
          enabled: true,
          family: null,
          groups: [],
          identifier: "sweat",
          quantified_associations: {},
          updated: "2016-06-23T11:24:44+02:00",
          values: {},
        },
      ],
    },
    _links: {
      first: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=1&limit=3",
      },
      next: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=4&limit=3",
      },
      previous: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=2&limit=3",
      },
      self: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=3&limit=3",
      },
    },
    current_page: 3,
  },
  "x-2.0": {
    _embedded: {
      items: [
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/top",
            },
          },
          associations: {
            PACK: {
              groups: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "tshirt",
          groups: [],
          identifier: "top",
          parent: null,
          quantified_associations: {
            PRODUCT_SET: {
              products: [
                {
                  identifier: "cap",
                  quantity: 2,
                },
                {
                  identifier: "shoes",
                  quantity: 1,
                },
              ],
            },
          },
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            collection: [
              {
                data: ["winter_2016"],
                locale: null,
                scope: null,
              },
            ],
            color: [
              {
                data: "black",
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Summer top",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Top",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Débardeur pour l'été",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Top",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "15.5",
                    currency: "EUR",
                  },
                  {
                    amount: "15",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            size: [
              {
                data: "m",
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/cap",
            },
          },
          associations: {
            PACK: {
              groups: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "caps",
          groups: [],
          identifier: "cap",
          parent: null,
          quantified_associations: {},
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            color: [
              {
                data: "black",
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Cap",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Casquette",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "20",
                    currency: "EUR",
                  },
                  {
                    amount: "20",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/sweat",
            },
          },
          associations: {},
          categories: ["winter_collection"],
          created: "2016-06-23T11:24:44+02:00",
          enabled: true,
          family: null,
          groups: [],
          identifier: "sweat",
          parent: null,
          quantified_associations: {},
          updated: "2016-06-23T11:24:44+02:00",
          values: {},
        },
      ],
    },
    _links: {
      first: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=1&limit=3",
      },
      next: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=4&limit=3",
      },
      previous: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=2&limit=3",
      },
      self: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=3&limit=3",
      },
    },
    current_page: 3,
  },
  "x-2.1": {
    _embedded: {
      items: [
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/top",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "tshirt",
          groups: [],
          identifier: "top",
          parent: null,
          quantified_associations: {
            PRODUCT_SET: {
              product_models: [
                {
                  identifier: "model-biker-jacket-leather",
                  quantity: 2,
                },
              ],
              products: [
                {
                  identifier: "cap",
                  quantity: 2,
                },
                {
                  identifier: "shoes",
                  quantity: 1,
                },
              ],
            },
          },
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            collection: [
              {
                data: ["winter_2016"],
                locale: null,
                scope: null,
              },
            ],
            color: [
              {
                data: "black",
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Summer top",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Top",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Débardeur pour l'été",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Top",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "15.5",
                    currency: "EUR",
                  },
                  {
                    amount: "15",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            size: [
              {
                data: "m",
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/cap",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "caps",
          groups: [],
          identifier: "cap",
          parent: null,
          quantified_associations: {},
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            color: [
              {
                data: "black",
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Cap",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Casquette",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "20",
                    currency: "EUR",
                  },
                  {
                    amount: "20",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/sweat",
            },
          },
          associations: {},
          categories: ["winter_collection"],
          created: "2016-06-23T11:24:44+02:00",
          enabled: true,
          family: null,
          groups: [],
          identifier: "sweat",
          parent: null,
          quantified_associations: {},
          updated: "2016-06-23T11:24:44+02:00",
          values: {},
        },
      ],
    },
    _links: {
      first: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=1&limit=3",
      },
      next: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=4&limit=3",
      },
      previous: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=2&limit=3",
      },
      self: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=3&limit=3",
      },
    },
    current_page: 3,
  },
  "x-5.0": {
    _embedded: {
      items: [
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/top",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "tshirt",
          groups: [],
          identifier: "top",
          parent: null,
          quality_scores: [
            {
              data: "A",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "B",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "D",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "E",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          quantified_associations: {
            PRODUCT_SET: {
              product_models: [
                {
                  identifier: "model-biker-jacket-leather",
                  quantity: 2,
                },
              ],
              products: [
                {
                  identifier: "cap",
                  quantity: 2,
                },
                {
                  identifier: "shoes",
                  quantity: 1,
                },
              ],
            },
          },
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            collection: [
              {
                data: ["winter_2016"],
                linked_data: {
                  winter_2016: {
                    attribute: "collection",
                    code: "winter_2016",
                    labels: {
                      en_US: "Winter 2016",
                      fr_FR: "Hiver 2016",
                    },
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            color: [
              {
                data: "black",
                linked_data: {
                  attribute: "color",
                  code: "black",
                  labels: {
                    en_US: "Black",
                    fr_FR: "Noir",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Summer top",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Top",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Débardeur pour l'été",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Top",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "15.5",
                    currency: "EUR",
                  },
                  {
                    amount: "15",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            size: [
              {
                data: "m",
                linked_data: {
                  attribute: "size",
                  code: "m",
                  labels: {
                    en_US: "M",
                    fr_FR: "M",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/cap",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "caps",
          groups: [],
          identifier: "cap",
          parent: null,
          quality_scores: [
            {
              data: "A",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "B",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "D",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "E",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          quantified_associations: {},
          updated: "2016-06-25T17:56:12+02:00",
          values: {
            color: [
              {
                data: "black",
                linked_data: {
                  attribute: "color",
                  code: "black",
                  labels: {
                    en_US: "Black",
                    fr_FR: "Noir",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Cap",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Casquette",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "20",
                    currency: "EUR",
                  },
                  {
                    amount: "20",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/sweat",
            },
          },
          associations: {},
          categories: ["winter_collection"],
          created: "2016-06-23T11:24:44+02:00",
          enabled: true,
          family: null,
          groups: [],
          identifier: "sweat",
          parent: null,
          quality_scores: {},
          quantified_associations: {},
          updated: "2016-06-23T11:24:44+02:00",
          values: {},
        },
      ],
    },
    _links: {
      first: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=1&limit=3&with_quality_scores=true&with_attribute_options=true",
      },
      next: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=4&limit=3&with_quality_scores=true&with_attribute_options=true",
      },
      previous: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=2&limit=3&with_quality_scores=true&with_attribute_options=true",
      },
      self: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=3&limit=3&with_quality_scores=true&with_attribute_options=true",
      },
    },
    current_page: 3,
  },
  "x-SaaS": {
    _embedded: {
      items: [
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/top",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          completenesses: [
            {
              data: 20,
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: 30,
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: 55,
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: 70,
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "tshirt",
          groups: [],
          identifier: "top",
          parent: null,
          quality_scores: [
            {
              data: "A",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "B",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "D",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "E",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          quantified_associations: {
            PRODUCT_SET: {
              product_models: [
                {
                  identifier: "model-biker-jacket-leather",
                  quantity: 2,
                },
              ],
              products: [
                {
                  identifier: "cap",
                  quantity: 2,
                },
                {
                  identifier: "shoes",
                  quantity: 1,
                },
              ],
            },
          },
          updated: "2016-06-25T17:56:12+02:00",
          uuid: "aaf518b2-f91e-40f1-a53a-78ce5e81a6f9",
          values: {
            collection: [
              {
                data: ["winter_2016"],
                linked_data: {
                  winter_2016: {
                    attribute: "collection",
                    code: "winter_2016",
                    labels: {
                      en_US: "Winter 2016",
                      fr_FR: "Hiver 2016",
                    },
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            color: [
              {
                data: "black",
                linked_data: {
                  attribute: "color",
                  code: "black",
                  labels: {
                    en_US: "Black",
                    fr_FR: "Noir",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Summer top",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Top",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Débardeur pour l'été",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Top",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "15.5",
                    currency: "EUR",
                  },
                  {
                    amount: "15",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            size: [
              {
                data: "m",
                linked_data: {
                  attribute: "size",
                  code: "m",
                  labels: {
                    en_US: "M",
                    fr_FR: "M",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/cap",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["sunglasses"],
            },
          },
          categories: ["summer_collection"],
          completenesses: [
            {
              data: 20,
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: 30,
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: 55,
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: 70,
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "caps",
          groups: [],
          identifier: "cap",
          parent: null,
          quality_scores: [
            {
              data: "A",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "B",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "D",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "E",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          quantified_associations: {},
          updated: "2016-06-25T17:56:12+02:00",
          uuid: "aec6780b-c813-4bd7-8e24-1a8574471576",
          values: {
            color: [
              {
                data: "black",
                linked_data: {
                  attribute: "color",
                  code: "black",
                  labels: {
                    en_US: "Black",
                    fr_FR: "Noir",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Cap",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Casquette",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "20",
                    currency: "EUR",
                  },
                  {
                    amount: "20",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/sweat",
            },
          },
          associations: {},
          categories: ["winter_collection"],
          completenesses: [],
          created: "2016-06-23T11:24:44+02:00",
          enabled: true,
          family: null,
          groups: [],
          identifier: "sweat",
          parent: null,
          quality_scores: {},
          quantified_associations: {},
          updated: "2016-06-23T11:24:44+02:00",
          uuid: "93f14b03-5ed3-4f23-87c6-ae3806041b6a",
          values: {},
        },
      ],
    },
    _links: {
      first: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=1&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
      next: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=4&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
      previous: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=2&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
      self: {
        href: "https://demo.akeneo.com/api/rest/v1/products?page=3&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
    },
    current_page: 3,
  },
} as const;

export const ProductListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        associations: {
          PACK: {
            groups: [],
            product_models: [],
            products: ["sunglass"],
          },
        },
        categories: ["summer_collection"],
        completenesses: [
          {
            data: 10,
            locale: "en_US",
            scope: "ecommerce",
          },
          {
            data: 20,
            locale: "fr_FR",
            scope: "ecommerce",
          },
          {
            data: 30,
            locale: "en_US",
            scope: "tablet",
          },
          {
            data: 40,
            locale: "fr_FR",
            scope: "tablet",
          },
        ],
        created: "2016-06-23T18:24:44+02:00",
        enabled: true,
        family: "tshirt",
        groups: [],
        identifier: "top",
        parent: null,
        quality_scores: [
          {
            data: "A",
            locale: "en_US",
            scope: "ecommerce",
          },
          {
            data: "B",
            locale: "fr_FR",
            scope: "ecommerce",
          },
          {
            data: "D",
            locale: "en_US",
            scope: "tablet",
          },
          {
            data: "E",
            locale: "fr_FR",
            scope: "tablet",
          },
        ],
        quantified_associations: {
          PRODUCT_SET: {
            product_models: [
              {
                identifier: "model-biker-jacket-leather",
                quantity: 2,
              },
            ],
            products: [
              {
                identifier: "cap",
                quantity: 2,
              },
              {
                identifier: "shoes",
                quantity: 1,
              },
            ],
          },
        },
        updated: "2016-06-25T17:56:12+02:00",
        values: {
          collection: [
            {
              data: ["winter_2016"],
              linked_data: {
                winter_2016: {
                  attribute: "collection",
                  code: "winter_2016",
                  labels: {
                    en_US: "Winter 2016",
                    fr_FR: "Hiver 2016",
                  },
                },
              },
              locale: null,
              scope: null,
            },
          ],
          color: [
            {
              data: "black",
              linked_data: {
                attribute: "color",
                code: "black",
                labels: {
                  en_US: "Black",
                  fr_FR: "Noir",
                },
              },
              locale: null,
              scope: null,
            },
          ],
          description: [
            {
              data: "Summer top",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "Top",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "Débardeur pour l'été",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "Débardeur",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          name: [
            {
              data: "Top",
              locale: "en_US",
              scope: null,
            },
            {
              data: "Débardeur",
              locale: "fr_FR",
              scope: null,
            },
          ],
          price: [
            {
              data: [
                {
                  amount: "15.5",
                  currency: "EUR",
                },
                {
                  amount: "15",
                  currency: "USD",
                },
              ],
              locale: null,
              scope: null,
            },
          ],
          size: [
            {
              data: "m",
              linked_data: {
                attribute: "size",
                code: "m",
                labels: {
                  en_US: "M",
                  fr_FR: "M",
                },
              },
              locale: null,
              scope: null,
            },
          ],
        },
      },
      properties: {
        associations: {
          description:
            "Several associations related to groups, product models and/or other products, grouped by association types",
          properties: {
            associationTypeCode: {
              properties: {
                groups: {
                  description:
                    "Array of groups codes with which the product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
                product_models: {
                  description:
                    "Array of product model codes with which the product is in relation (only available since the v2.1)",
                  items: {
                    type: "string",
                  },
                  type: "array",
                  "x-from-version": "2.1",
                },
                products: {
                  description:
                    "Array of product identifiers with which the product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-validation-rules":
            "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Each string in the array of the property `product_models` is the code of an existing product model.",
        },
        categories: {
          default: [],
          description:
            "Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing category code",
        },
        completenesses: {
          description:
            'Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")',
          items: {
            properties: {
              data: {
                type: "integer",
              },
              locale: {
                type: "string",
              },
              scope: {
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
          "x-from-version": "7.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        created: {
          description: "Date of creation",
          format: "dateTime",
          type: "string",
          "x-immutable": true,
          "x-read-only": true,
        },
        enabled: {
          default: true,
          description: "Whether the product is enabled",
          type: "boolean",
        },
        family: {
          default: "null only in the case of a non variant product",
          description:
            "<a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.",
          type: "string",
          "x-validation-rules":
            "It is equal to an existing family code. In the case of variant product, the given family should be the same as the product model family.",
        },
        groups: {
          default: [],
          description: "Codes of the groups to which the product belong",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing group code",
        },
        identifier: {
          description:
            "Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute",
          type: "string",
        },
        metadata: {
          description:
            "More information around the product (only available since the v2.0 in the Enterprise Edition)",
          properties: {
            workflow_status: {
              description:
                "Status of the product regarding the user permissions",
              enum: [
                "read_only",
                "draft_in_progress",
                "proposal_waiting_for_approval",
                "working_copy",
              ],
              type: "string",
            },
          },
          type: "object",
          "x-from-version": "2.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        parent: {
          default: "null",
          description:
            "Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.",
          type: "string",
          "x-from-version": "2.0",
          "x-validation-rules":
            "It is equal to an existing product model code only if the product is variant otherwise it's equal to null",
        },
        quality_scores: {
          description:
            'Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")',
          type: "object",
          "x-from-version": "5.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        quantified_associations: {
          description:
            "Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)",
          properties: {
            quantifiedAssociationTypeCode: {
              properties: {
                product_models: {
                  description:
                    "Array of objects containing product model codes and quantities with which the product is in relation",
                  items: {
                    properties: {
                      code: {
                        type: "string",
                      },
                      quantity: {
                        type: "integer",
                      },
                    },
                    type: "object",
                  },
                  type: "array",
                },
                products: {
                  description:
                    "Array of objects containing product identifiers and quantities with which the product is in relation",
                  items: {
                    properties: {
                      identifier: {
                        type: "string",
                      },
                      quantity: {
                        type: "integer",
                      },
                    },
                    type: "object",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-from-version": "5.0",
          "x-validation-rules":
            "&bull; The `quantifiedAssociationTypeCode` is the code of an existing association type which provides quantity information. &#10;&bull; Each object in the array of the property `products` contains the identifier of an existing product and the quantity of it.",
        },
        updated: {
          description: "Date of the last update",
          format: "dateTime",
          type: "string",
          "x-read-only": true,
        },
        uuid: {
          description: "Product UUID",
          type: "string",
          "x-from-version": "7.0",
        },
        values: {
          description:
            "Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
          properties: {
            attributeCode: {
              items: {
                properties: {
                  data: {
                    description:
                      "Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.",
                    type: "object",
                  },
                  linked_data: {
                    description: `Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the \`linked_data\` format</a> section for more details.`,
                    properties: {
                      attribute: {
                        type: "string",
                      },
                      code: {
                        type: "string",
                      },
                      labels: {
                        type: "object",
                      },
                    },
                    type: "object",
                    "x-from-version": "5.0",
                    "x-read-only": true,
                  },
                  locale: {
                    description:
                      "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                    type: "string",
                  },
                  scope: {
                    description:
                      "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "Validation rules detailed in Product values section",
        },
      },
      required: ["identifier"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const ProductModelSchema = {
  example: {
    associations: {
      PACK: {
        groups: [],
        product_models: [],
        products: ["sunglass"],
      },
    },
    categories: ["summer_collection"],
    code: "model-biker-jacket-leather",
    created: "2017-10-02T15:03:55+02:00",
    family: "clothing",
    family_variant: "clothing_material_size",
    parent: "model-biker-jacket",
    quality_scores: [
      {
        data: "A",
        locale: "en_US",
        scope: "ecommerce",
      },
      {
        data: "B",
        locale: "fr_FR",
        scope: "ecommerce",
      },
      {
        data: "D",
        locale: "en_US",
        scope: "tablet",
      },
      {
        data: "E",
        locale: "fr_FR",
        scope: "tablet",
      },
    ],
    quantified_associations: {
      PRODUCT_SET: {
        product_models: [
          {
            code: "model-biker-jacket-leather",
            quantity: 2,
          },
        ],
        products: [
          {
            identifier: "top",
            quantity: 2,
          },
          {
            identifier: "cap",
            quantity: 1,
          },
        ],
      },
    },
    updated: "2017-10-02T15:03:55+02:00",
    values: {
      collection: [
        {
          data: ["summer_2017"],
          locale: null,
          scope: null,
        },
      ],
      color: [
        {
          data: "antique_white",
          locale: null,
          scope: null,
        },
      ],
      description: [
        {
          data: "Biker jacket",
          locale: "en_US",
          scope: "ecommerce",
        },
      ],
      material: [
        {
          data: "leather",
          locale: null,
          scope: null,
        },
      ],
      name: [
        {
          data: "Biker jacket",
          locale: "en_US",
          scope: null,
        },
      ],
      variation_name: [
        {
          data: "Biker jacket leather",
          locale: "en_US",
          scope: null,
        },
      ],
    },
  },
  properties: {
    associations: {
      description:
        "Several associations related to groups, product and/or other product models, grouped by association types",
      properties: {
        associationTypeCode: {
          properties: {
            groups: {
              description:
                "Array of groups codes with which the product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
            product_models: {
              description:
                "Array of product model codes with which the product is in relation (only available since the v2.1)",
              items: {
                type: "string",
              },
              type: "array",
              "x-from-version": "2.1",
            },
            products: {
              description:
                "Array of product identifiers with which the product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-validation-rules":
        "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Each string in the array of the property `product_models` is the code of an existing product model.",
    },
    categories: {
      default: [],
      description:
        "Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing category code",
    },
    code: {
      description: "Product model code",
      type: "string",
      "x-immutable": true,
    },
    created: {
      description: "Date of creation",
      format: "dateTime",
      type: "string",
      "x-immutable": true,
      "x-read-only": true,
    },
    family: {
      description:
        "<a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)",
      type: "string",
      "x-from-version": "3.2",
      "x-immutable": true,
      "x-validation-rules": "It is equal to an existing family code",
    },
    family_variant: {
      description:
        "Family variant code from which the product model inherits its attributes and variant attributes",
      type: "string",
      "x-immutable": true,
      "x-validation-rules":
        "It is equal to an existing family variant code that belong to the family given in the `family` field",
    },
    metadata: {
      description:
        "More information around the product model (only available since the v2.3 in the Enterprise Edition)",
      properties: {
        workflow_status: {
          description:
            "Status of the product model regarding the user permissions",
          enum: [
            "read_only",
            "draft_in_progress",
            "proposal_waiting_for_approval",
            "working_copy",
          ],
          type: "string",
        },
      },
      type: "object",
      "x-from-version": "2.3",
      "x-immutable": true,
      "x-read-only": true,
    },
    parent: {
      default: "null",
      description:
        "Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.",
      type: "string",
      "x-from-version": "2.3",
      "x-validation-rules":
        "&bull; It is equal to an existing product model code&#10;&bull; This product model has the same family variant as the one given in the `family_variant field`",
    },
    quality_scores: {
      description:
        'Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")',
      type: "object",
      "x-from-version": "7.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    quantified_associations: {
      description:
        "Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)",
      properties: {
        quantifiedAssociationTypeCode: {
          properties: {
            product_models: {
              description:
                "Array of objects containing product model codes and quantities with which the product model is in relation",
              items: {
                properties: {
                  code: {
                    type: "string",
                  },
                  quantity: {
                    type: "integer",
                  },
                },
                type: "object",
              },
              type: "array",
            },
            products: {
              description:
                "Array of objects containing product identifiers and quantities with which the product model is in relation",
              items: {
                properties: {
                  identifier: {
                    type: "string",
                  },
                  quantity: {
                    type: "integer",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-from-version": "5.0",
      "x-validation-rules":
        "&bull; The `quantifiedAssociationTypeCode` is the code of an existing association type which provides quantity information. &#10;&bull; Each object in the array of the property `products` contains the identifier of an existing product and the quantity of it. &#10;&bull; Each object in the array of the property `product_models` contains the code of an existing product model and the quantity of it.",
    },
    updated: {
      description: "Date of the last update",
      format: "dateTime",
      type: "string",
      "x-read-only": true,
    },
    values: {
      description:
        "Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
      properties: {
        attributeCode: {
          items: {
            properties: {
              data: {
                description:
                  "<a href='api-reference.html#Productuuid'>Product</a> value",
                type: "object",
              },
              locale: {
                description:
                  "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                type: "string",
              },
              scope: {
                description:
                  "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      type: "object",
      "x-validation-rules":
        "Validation rules detailed in Product values section",
    },
  },
  required: ["code", "family_variant"],
  type: "object",
} as const;

export const ProductModelListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        associations: {
          PACK: {
            groups: [],
            product_models: [],
            products: ["sunglass"],
          },
        },
        categories: ["summer_collection"],
        code: "model-biker-jacket-leather",
        created: "2017-10-02T15:03:55+02:00",
        family: "clothing",
        family_variant: "clothing_material_size",
        parent: "model-biker-jacket",
        quality_scores: [
          {
            data: "A",
            locale: "en_US",
            scope: "ecommerce",
          },
          {
            data: "B",
            locale: "fr_FR",
            scope: "ecommerce",
          },
          {
            data: "D",
            locale: "en_US",
            scope: "tablet",
          },
          {
            data: "E",
            locale: "fr_FR",
            scope: "tablet",
          },
        ],
        quantified_associations: {
          PRODUCT_SET: {
            product_models: [
              {
                code: "model-biker-jacket-leather",
                quantity: 2,
              },
            ],
            products: [
              {
                identifier: "top",
                quantity: 2,
              },
              {
                identifier: "cap",
                quantity: 1,
              },
            ],
          },
        },
        updated: "2017-10-02T15:03:55+02:00",
        values: {
          collection: [
            {
              data: ["summer_2017"],
              locale: null,
              scope: null,
            },
          ],
          color: [
            {
              data: "antique_white",
              locale: null,
              scope: null,
            },
          ],
          description: [
            {
              data: "Biker jacket",
              locale: "en_US",
              scope: "ecommerce",
            },
          ],
          material: [
            {
              data: "leather",
              locale: null,
              scope: null,
            },
          ],
          name: [
            {
              data: "Biker jacket",
              locale: "en_US",
              scope: null,
            },
          ],
          variation_name: [
            {
              data: "Biker jacket leather",
              locale: "en_US",
              scope: null,
            },
          ],
        },
      },
      properties: {
        associations: {
          description:
            "Several associations related to groups, product and/or other product models, grouped by association types",
          properties: {
            associationTypeCode: {
              properties: {
                groups: {
                  description:
                    "Array of groups codes with which the product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
                product_models: {
                  description:
                    "Array of product model codes with which the product is in relation (only available since the v2.1)",
                  items: {
                    type: "string",
                  },
                  type: "array",
                  "x-from-version": "2.1",
                },
                products: {
                  description:
                    "Array of product identifiers with which the product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-validation-rules":
            "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Each string in the array of the property `product_models` is the code of an existing product model.",
        },
        categories: {
          default: [],
          description:
            "Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing category code",
        },
        code: {
          description: "Product model code",
          type: "string",
          "x-immutable": true,
        },
        created: {
          description: "Date of creation",
          format: "dateTime",
          type: "string",
          "x-immutable": true,
          "x-read-only": true,
        },
        family: {
          description:
            "<a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)",
          type: "string",
          "x-from-version": "3.2",
          "x-immutable": true,
          "x-validation-rules": "It is equal to an existing family code",
        },
        family_variant: {
          description:
            "Family variant code from which the product model inherits its attributes and variant attributes",
          type: "string",
          "x-immutable": true,
          "x-validation-rules":
            "It is equal to an existing family variant code that belong to the family given in the `family` field",
        },
        metadata: {
          description:
            "More information around the product model (only available since the v2.3 in the Enterprise Edition)",
          properties: {
            workflow_status: {
              description:
                "Status of the product model regarding the user permissions",
              enum: [
                "read_only",
                "draft_in_progress",
                "proposal_waiting_for_approval",
                "working_copy",
              ],
              type: "string",
            },
          },
          type: "object",
          "x-from-version": "2.3",
          "x-immutable": true,
          "x-read-only": true,
        },
        parent: {
          default: "null",
          description:
            "Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.",
          type: "string",
          "x-from-version": "2.3",
          "x-validation-rules":
            "&bull; It is equal to an existing product model code&#10;&bull; This product model has the same family variant as the one given in the `family_variant field`",
        },
        quality_scores: {
          description:
            'Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")',
          type: "object",
          "x-from-version": "7.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        quantified_associations: {
          description:
            "Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)",
          properties: {
            quantifiedAssociationTypeCode: {
              properties: {
                product_models: {
                  description:
                    "Array of objects containing product model codes and quantities with which the product model is in relation",
                  items: {
                    properties: {
                      code: {
                        type: "string",
                      },
                      quantity: {
                        type: "integer",
                      },
                    },
                    type: "object",
                  },
                  type: "array",
                },
                products: {
                  description:
                    "Array of objects containing product identifiers and quantities with which the product model is in relation",
                  items: {
                    properties: {
                      identifier: {
                        type: "string",
                      },
                      quantity: {
                        type: "integer",
                      },
                    },
                    type: "object",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-from-version": "5.0",
          "x-validation-rules":
            "&bull; The `quantifiedAssociationTypeCode` is the code of an existing association type which provides quantity information. &#10;&bull; Each object in the array of the property `products` contains the identifier of an existing product and the quantity of it. &#10;&bull; Each object in the array of the property `product_models` contains the code of an existing product model and the quantity of it.",
        },
        updated: {
          description: "Date of the last update",
          format: "dateTime",
          type: "string",
          "x-read-only": true,
        },
        values: {
          description:
            "Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
          properties: {
            attributeCode: {
              items: {
                properties: {
                  data: {
                    description:
                      "<a href='api-reference.html#Productuuid'>Product</a> value",
                    type: "object",
                  },
                  locale: {
                    description:
                      "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                    type: "string",
                  },
                  scope: {
                    description:
                      "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "Validation rules detailed in Product values section",
        },
      },
      required: ["code", "family_variant"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const ProductUuidSchema = {
  example: {
    associations: {
      PACK: {
        groups: [],
        product_models: [],
        products: ["d055527c-0698-4967-8f16-8a5f23f4e5cf"],
      },
    },
    categories: ["summer_collection"],
    completenesses: [
      {
        data: 10,
        locale: "en_US",
        scope: "ecommerce",
      },
      {
        data: 20,
        locale: "fr_FR",
        scope: "ecommerce",
      },
      {
        data: 30,
        locale: "en_US",
        scope: "tablet",
      },
      {
        data: 40,
        locale: "fr_FR",
        scope: "tablet",
      },
    ],
    created: "2016-06-23T18:24:44+02:00",
    enabled: true,
    family: "tshirt",
    groups: [],
    parent: null,
    quality_scores: [
      {
        data: "A",
        locale: "en_US",
        scope: "ecommerce",
      },
      {
        data: "B",
        locale: "fr_FR",
        scope: "ecommerce",
      },
      {
        data: "D",
        locale: "en_US",
        scope: "tablet",
      },
      {
        data: "E",
        locale: "fr_FR",
        scope: "tablet",
      },
    ],
    quantified_associations: {
      PRODUCT_SET: {
        product_models: [
          {
            identifier: "model-biker-jacket-leather",
            quantity: 2,
          },
        ],
        products: [
          {
            quantity: 2,
            uuid: "fc24e6c3-933c-4a93-8a81-e5c703d134d5",
          },
          {
            quantity: 1,
            uuid: "a9b69002-a0b1-4ead-85c2-f8dbf59c6cfc",
          },
        ],
      },
    },
    updated: "2016-06-25T17:56:12+02:00",
    uuid: "25566245-55c3-42ce-86d9-8610ac459fa8",
    values: {
      collection: [
        {
          data: ["winter_2016"],
          linked_data: {
            winter_2016: {
              attribute: "collection",
              code: "winter_2016",
              labels: {
                en_US: "Winter 2016",
                fr_FR: "Hiver 2016",
              },
            },
          },
          locale: null,
          scope: null,
        },
      ],
      color: [
        {
          data: "black",
          linked_data: {
            attribute: "color",
            code: "black",
            labels: {
              en_US: "Black",
              fr_FR: "Noir",
            },
          },
          locale: null,
          scope: null,
        },
      ],
      description: [
        {
          data: "Summer top",
          locale: "en_US",
          scope: "ecommerce",
        },
        {
          data: "Top",
          locale: "en_US",
          scope: "tablet",
        },
        {
          data: "Débardeur pour l'été",
          locale: "fr_FR",
          scope: "ecommerce",
        },
        {
          data: "Débardeur",
          locale: "fr_FR",
          scope: "tablet",
        },
      ],
      name: [
        {
          data: "Top",
          locale: "en_US",
          scope: null,
        },
        {
          data: "Débardeur",
          locale: "fr_FR",
          scope: null,
        },
      ],
      price: [
        {
          data: [
            {
              amount: "15.5",
              currency: "EUR",
            },
            {
              amount: "15",
              currency: "USD",
            },
          ],
          locale: null,
          scope: null,
        },
      ],
      size: [
        {
          data: "m",
          linked_data: {
            attribute: "size",
            code: "m",
            labels: {
              en_US: "M",
              fr_FR: "M",
            },
          },
          locale: null,
          scope: null,
        },
      ],
      sku: [
        {
          data: "top",
          locale: null,
          scope: null,
        },
      ],
    },
  },
  properties: {
    associations: {
      description:
        "Several associations related to groups, product models and/or other products, grouped by association types",
      properties: {
        associationTypeCode: {
          properties: {
            groups: {
              description:
                "Array of groups codes with which the product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
            product_models: {
              description:
                "Array of product model codes with which the product is in relation (only available since the v2.1)",
              items: {
                type: "string",
              },
              type: "array",
              "x-from-version": "2.1",
            },
            products: {
              description:
                "Array of product uuids with which the product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-validation-rules":
        "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the uuid of an existing product. &#10;&bull; Each string in the array of the property `product_models` is the code of an existing product model.",
    },
    categories: {
      default: [],
      description:
        "Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing category code",
    },
    completenesses: {
      description:
        'Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")',
      items: {
        properties: {
          data: {
            type: "integer",
          },
          locale: {
            type: "string",
          },
          scope: {
            type: "string",
          },
        },
        type: "object",
      },
      type: "array",
      "x-from-version": "7.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    created: {
      description: "Date of creation",
      format: "dateTime",
      type: "string",
      "x-immutable": true,
      "x-read-only": true,
    },
    enabled: {
      default: true,
      description: "Whether the product is enabled",
      type: "boolean",
    },
    family: {
      default: "null only in the case of a non variant product",
      description:
        "<a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.",
      type: "string",
      "x-validation-rules":
        "It is equal to an existing family code. In the case of variant product, the given family should be the same as the product model family.",
    },
    groups: {
      default: [],
      description: "Codes of the groups to which the product belong",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing group code",
    },
    metadata: {
      description:
        "More information around the product (only available since the v2.0 in the Enterprise Edition)",
      properties: {
        workflow_status: {
          description: "Status of the product regarding the user permissions",
          enum: [
            "read_only",
            "draft_in_progress",
            "proposal_waiting_for_approval",
            "working_copy",
          ],
          type: "string",
        },
      },
      type: "object",
      "x-from-version": "2.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    parent: {
      default: "null",
      description:
        "Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.",
      type: "string",
      "x-from-version": "2.0",
      "x-validation-rules":
        "It is equal to an existing product model code only if the product is variant otherwise it's equal to null",
    },
    quality_scores: {
      description:
        'Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")',
      type: "object",
      "x-from-version": "5.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    quantified_associations: {
      description:
        "Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)",
      properties: {
        quantifiedAssociationTypeCode: {
          properties: {
            product_models: {
              description:
                "Array of objects containing product model codes and quantities with which the product is in relation",
              items: {
                properties: {
                  code: {
                    type: "string",
                  },
                  quantity: {
                    type: "integer",
                  },
                },
                type: "object",
              },
              type: "array",
            },
            products: {
              description:
                "Array of objects containing product uuids and quantities with which the product is in relation",
              items: {
                properties: {
                  quantity: {
                    type: "integer",
                  },
                  uuid: {
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-from-version": "5.0",
      "x-validation-rules":
        "&bull; The `quantifiedAssociationTypeCode` is the code of an existing association type which provides quantity information. &#10;&bull; Each object in the array of the property `products` contains the uuid of an existing product and the quantity of it.",
    },
    updated: {
      description: "Date of the last update",
      format: "dateTime",
      type: "string",
      "x-read-only": true,
    },
    uuid: {
      description: "Product uuid",
      type: "string",
    },
    values: {
      description:
        "Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
      properties: {
        attributeCode: {
          items: {
            properties: {
              data: {
                description:
                  "Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.",
                type: "object",
              },
              linked_data: {
                description: `Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the \`linked_data\` format</a> section for more details.`,
                properties: {
                  attribute: {
                    type: "string",
                  },
                  code: {
                    type: "string",
                  },
                  labels: {
                    type: "object",
                  },
                },
                type: "object",
                "x-from-version": "5.0",
                "x-read-only": true,
              },
              locale: {
                description:
                  "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                type: "string",
              },
              scope: {
                description:
                  "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      type: "object",
      "x-validation-rules":
        "Validation rules detailed in Product values section",
    },
  },
  type: "object",
} as const;

export const ProductUuidExamplesSchema = {
  "x-SaaS": {
    _embedded: {
      items: [
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product-uuid/25566245-55c3-42ce-86d9-8610ac459fa8",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["d055527c-0698-4967-8f16-8a5f23f4e5cf"],
            },
          },
          categories: ["summer_collection"],
          completenesses: [
            {
              data: 20,
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: 30,
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: 55,
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: 70,
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "tshirt",
          groups: [],
          parent: null,
          quality_scores: [
            {
              data: "A",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "B",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "D",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "E",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          quantified_associations: {
            PRODUCT_SET: {
              product_models: [
                {
                  identifier: "model-biker-jacket-leather",
                  quantity: 2,
                },
              ],
              products: [
                {
                  quantity: 2,
                  uuid: "fc24e6c3-933c-4a93-8a81-e5c703d134d5",
                },
                {
                  quantity: 1,
                  uuid: "a9b69002-a0b1-4ead-85c2-f8dbf59c6cfc",
                },
              ],
            },
          },
          updated: "2016-06-25T17:56:12+02:00",
          uuid: "25566245-55c3-42ce-86d9-8610ac459fa8",
          values: {
            collection: [
              {
                data: ["winter_2016"],
                linked_data: {
                  winter_2016: {
                    attribute: "collection",
                    code: "winter_2016",
                    labels: {
                      en_US: "Winter 2016",
                      fr_FR: "Hiver 2016",
                    },
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            color: [
              {
                data: "black",
                linked_data: {
                  attribute: "color",
                  code: "black",
                  labels: {
                    en_US: "Black",
                    fr_FR: "Noir",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Summer top",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Top",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Débardeur pour l'été",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Top",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Débardeur",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "15.5",
                    currency: "EUR",
                  },
                  {
                    amount: "15",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            size: [
              {
                data: "m",
                linked_data: {
                  attribute: "size",
                  code: "m",
                  labels: {
                    en_US: "M",
                    fr_FR: "M",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            sku: [
              {
                data: "top",
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product/fc24e6c3-933c-4a93-8a81-e5c703d134d5",
            },
          },
          associations: {
            PACK: {
              groups: [],
              product_models: [],
              products: ["d055527c-0698-4967-8f16-8a5f23f4e5cf"],
            },
          },
          categories: ["summer_collection"],
          completenesses: [
            {
              data: 20,
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: 30,
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: 55,
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: 70,
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          created: "2016-06-23T18:24:44+02:00",
          enabled: true,
          family: "caps",
          groups: [],
          parent: null,
          quality_scores: [
            {
              data: "A",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "B",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "D",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "E",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          quantified_associations: {},
          updated: "2016-06-25T17:56:12+02:00",
          uuid: "fc24e6c3-933c-4a93-8a81-e5c703d134d5",
          values: {
            color: [
              {
                data: "black",
                linked_data: {
                  attribute: "color",
                  code: "black",
                  labels: {
                    en_US: "Black",
                    fr_FR: "Noir",
                  },
                },
                locale: null,
                scope: null,
              },
            ],
            description: [
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "ecommerce",
              },
              {
                data: "Cap unisex",
                locale: "en_US",
                scope: "tablet",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "ecommerce",
              },
              {
                data: "Casquette unisexe",
                locale: "fr_FR",
                scope: "tablet",
              },
            ],
            name: [
              {
                data: "Cap",
                locale: "en_US",
                scope: null,
              },
              {
                data: "Casquette",
                locale: "fr_FR",
                scope: null,
              },
            ],
            price: [
              {
                data: [
                  {
                    amount: "20",
                    currency: "EUR",
                  },
                  {
                    amount: "20",
                    currency: "USD",
                  },
                ],
                locale: null,
                scope: null,
              },
            ],
            sku: [
              {
                data: "cap",
                locale: null,
                scope: null,
              },
            ],
          },
        },
        {
          _links: {
            self: {
              href: "https://demo.akeneo.com/api/rest/v1/product-uuid/fa0b115e-46ec-4527-beab-7207452f1b47",
            },
          },
          associations: {},
          categories: ["winter_collection"],
          completenesses: [],
          created: "2016-06-23T11:24:44+02:00",
          enabled: true,
          family: null,
          groups: [],
          parent: null,
          quality_scores: {},
          quantified_associations: {},
          updated: "2016-06-23T11:24:44+02:00",
          uuid: "fa0b115e-46ec-4527-beab-7207452f1b47",
          values: {
            sku: [
              {
                data: "sweat",
                locale: null,
                scope: null,
              },
            ],
          },
        },
      ],
    },
    _links: {
      first: {
        href: "https://demo.akeneo.com/api/rest/v1/products-uuid?page=1&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
      next: {
        href: "https://demo.akeneo.com/api/rest/v1/products-uuid?page=4&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
      previous: {
        href: "https://demo.akeneo.com/api/rest/v1/products-uuid?page=2&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
      self: {
        href: "https://demo.akeneo.com/api/rest/v1/products-uuid?page=3&limit=3&with_quality_scores=true&with_completenesses=true&with_attribute_options=true",
      },
    },
    current_page: 3,
  },
} as const;

export const ProductUuidListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        associations: {
          PACK: {
            groups: [],
            product_models: [],
            products: ["d055527c-0698-4967-8f16-8a5f23f4e5cf"],
          },
        },
        categories: ["summer_collection"],
        completenesses: [
          {
            data: 10,
            locale: "en_US",
            scope: "ecommerce",
          },
          {
            data: 20,
            locale: "fr_FR",
            scope: "ecommerce",
          },
          {
            data: 30,
            locale: "en_US",
            scope: "tablet",
          },
          {
            data: 40,
            locale: "fr_FR",
            scope: "tablet",
          },
        ],
        created: "2016-06-23T18:24:44+02:00",
        enabled: true,
        family: "tshirt",
        groups: [],
        parent: null,
        quality_scores: [
          {
            data: "A",
            locale: "en_US",
            scope: "ecommerce",
          },
          {
            data: "B",
            locale: "fr_FR",
            scope: "ecommerce",
          },
          {
            data: "D",
            locale: "en_US",
            scope: "tablet",
          },
          {
            data: "E",
            locale: "fr_FR",
            scope: "tablet",
          },
        ],
        quantified_associations: {
          PRODUCT_SET: {
            product_models: [
              {
                identifier: "model-biker-jacket-leather",
                quantity: 2,
              },
            ],
            products: [
              {
                quantity: 2,
                uuid: "fc24e6c3-933c-4a93-8a81-e5c703d134d5",
              },
              {
                quantity: 1,
                uuid: "a9b69002-a0b1-4ead-85c2-f8dbf59c6cfc",
              },
            ],
          },
        },
        updated: "2016-06-25T17:56:12+02:00",
        uuid: "25566245-55c3-42ce-86d9-8610ac459fa8",
        values: {
          collection: [
            {
              data: ["winter_2016"],
              linked_data: {
                winter_2016: {
                  attribute: "collection",
                  code: "winter_2016",
                  labels: {
                    en_US: "Winter 2016",
                    fr_FR: "Hiver 2016",
                  },
                },
              },
              locale: null,
              scope: null,
            },
          ],
          color: [
            {
              data: "black",
              linked_data: {
                attribute: "color",
                code: "black",
                labels: {
                  en_US: "Black",
                  fr_FR: "Noir",
                },
              },
              locale: null,
              scope: null,
            },
          ],
          description: [
            {
              data: "Summer top",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "Top",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "Débardeur pour l'été",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "Débardeur",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          name: [
            {
              data: "Top",
              locale: "en_US",
              scope: null,
            },
            {
              data: "Débardeur",
              locale: "fr_FR",
              scope: null,
            },
          ],
          price: [
            {
              data: [
                {
                  amount: "15.5",
                  currency: "EUR",
                },
                {
                  amount: "15",
                  currency: "USD",
                },
              ],
              locale: null,
              scope: null,
            },
          ],
          size: [
            {
              data: "m",
              linked_data: {
                attribute: "size",
                code: "m",
                labels: {
                  en_US: "M",
                  fr_FR: "M",
                },
              },
              locale: null,
              scope: null,
            },
          ],
          sku: [
            {
              data: "top",
              locale: null,
              scope: null,
            },
          ],
        },
      },
      properties: {
        associations: {
          description:
            "Several associations related to groups, product models and/or other products, grouped by association types",
          properties: {
            associationTypeCode: {
              properties: {
                groups: {
                  description:
                    "Array of groups codes with which the product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
                product_models: {
                  description:
                    "Array of product model codes with which the product is in relation (only available since the v2.1)",
                  items: {
                    type: "string",
                  },
                  type: "array",
                  "x-from-version": "2.1",
                },
                products: {
                  description:
                    "Array of product uuids with which the product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-validation-rules":
            "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the uuid of an existing product. &#10;&bull; Each string in the array of the property `product_models` is the code of an existing product model.",
        },
        categories: {
          default: [],
          description:
            "Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing category code",
        },
        completenesses: {
          description:
            'Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")',
          items: {
            properties: {
              data: {
                type: "integer",
              },
              locale: {
                type: "string",
              },
              scope: {
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
          "x-from-version": "7.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        created: {
          description: "Date of creation",
          format: "dateTime",
          type: "string",
          "x-immutable": true,
          "x-read-only": true,
        },
        enabled: {
          default: true,
          description: "Whether the product is enabled",
          type: "boolean",
        },
        family: {
          default: "null only in the case of a non variant product",
          description:
            "<a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.",
          type: "string",
          "x-validation-rules":
            "It is equal to an existing family code. In the case of variant product, the given family should be the same as the product model family.",
        },
        groups: {
          default: [],
          description: "Codes of the groups to which the product belong",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing group code",
        },
        metadata: {
          description:
            "More information around the product (only available since the v2.0 in the Enterprise Edition)",
          properties: {
            workflow_status: {
              description:
                "Status of the product regarding the user permissions",
              enum: [
                "read_only",
                "draft_in_progress",
                "proposal_waiting_for_approval",
                "working_copy",
              ],
              type: "string",
            },
          },
          type: "object",
          "x-from-version": "2.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        parent: {
          default: "null",
          description:
            "Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.",
          type: "string",
          "x-from-version": "2.0",
          "x-validation-rules":
            "It is equal to an existing product model code only if the product is variant otherwise it's equal to null",
        },
        quality_scores: {
          description:
            'Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")',
          type: "object",
          "x-from-version": "5.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        quantified_associations: {
          description:
            "Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)",
          properties: {
            quantifiedAssociationTypeCode: {
              properties: {
                product_models: {
                  description:
                    "Array of objects containing product model codes and quantities with which the product is in relation",
                  items: {
                    properties: {
                      code: {
                        type: "string",
                      },
                      quantity: {
                        type: "integer",
                      },
                    },
                    type: "object",
                  },
                  type: "array",
                },
                products: {
                  description:
                    "Array of objects containing product uuids and quantities with which the product is in relation",
                  items: {
                    properties: {
                      quantity: {
                        type: "integer",
                      },
                      uuid: {
                        type: "string",
                      },
                    },
                    type: "object",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-from-version": "5.0",
          "x-validation-rules":
            "&bull; The `quantifiedAssociationTypeCode` is the code of an existing association type which provides quantity information. &#10;&bull; Each object in the array of the property `products` contains the uuid of an existing product and the quantity of it.",
        },
        updated: {
          description: "Date of the last update",
          format: "dateTime",
          type: "string",
          "x-read-only": true,
        },
        uuid: {
          description: "Product uuid",
          type: "string",
        },
        values: {
          description:
            "Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
          properties: {
            attributeCode: {
              items: {
                properties: {
                  data: {
                    description:
                      "Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.",
                    type: "object",
                  },
                  linked_data: {
                    description: `Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the \`linked_data\` format</a> section for more details.`,
                    properties: {
                      attribute: {
                        type: "string",
                      },
                      code: {
                        type: "string",
                      },
                      labels: {
                        type: "object",
                      },
                    },
                    type: "object",
                    "x-from-version": "5.0",
                    "x-read-only": true,
                  },
                  locale: {
                    description:
                      "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                    type: "string",
                  },
                  scope: {
                    description:
                      "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "Validation rules detailed in Product values section",
        },
      },
      type: "object",
    },
  ],
  type: "object",
} as const;

export const PublishedProductSchema = {
  example: {
    associations: {
      PACK: {
        groups: [],
        product_models: [],
        products: ["sunglass"],
      },
    },
    categories: ["summer_collection"],
    created: "2016-06-23T18:24:44+02:00",
    enabled: true,
    family: "tshirt",
    groups: [],
    identifier: "top",
    updated: "2016-06-25T17:56:12+02:00",
    values: {
      color: [
        {
          data: "black",
          locale: null,
          scope: null,
        },
      ],
      description: [
        {
          data: "Summer top",
          locale: "en_US",
          scope: "ecommerce",
        },
        {
          data: "Top",
          locale: "en_US",
          scope: "tablet",
        },
        {
          data: "Débardeur pour l'été",
          locale: "fr_FR",
          scope: "ecommerce",
        },
        {
          data: "Débardeur",
          locale: "fr_FR",
          scope: "tablet",
        },
      ],
      name: [
        {
          data: "Top",
          locale: "en_US",
          scope: null,
        },
        {
          data: "Débardeur",
          locale: "fr_FR",
          scope: null,
        },
      ],
      price: [
        {
          data: [
            {
              amount: "15.5",
              currency: "EUR",
            },
            {
              amount: "15",
              currency: "USD",
            },
          ],
          locale: null,
          scope: null,
        },
      ],
      size: [
        {
          data: "m",
          locale: null,
          scope: null,
        },
      ],
    },
  },
  properties: {
    associations: {
      description:
        "Several associations related to groups and/or other published products, grouped by association types",
      properties: {
        associationTypeCode: {
          properties: {
            groups: {
              description:
                "Array of groups codes with which the published product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
            product_models: {
              description:
                "Array of product model codes with which the product is in relation (only available since the v2.1)",
              items: {
                type: "string",
              },
              type: "array",
              "x-from-version": "2.1",
            },
            products: {
              description:
                "Array of published product identifiers with which the published product is in relation",
              items: {
                type: "string",
              },
              type: "array",
            },
          },
          type: "object",
        },
      },
      type: "object",
      "x-validation-rules":
        "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Identifiers used in the array of the property `products` cannot be equal to the published product identifier.",
    },
    categories: {
      default: [],
      description:
        "Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing category code",
    },
    created: {
      description: "Date of creation",
      format: "dateTime",
      type: "string",
      "x-immutable": true,
      "x-read-only": true,
    },
    enabled: {
      default: true,
      description: "Whether the published product is enable",
      type: "boolean",
    },
    family: {
      default: "null",
      description:
        "<a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements",
      type: "string",
      "x-validation-rules": "It is equal to an existing family code",
    },
    groups: {
      default: [],
      description: "Codes of the groups to which the published product belong",
      items: {
        type: "string",
      },
      type: "array",
      "x-validation-rules":
        "Each string of the array is equal to an existing group code",
    },
    identifier: {
      description:
        "Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute",
      type: "string",
    },
    quantified_associations: {
      description:
        "Warning: associations with quantities are not compatible with the published products. The response will always be empty.",
      type: "object",
    },
    updated: {
      description: "Date of the last update",
      format: "dateTime",
      type: "string",
      "x-read-only": true,
    },
    values: {
      description:
        "Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
      properties: {
        attributeCode: {
          items: {
            properties: {
              data: {
                description:
                  "<a href='api-reference.html#Productuuid'>Product</a> value",
                type: "object",
              },
              locale: {
                description:
                  "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                type: "string",
              },
              scope: {
                description:
                  "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      type: "object",
      "x-validation-rules":
        "Validation rules detailed in Product values section",
    },
  },
  required: ["identifier"],
  type: "object",
} as const;

export const PublishedProductListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        associations: {
          PACK: {
            groups: [],
            product_models: [],
            products: ["sunglass"],
          },
        },
        categories: ["summer_collection"],
        created: "2016-06-23T18:24:44+02:00",
        enabled: true,
        family: "tshirt",
        groups: [],
        identifier: "top",
        updated: "2016-06-25T17:56:12+02:00",
        values: {
          color: [
            {
              data: "black",
              locale: null,
              scope: null,
            },
          ],
          description: [
            {
              data: "Summer top",
              locale: "en_US",
              scope: "ecommerce",
            },
            {
              data: "Top",
              locale: "en_US",
              scope: "tablet",
            },
            {
              data: "Débardeur pour l'été",
              locale: "fr_FR",
              scope: "ecommerce",
            },
            {
              data: "Débardeur",
              locale: "fr_FR",
              scope: "tablet",
            },
          ],
          name: [
            {
              data: "Top",
              locale: "en_US",
              scope: null,
            },
            {
              data: "Débardeur",
              locale: "fr_FR",
              scope: null,
            },
          ],
          price: [
            {
              data: [
                {
                  amount: "15.5",
                  currency: "EUR",
                },
                {
                  amount: "15",
                  currency: "USD",
                },
              ],
              locale: null,
              scope: null,
            },
          ],
          size: [
            {
              data: "m",
              locale: null,
              scope: null,
            },
          ],
        },
      },
      properties: {
        associations: {
          description:
            "Several associations related to groups and/or other published products, grouped by association types",
          properties: {
            associationTypeCode: {
              properties: {
                groups: {
                  description:
                    "Array of groups codes with which the published product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
                product_models: {
                  description:
                    "Array of product model codes with which the product is in relation (only available since the v2.1)",
                  items: {
                    type: "string",
                  },
                  type: "array",
                  "x-from-version": "2.1",
                },
                products: {
                  description:
                    "Array of published product identifiers with which the published product is in relation",
                  items: {
                    type: "string",
                  },
                  type: "array",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-validation-rules":
            "&bull; The `associationTypeCode` is the code of an existing association type. &#10;&bull; Each string in the array of the property `groups` is the code of an existing group. &#10;&bull; Each string in the array of the property `products` is the identifier of an existing product. &#10;&bull; Identifiers used in the array of the property `products` cannot be equal to the published product identifier.",
        },
        categories: {
          default: [],
          description:
            "Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing category code",
        },
        created: {
          description: "Date of creation",
          format: "dateTime",
          type: "string",
          "x-immutable": true,
          "x-read-only": true,
        },
        enabled: {
          default: true,
          description: "Whether the published product is enable",
          type: "boolean",
        },
        family: {
          default: "null",
          description:
            "<a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements",
          type: "string",
          "x-validation-rules": "It is equal to an existing family code",
        },
        groups: {
          default: [],
          description:
            "Codes of the groups to which the published product belong",
          items: {
            type: "string",
          },
          type: "array",
          "x-validation-rules":
            "Each string of the array is equal to an existing group code",
        },
        identifier: {
          description:
            "Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute",
          type: "string",
        },
        quantified_associations: {
          description:
            "Warning: associations with quantities are not compatible with the published products. The response will always be empty.",
          type: "object",
        },
        updated: {
          description: "Date of the last update",
          format: "dateTime",
          type: "string",
          "x-read-only": true,
        },
        values: {
          description:
            "Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details",
          properties: {
            attributeCode: {
              items: {
                properties: {
                  data: {
                    description:
                      "<a href='api-reference.html#Productuuid'>Product</a> value",
                    type: "object",
                  },
                  locale: {
                    description:
                      "<a href='api-reference.html#Locale'>Locale</a> code of the product value",
                    type: "string",
                  },
                  scope: {
                    description:
                      "<a href='api-reference.html#Channel'>Channel</a> code of the product value",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "Validation rules detailed in Product values section",
        },
      },
      required: ["identifier"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const ReferenceEntitySchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            image_download: {
              properties: {
                href: {
                  description:
                    "URI to download the binaries of the reference entity image file",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
          "x-read-only": true,
        },
      },
      type: "object",
    },
    {
      example: {
        code: "brands",
        image: "0/2/d/6/54d81dc888ba1501a8g765f3ab5797569f3bv756c_ref_img.png",
        labels: {
          en_US: "Brands",
          fr_FR: "Marques",
        },
      },
      properties: {
        code: {
          description: "Reference entity code",
          type: "string",
          "x-immutable": true,
        },
        image: {
          default: null,
          description: "Code of the reference entity image",
          type: "string",
        },
        labels: {
          default: {},
          description: "Reference entity labels for each locale",
          properties: {
            localeCode: {
              description: "Reference entity label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  example: {
    _links: {
      image_download: {
        href: "https://demo.akeneo.com/api/rest/v1/reference-entities-media-files/0/2/d/6/54d81dc888ba1501a8g765f3ab5797569f3bv756c_ref_img.png",
      },
    },
    code: "brands",
    image: "0/2/d/6/54d81dc888ba1501a8g765f3ab5797569f3bv756c_ref_img.png",
    labels: {
      en_US: "Brands",
      fr_FR: "Marques",
    },
  },
  type: "object",
} as const;

export const ReferenceEntityAttributeSchema = {
  example: {
    code: "description",
    is_required_for_completeness: true,
    is_rich_text_editor: true,
    is_textarea: true,
    labels: {
      en_US: "Description",
      fr_FR: "Description",
    },
    max_characters: null,
    type: "text",
    validation_regexp: null,
    validation_rule: "none",
    value_per_channel: false,
    value_per_locale: true,
  },
  properties: {
    allowed_extensions: {
      default: [],
      description: "Extensions allowed when the attribute type is `image`",
      items: {
        type: "string",
      },
      type: "array",
      "x-warning": "Only for `image` attribute type",
    },
    code: {
      description: "Attribute code",
      type: "string",
      "x-immutable": true,
    },
    decimals_allowed: {
      default: false,
      description:
        "Whether decimals are allowed when the attribute type is `number`",
      type: "boolean",
      "x-warning": "Only for `number` attribute type",
    },
    is_required_for_completeness: {
      default: false,
      description:
        "Whether the attribute should be part of the record's completeness calculation",
      type: "boolean",
    },
    is_rich_text_editor: {
      description:
        "Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`",
      type: "boolean",
      "x-validation-rules":
        "Required when the property `is_textarea` is equal to `true`",
      "x-warning": "Only for `text` attribute type",
    },
    is_textarea: {
      default: false,
      description:
        "Whether the UI should display a text area instead of a simple field when the attribute type is `text`",
      type: "boolean",
      "x-warning": "Only for `text` attribute type",
    },
    labels: {
      default: {},
      description: "Attribute labels for each locale",
      properties: {
        localeCode: {
          description: "Attribute label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
    max_characters: {
      description:
        "Maximum number of characters allowed for the value of the attribute when the attribute type is `text`",
      type: "integer",
      "x-warning": "Only for `text` attribute type",
    },
    max_file_size: {
      default: null,
      description: "Max file size in MB when the attribute type is `image`",
      type: "string",
      "x-warning": "Only for `image` attribute type",
    },
    max_value: {
      default: null,
      description: "Maximum value allowed when the attribute type is `number`",
      type: "string",
      "x-validation-rules":
        "The maximum value must be greater than the minimum value",
      "x-warning": "Only for `number` attribute type",
    },
    min_value: {
      default: null,
      description: "Minimum value allowed when the attribute type is `number`",
      type: "string",
      "x-validation-rules":
        "The minimum value must be lower than the maximum value",
      "x-warning": "Only for `number` attribute type",
    },
    reference_entity_code: {
      default: null,
      description:
        "Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`",
      type: "string",
      "x-immutable": true,
      "x-validation-rules":
        "Required when the attribute type is either `reference_entity_single_link` or `reference_entity_multiple_links`",
      "x-warning":
        "Only for `reference_entity_single_link` and `reference_entity_multiple_links` attribute type",
    },
    type: {
      description:
        "Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.",
      enum: [
        "text",
        "image",
        "number",
        "single_option",
        "multiple_options",
        "reference_entity_single_link",
        "reference_entity_multiple_links",
      ],
      type: "string",
      "x-immutable": true,
    },
    validation_regexp: {
      default: null,
      description:
        "Regexp expression used to validate the attribute value when the attribute type is `text`",
      type: "string",
      "x-validation-rules":
        "Required when the property `validation_rule` is equal to `regexp`",
      "x-warning": "Only for `text` attribute type",
    },
    validation_rule: {
      default: "none",
      description:
        "Validation rule type used to validate the attribute value when the attribute type is `text`",
      enum: ["email", "url", "regexp", "none"],
      type: "string",
      "x-warning": "Only for `text` attribute type",
    },
    value_per_channel: {
      default: false,
      description:
        "Whether the attribute is scopable, i.e. can have one value by channel",
      type: "boolean",
      "x-immutable": true,
    },
    value_per_locale: {
      default: false,
      description:
        "Whether the attribute is localizable, i.e. can have one value by locale",
      type: "boolean",
      "x-immutable": true,
    },
  },
  required: ["code", "type"],
  type: "object",
} as const;

export const ReferenceEntityAttributeListSchema = {
  items: {
    example: {
      code: "description",
      is_required_for_completeness: true,
      is_rich_text_editor: true,
      is_textarea: true,
      labels: {
        en_US: "Description",
        fr_FR: "Description",
      },
      max_characters: null,
      type: "text",
      validation_regexp: null,
      validation_rule: "none",
      value_per_channel: false,
      value_per_locale: true,
    },
    properties: {
      allowed_extensions: {
        default: [],
        description: "Extensions allowed when the attribute type is `image`",
        items: {
          type: "string",
        },
        type: "array",
        "x-warning": "Only for `image` attribute type",
      },
      code: {
        description: "Attribute code",
        type: "string",
        "x-immutable": true,
      },
      decimals_allowed: {
        default: false,
        description:
          "Whether decimals are allowed when the attribute type is `number`",
        type: "boolean",
        "x-warning": "Only for `number` attribute type",
      },
      is_required_for_completeness: {
        default: false,
        description:
          "Whether the attribute should be part of the record's completeness calculation",
        type: "boolean",
      },
      is_rich_text_editor: {
        description:
          "Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`",
        type: "boolean",
        "x-validation-rules":
          "Required when the property `is_textarea` is equal to `true`",
        "x-warning": "Only for `text` attribute type",
      },
      is_textarea: {
        default: false,
        description:
          "Whether the UI should display a text area instead of a simple field when the attribute type is `text`",
        type: "boolean",
        "x-warning": "Only for `text` attribute type",
      },
      labels: {
        default: {},
        description: "Attribute labels for each locale",
        properties: {
          localeCode: {
            description: "Attribute label for the locale `localeCode`",
            type: "string",
          },
        },
        type: "object",
        "x-validation-rules":
          "The `localeCode` is the code of an existing and activated locale",
      },
      max_characters: {
        description:
          "Maximum number of characters allowed for the value of the attribute when the attribute type is `text`",
        type: "integer",
        "x-warning": "Only for `text` attribute type",
      },
      max_file_size: {
        default: null,
        description: "Max file size in MB when the attribute type is `image`",
        type: "string",
        "x-warning": "Only for `image` attribute type",
      },
      max_value: {
        default: null,
        description:
          "Maximum value allowed when the attribute type is `number`",
        type: "string",
        "x-validation-rules":
          "The maximum value must be greater than the minimum value",
        "x-warning": "Only for `number` attribute type",
      },
      min_value: {
        default: null,
        description:
          "Minimum value allowed when the attribute type is `number`",
        type: "string",
        "x-validation-rules":
          "The minimum value must be lower than the maximum value",
        "x-warning": "Only for `number` attribute type",
      },
      reference_entity_code: {
        default: null,
        description:
          "Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`",
        type: "string",
        "x-immutable": true,
        "x-validation-rules":
          "Required when the attribute type is either `reference_entity_single_link` or `reference_entity_multiple_links`",
        "x-warning":
          "Only for `reference_entity_single_link` and `reference_entity_multiple_links` attribute type",
      },
      type: {
        description:
          "Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.",
        enum: [
          "text",
          "image",
          "number",
          "single_option",
          "multiple_options",
          "reference_entity_single_link",
          "reference_entity_multiple_links",
        ],
        type: "string",
        "x-immutable": true,
      },
      validation_regexp: {
        default: null,
        description:
          "Regexp expression used to validate the attribute value when the attribute type is `text`",
        type: "string",
        "x-validation-rules":
          "Required when the property `validation_rule` is equal to `regexp`",
        "x-warning": "Only for `text` attribute type",
      },
      validation_rule: {
        default: "none",
        description:
          "Validation rule type used to validate the attribute value when the attribute type is `text`",
        enum: ["email", "url", "regexp", "none"],
        type: "string",
        "x-warning": "Only for `text` attribute type",
      },
      value_per_channel: {
        default: false,
        description:
          "Whether the attribute is scopable, i.e. can have one value by channel",
        type: "boolean",
        "x-immutable": true,
      },
      value_per_locale: {
        default: false,
        description:
          "Whether the attribute is localizable, i.e. can have one value by locale",
        type: "boolean",
        "x-immutable": true,
      },
    },
    required: ["code", "type"],
    type: "object",
  },
  type: "array",
} as const;

export const ReferenceEntityAttributeOptionSchema = {
  example: {
    code: "global_nomad",
    labels: {
      en_US: "Global Nomad",
      fr_FR: "Nomade du Monde",
    },
  },
  properties: {
    code: {
      description: "Attribute's option code",
      type: "string",
      "x-immutable": true,
    },
    labels: {
      default: {},
      description: "Attribute labels for each locale",
      properties: {
        localeCode: {
          description: "Attribute label for the locale `localeCode`",
          type: "string",
        },
      },
      type: "object",
      "x-validation-rules":
        "The `localeCode` is the code of an existing and activated locale",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const ReferenceEntityAttributeOptionListSchema = {
  items: {
    example: {
      code: "global_nomad",
      labels: {
        en_US: "Global Nomad",
        fr_FR: "Nomade du Monde",
      },
    },
    properties: {
      code: {
        description: "Attribute's option code",
        type: "string",
        "x-immutable": true,
      },
      labels: {
        default: {},
        description: "Attribute labels for each locale",
        properties: {
          localeCode: {
            description: "Attribute label for the locale `localeCode`",
            type: "string",
          },
        },
        type: "object",
        "x-validation-rules":
          "The `localeCode` is the code of an existing and activated locale",
      },
    },
    required: ["code"],
    type: "object",
  },
  type: "array",
} as const;

export const ReferenceEntityItemListSchema = {
  properties: {
    _links: {
      properties: {
        image_download: {
          properties: {
            href: {
              description:
                "URI to download the binaries of the reference entity image file",
              type: "string",
            },
          },
          type: "object",
        },
        self: {
          properties: {
            href: {
              description: "URI of the resource",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const ReferenceEntityListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            image_download: {
              properties: {
                href: {
                  description:
                    "URI to download the binaries of the reference entity image file",
                  type: "string",
                },
              },
              type: "object",
            },
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "brands",
        image: "0/2/d/6/54d81dc888ba1501a8g765f3ab5797569f3bv756c_ref_img.png",
        labels: {
          en_US: "Brands",
          fr_FR: "Marques",
        },
      },
      properties: {
        code: {
          description: "Reference entity code",
          type: "string",
          "x-immutable": true,
        },
        image: {
          default: null,
          description: "Code of the reference entity image",
          type: "string",
        },
        labels: {
          default: {},
          description: "Reference entity labels for each locale",
          properties: {
            localeCode: {
              description: "Reference entity label for the locale `localeCode`",
              type: "string",
            },
          },
          type: "object",
          "x-validation-rules":
            "The `localeCode` is the code of an existing and activated locale",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const ReferenceEntityRecordSchema = {
  example: {
    code: "kartell",
    created: "2021-01-01T01:23:34+00:00",
    updated: "2021-02-03T23:45:60+00:00",
    values: {
      collection_overview: [
        {
          channel: null,
          data: "5/1/d/8/51d81dc778ba1501a8f998f3ab5797569f3b9e25_img.png",
          locale: null,
        },
      ],
      country: [
        {
          channel: null,
          data: "italy",
          locale: null,
        },
      ],
      creation_year: [
        {
          channel: null,
          data: "1949",
          locale: null,
        },
      ],
      description: [
        {
          channel: null,
          data: "Kartell, the Italian furniture company that sells modern and remarkable pieces of furnitures.",
          locale: "en_US",
        },
        {
          channel: null,
          data: "Kartell, l'éditeur de meuble italien spécialisé dans la signature de belle pièces au design contemporain.",
          locale: "fr_FR",
        },
      ],
      image: [
        {
          channel: null,
          data: "0/c/b/0/0cb0c0e115dedba676f8d1ad8343ec207ab54c7b_image.jpg",
          locale: null,
        },
      ],
      label: [
        {
          channel: null,
          data: "Kartell",
          locale: "en_US",
        },
      ],
    },
  },
  properties: {
    code: {
      description: "Code of the record",
      type: "string",
      "x-immutable": true,
    },
    created: {
      default: null,
      description: "Date of creation.",
      format: "dateTime",
      type: "string",
      "x-from-version": "5.0",
      "x-immutable": true,
      "x-read-only": true,
    },
    updated: {
      default: null,
      description: "Date of the last update.",
      format: "dateTime",
      type: "string",
      "x-from-version": "5.0",
      "x-read-only": true,
    },
    values: {
      description:
        "Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details",
      properties: {
        attributeCode: {
          items: {
            properties: {
              channel: {
                description:
                  "Channel code of the reference entity record value",
                type: "string",
              },
              data: {
                description:
                  "Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.",
                type: "object",
              },
              locale: {
                description: "Locale code of the reference entity record value",
                type: "string",
              },
            },
            type: "object",
          },
          type: "array",
        },
      },
      type: "object",
      "x-validation-rules":
        "Validation rules detailed in Reference entity record values section",
    },
  },
  required: ["code"],
  type: "object",
} as const;

export const ReferenceEntityRecordItemListSchema = {
  properties: {
    _links: {
      properties: {
        self: {
          properties: {
            href: {
              description: "URI of the resource",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;

export const ReferenceEntityRecordListSchema = {
  allOf: [
    {
      properties: {
        _links: {
          properties: {
            self: {
              properties: {
                href: {
                  description: "URI of the resource",
                  type: "string",
                },
              },
              type: "object",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
    {
      example: {
        code: "kartell",
        created: "2021-01-01T01:23:34+00:00",
        updated: "2021-02-03T23:45:60+00:00",
        values: {
          collection_overview: [
            {
              channel: null,
              data: "5/1/d/8/51d81dc778ba1501a8f998f3ab5797569f3b9e25_img.png",
              locale: null,
            },
          ],
          country: [
            {
              channel: null,
              data: "italy",
              locale: null,
            },
          ],
          creation_year: [
            {
              channel: null,
              data: "1949",
              locale: null,
            },
          ],
          description: [
            {
              channel: null,
              data: "Kartell, the Italian furniture company that sells modern and remarkable pieces of furnitures.",
              locale: "en_US",
            },
            {
              channel: null,
              data: "Kartell, l'éditeur de meuble italien spécialisé dans la signature de belle pièces au design contemporain.",
              locale: "fr_FR",
            },
          ],
          image: [
            {
              channel: null,
              data: "0/c/b/0/0cb0c0e115dedba676f8d1ad8343ec207ab54c7b_image.jpg",
              locale: null,
            },
          ],
          label: [
            {
              channel: null,
              data: "Kartell",
              locale: "en_US",
            },
          ],
        },
      },
      properties: {
        code: {
          description: "Code of the record",
          type: "string",
          "x-immutable": true,
        },
        created: {
          default: null,
          description: "Date of creation.",
          format: "dateTime",
          type: "string",
          "x-from-version": "5.0",
          "x-immutable": true,
          "x-read-only": true,
        },
        updated: {
          default: null,
          description: "Date of the last update.",
          format: "dateTime",
          type: "string",
          "x-from-version": "5.0",
          "x-read-only": true,
        },
        values: {
          description:
            "Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details",
          properties: {
            attributeCode: {
              items: {
                properties: {
                  channel: {
                    description:
                      "Channel code of the reference entity record value",
                    type: "string",
                  },
                  data: {
                    description:
                      "Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.",
                    type: "object",
                  },
                  locale: {
                    description:
                      "Locale code of the reference entity record value",
                    type: "string",
                  },
                },
                type: "object",
              },
              type: "array",
            },
          },
          type: "object",
          "x-validation-rules":
            "Validation rules detailed in Reference entity record values section",
        },
      },
      required: ["code"],
      type: "object",
    },
  ],
  type: "object",
} as const;

export const SearchAfterPaginationSchema = {
  properties: {
    _links: {
      properties: {
        first: {
          properties: {
            href: {
              description: "URI of the first page of resources",
              type: "string",
            },
          },
          type: "object",
        },
        next: {
          properties: {
            href: {
              description: "URI of the next page of resources",
              type: "string",
            },
          },
          type: "object",
        },
        self: {
          properties: {
            href: {
              description: "URI of the current page of resources",
              type: "string",
            },
          },
          type: "object",
        },
      },
      type: "object",
    },
  },
  type: "object",
} as const;
