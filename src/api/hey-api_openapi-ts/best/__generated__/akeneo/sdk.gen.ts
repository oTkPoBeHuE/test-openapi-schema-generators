// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from "@hey-api/client-fetch";
import {
  type PostTokenData,
  type PostTokenError,
  type PostTokenResponse,
  type GetEndpointsError,
  type GetEndpointsResponse,
  type GetAssetCategoriesData,
  type GetAssetCategoriesError,
  type GetAssetCategoriesResponse,
  type PatchAssetCategoriesData,
  type PatchAssetCategoriesError,
  type PatchAssetCategoriesResponse,
  type PostAssetCategoriesData,
  type PostAssetCategoriesError,
  type PostAssetCategoriesResponse,
  type GetAssetCategoriesCodeData,
  type GetAssetCategoriesCodeError,
  type GetAssetCategoriesCodeResponse,
  type PatchAssetCategoriesCodeData,
  type PatchAssetCategoriesCodeError,
  type PatchAssetCategoriesCodeResponse,
  type GetAssetFamiliesData,
  type GetAssetFamiliesError,
  type GetAssetFamiliesResponse,
  type GetAssetsData,
  type GetAssetsError,
  type GetAssetsResponse,
  type PatchAssetsData,
  type PatchAssetsError,
  type PatchAssetsResponse,
  type DeleteAssetsCodeData,
  type DeleteAssetsCodeError,
  type DeleteAssetsCodeResponse,
  type GetAssetsCodeData,
  type GetAssetsCodeError,
  type GetAssetsCodeResponse,
  type PatchAssetCodeData,
  type PatchAssetCodeError,
  type PatchAssetCodeResponse,
  type GetAssetFamiliesCodeAttributesData,
  type GetAssetFamiliesCodeAttributesError,
  type GetAssetFamiliesCodeAttributesResponse,
  type GetAssetFamilyAttributesAttributeCodeOptionsData,
  type GetAssetFamilyAttributesAttributeCodeOptionsError,
  type GetAssetFamilyAttributesAttributeCodeOptionsResponse,
  type GetAssetAttributesAttributeCodeOptionsCodeData,
  type GetAssetAttributesAttributeCodeOptionsCodeError,
  type GetAssetAttributesAttributeCodeOptionsCodeResponse,
  type PatchAssetAttributesAttributeCodeOptionsCodeData,
  type PatchAssetAttributesAttributeCodeOptionsCodeError,
  type PatchAssetAttributesAttributeCodeOptionsCodeResponse,
  type GetAssetFamilyAttributesCodeData,
  type GetAssetFamilyAttributesCodeError,
  type GetAssetFamilyAttributesCodeResponse,
  type PatchAssetFamilyAttributesCodeData,
  type PatchAssetFamilyAttributesCodeError,
  type PatchAssetFamilyAttributesCodeResponse,
  type GetAssetFamilyCodeData,
  type GetAssetFamilyCodeError,
  type GetAssetFamilyCodeResponse,
  type PatchAssetFamilyCodeData,
  type PatchAssetFamilyCodeError,
  type PatchAssetFamilyCodeResponse,
  type PostAssetMediaFilesData,
  type PostAssetMediaFilesError,
  type PostAssetMediaFilesResponse,
  type GetAssetMediaFilesCodeData,
  type GetAssetMediaFilesCodeError,
  type GetAssetMediaFilesCodeResponse,
  type GetAssetTagsData,
  type GetAssetTagsError,
  type GetAssetTagsResponse,
  type GetAssetTagsCodeData,
  type GetAssetTagsCodeError,
  type GetAssetTagsCodeResponse,
  type PatchAssetTagsCodeData,
  type PatchAssetTagsCodeError,
  type PatchAssetTagsCodeResponse,
  type GetPamAssetsData,
  type GetPamAssetsError,
  type GetPamAssetsResponse,
  type PatchPamAssetsData,
  type PatchPamAssetsError,
  type PatchPamAssetsResponse,
  type PostPamAssetsData,
  type PostPamAssetsError,
  type PostPamAssetsResponse,
  type GetReferenceFilesLocaleCodeData,
  type GetReferenceFilesLocaleCodeError,
  type GetReferenceFilesLocaleCodeResponse,
  type PostReferenceFilesLocaleCodeData,
  type PostReferenceFilesLocaleCodeError,
  type PostReferenceFilesLocaleCodeResponse,
  type GetReferenceFilesChannelCodeLocaleCodeDownloadData,
  type GetReferenceFilesChannelCodeLocaleCodeDownloadError,
  type GetReferenceFilesChannelCodeLocaleCodeDownloadResponse,
  type GetVariationFilesChannelCodeLocaleCodeData,
  type GetVariationFilesChannelCodeLocaleCodeError,
  type GetVariationFilesChannelCodeLocaleCodeResponse,
  type PostVariationFilesChannelCodeLocaleCodeData,
  type PostVariationFilesChannelCodeLocaleCodeError,
  type PostVariationFilesChannelCodeLocaleCodeResponse,
  type GetVariationFilesChannelCodeLocaleCodeDownloadData,
  type GetVariationFilesChannelCodeLocaleCodeDownloadError,
  type GetVariationFilesChannelCodeLocaleCodeDownloadResponse,
  type GetPamAssetsCodeData,
  type GetPamAssetsCodeError,
  type GetPamAssetsCodeResponse,
  type PatchPamAssetsCodeData,
  type PatchPamAssetsCodeError,
  type PatchPamAssetsCodeResponse,
  type AssociationTypesGetListData,
  type AssociationTypesGetListError,
  type AssociationTypesGetListResponse,
  type SeveralAssociationTypesPatchData,
  type SeveralAssociationTypesPatchError,
  type SeveralAssociationTypesPatchResponse,
  type AssociationTypesPostData,
  type AssociationTypesPostError,
  type AssociationTypesPostResponse,
  type AssociationTypesGetData,
  type AssociationTypesGetError,
  type AssociationTypesGetResponse,
  type AssociationTypesPatchData,
  type AssociationTypesPatchError,
  type AssociationTypesPatchResponse,
  type AttributeGroupsGetListData,
  type AttributeGroupsGetListError,
  type AttributeGroupsGetListResponse,
  type SeveralAttributeGroupsPatchData,
  type SeveralAttributeGroupsPatchError,
  type SeveralAttributeGroupsPatchResponse,
  type AttributeGroupsPostData,
  type AttributeGroupsPostError,
  type AttributeGroupsPostResponse,
  type AttributeGroupsGetData,
  type AttributeGroupsGetError,
  type AttributeGroupsGetResponse,
  type AttributeGroupsPatchData,
  type AttributeGroupsPatchError,
  type AttributeGroupsPatchResponse,
  type GetAttributesData,
  type GetAttributesError,
  type GetAttributesResponse,
  type PatchAttributesData,
  type PatchAttributesError,
  type PatchAttributesResponse,
  type PostAttributesData,
  type PostAttributesError,
  type PostAttributesResponse,
  type GetAttributesAttributeCodeOptionsData,
  type GetAttributesAttributeCodeOptionsError,
  type GetAttributesAttributeCodeOptionsResponse,
  type PatchAttributesAttributeCodeOptionsData,
  type PatchAttributesAttributeCodeOptionsError,
  type PatchAttributesAttributeCodeOptionsResponse,
  type PostAttributesAttributeCodeOptionsData,
  type PostAttributesAttributeCodeOptionsError,
  type PostAttributesAttributeCodeOptionsResponse,
  type GetAttributesAttributeCodeOptionsCodeData,
  type GetAttributesAttributeCodeOptionsCodeError,
  type GetAttributesAttributeCodeOptionsCodeResponse,
  type PatchAttributesAttributeCodeOptionsCodeData,
  type PatchAttributesAttributeCodeOptionsCodeError,
  type PatchAttributesAttributeCodeOptionsCodeResponse,
  type GetAttributesCodeData,
  type GetAttributesCodeError,
  type GetAttributesCodeResponse,
  type PatchAttributesCodeData,
  type PatchAttributesCodeError,
  type PatchAttributesCodeResponse,
  type GetAppCatalogsData,
  type GetAppCatalogsError,
  type GetAppCatalogsResponse,
  type PostAppCatalogData,
  type PostAppCatalogError,
  type PostAppCatalogResponse,
  type DeleteAppCatalogData,
  type DeleteAppCatalogError,
  type DeleteAppCatalogResponse,
  type GetAppCatalogData,
  type GetAppCatalogError,
  type GetAppCatalogResponse,
  type PatchAppCatalogData,
  type PatchAppCatalogError,
  type PatchAppCatalogResponse,
  type GetAppCatalogProductUuidsData,
  type GetAppCatalogProductUuidsError,
  type GetAppCatalogProductUuidsResponse,
  type GetAppCatalogProductsData,
  type GetAppCatalogProductsError,
  type GetAppCatalogProductsResponse,
  type GetAppCatalogProductsUuidData,
  type GetAppCatalogProductsUuidError,
  type GetAppCatalogProductsUuidResponse,
  type GetCategoriesData,
  type GetCategoriesError,
  type GetCategoriesResponse,
  type PatchCategoriesData,
  type PatchCategoriesError,
  type PatchCategoriesResponse,
  type PostCategoriesData,
  type PostCategoriesError,
  type PostCategoriesResponse,
  type GetCategoriesCodeData,
  type GetCategoriesCodeError,
  type GetCategoriesCodeResponse,
  type PatchCategoriesCodeData,
  type PatchCategoriesCodeError,
  type PatchCategoriesCodeResponse,
  type GetCategoryMediaFilesCodeDownloadData,
  type GetCategoryMediaFilesCodeDownloadError,
  type GetCategoryMediaFilesCodeDownloadResponse,
  type GetChannelsData,
  type GetChannelsError,
  type GetChannelsResponse,
  type SeveralChannelsPatchData,
  type SeveralChannelsPatchError,
  type SeveralChannelsPatchResponse,
  type ChannelsPostData,
  type ChannelsPostError,
  type ChannelsPostResponse,
  type GetChannelsCodeData,
  type GetChannelsCodeError,
  type GetChannelsCodeResponse,
  type ChannelsPatchData,
  type ChannelsPatchError,
  type ChannelsPatchResponse,
  type CurrenciesGetListData,
  type CurrenciesGetListError,
  type CurrenciesGetListResponse,
  type CurrenciesGetData,
  type CurrenciesGetError,
  type CurrenciesGetResponse,
  type GetFamiliesData,
  type GetFamiliesError,
  type GetFamiliesResponse,
  type PatchFamiliesData,
  type PatchFamiliesError,
  type PatchFamiliesResponse,
  type PostFamiliesData,
  type PostFamiliesError,
  type PostFamiliesResponse,
  type GetFamiliesCodeData,
  type GetFamiliesCodeError,
  type GetFamiliesCodeResponse,
  type PatchFamiliesCodeData,
  type PatchFamiliesCodeError,
  type PatchFamiliesCodeResponse,
  type GetFamiliesFamilyCodeVariantsData,
  type GetFamiliesFamilyCodeVariantsError,
  type GetFamiliesFamilyCodeVariantsResponse,
  type PatchFamiliesFamilyCodeVariantsData,
  type PatchFamiliesFamilyCodeVariantsError,
  type PatchFamiliesFamilyCodeVariantsResponse,
  type PostFamiliesFamilyCodeVariantsData,
  type PostFamiliesFamilyCodeVariantsError,
  type PostFamiliesFamilyCodeVariantsResponse,
  type GetFamiliesFamilyCodeVariantsCodeData,
  type GetFamiliesFamilyCodeVariantsCodeError,
  type GetFamiliesFamilyCodeVariantsCodeResponse,
  type PatchFamiliesFamilyCodeVariantsCodeData,
  type PatchFamiliesFamilyCodeVariantsCodeError,
  type PatchFamiliesFamilyCodeVariantsCodeResponse,
  type GetLocalesData,
  type GetLocalesError,
  type GetLocalesResponse,
  type GetLocalesCodeData,
  type GetLocalesCodeError,
  type GetLocalesCodeResponse,
  type MeasureFamiliesGetListError,
  type MeasureFamiliesGetListResponse,
  type MeasureFamiliesGetData,
  type MeasureFamiliesGetError,
  type MeasureFamiliesGetResponse,
  type MeasurementFamiliesGetListError,
  type MeasurementFamiliesGetListResponse,
  type PatchMeasurementFamiliesData,
  type PatchMeasurementFamiliesError,
  type PatchMeasurementFamiliesResponse,
  type GetMediaFilesData,
  type GetMediaFilesError,
  type GetMediaFilesResponse,
  type PostMediaFilesData,
  type PostMediaFilesError,
  type PostMediaFilesResponse,
  type GetMediaFilesCodeData,
  type GetMediaFilesCodeError,
  type GetMediaFilesCodeResponse,
  type GetMediaFilesCodeDownloadData,
  type GetMediaFilesCodeDownloadError,
  type GetMediaFilesCodeDownloadResponse,
  type GetProductModelsData,
  type GetProductModelsError,
  type GetProductModelsResponse,
  type PatchProductModelsData,
  type PatchProductModelsError,
  type PatchProductModelsResponse,
  type PostProductModelsData,
  type PostProductModelsError,
  type PostProductModelsResponse,
  type DeleteProductModelsCodeData,
  type DeleteProductModelsCodeError,
  type DeleteProductModelsCodeResponse,
  type GetProductModelsCodeData,
  type GetProductModelsCodeError,
  type GetProductModelsCodeResponse,
  type PatchProductModelsCodeData,
  type PatchProductModelsCodeError,
  type PatchProductModelsCodeResponse,
  type GetProductModelDraftCodeData,
  type GetProductModelDraftCodeError,
  type GetProductModelDraftCodeResponse,
  type PostProductModelProposalData,
  type PostProductModelProposalError,
  type PostProductModelProposalResponse,
  type GetProductsData,
  type GetProductsError,
  type GetProductsResponse,
  type PatchProductsData,
  type PatchProductsError,
  type PatchProductsResponse,
  type PostProductsData,
  type PostProductsError,
  type PostProductsResponse,
  type GetProductsUuidData,
  type GetProductsUuidError,
  type GetProductsUuidResponse,
  type PatchProductsUuidData,
  type PatchProductsUuidError,
  type PatchProductsUuidResponse,
  type PostProductsUuidData,
  type PostProductsUuidError,
  type PostProductsUuidResponse,
  type DeleteProductsUuidUuidData,
  type DeleteProductsUuidUuidError,
  type DeleteProductsUuidUuidResponse,
  type GetProductsUuidUuidData,
  type GetProductsUuidUuidError,
  type GetProductsUuidUuidResponse,
  type PatchProductsUuidUuidData,
  type PatchProductsUuidUuidError,
  type PatchProductsUuidUuidResponse,
  type GetDraftUuidUuidData,
  type GetDraftUuidUuidError,
  type GetDraftUuidUuidResponse,
  type PostProposalUuidData,
  type PostProposalUuidError,
  type PostProposalUuidResponse,
  type DeleteProductsCodeData,
  type DeleteProductsCodeError,
  type DeleteProductsCodeResponse,
  type GetProductsCodeData,
  type GetProductsCodeError,
  type GetProductsCodeResponse,
  type PatchProductsCodeData,
  type PatchProductsCodeError,
  type PatchProductsCodeResponse,
  type GetDraftCodeData,
  type GetDraftCodeError,
  type GetDraftCodeResponse,
  type PostProposalData,
  type PostProposalError,
  type PostProposalResponse,
  type GetPublishedProductsData,
  type GetPublishedProductsError,
  type GetPublishedProductsResponse,
  type GetPublishedProductsCodeData,
  type GetPublishedProductsCodeError,
  type GetPublishedProductsCodeResponse,
  type GetReferenceEntitiesData,
  type GetReferenceEntitiesError,
  type GetReferenceEntitiesResponse,
  type PostReferenceEntityMediaFilesData,
  type PostReferenceEntityMediaFilesError,
  type PostReferenceEntityMediaFilesResponse,
  type GetReferenceEntityMediaFilesCodeData,
  type GetReferenceEntityMediaFilesCodeError,
  type GetReferenceEntityMediaFilesCodeResponse,
  type GetReferenceEntitiesCodeData,
  type GetReferenceEntitiesCodeError,
  type GetReferenceEntitiesCodeResponse,
  type PatchReferenceEntityCodeData,
  type PatchReferenceEntityCodeError,
  type PatchReferenceEntityCodeResponse,
  type GetReferenceEntitiesCodeAttributesData,
  type GetReferenceEntitiesCodeAttributesError,
  type GetReferenceEntitiesCodeAttributesResponse,
  type GetReferenceEntityAttributesAttributeCodeOptionsData,
  type GetReferenceEntityAttributesAttributeCodeOptionsError,
  type GetReferenceEntityAttributesAttributeCodeOptionsResponse,
  type GetReferenceEntityAttributesAttributeCodeOptionsCodeData,
  type GetReferenceEntityAttributesAttributeCodeOptionsCodeError,
  type GetReferenceEntityAttributesAttributeCodeOptionsCodeResponse,
  type PatchReferenceEntityAttributesAttributeCodeOptionsCodeData,
  type PatchReferenceEntityAttributesAttributeCodeOptionsCodeError,
  type PatchReferenceEntityAttributesAttributeCodeOptionsCodeResponse,
  type GetReferenceEntityAttributesCodeData,
  type GetReferenceEntityAttributesCodeError,
  type GetReferenceEntityAttributesCodeResponse,
  type PatchReferenceEntityAttributesCodeData,
  type PatchReferenceEntityAttributesCodeError,
  type PatchReferenceEntityAttributesCodeResponse,
  type GetReferenceEntityRecordsData,
  type GetReferenceEntityRecordsError,
  type GetReferenceEntityRecordsResponse,
  type PatchReferenceEntityRecordsData,
  type PatchReferenceEntityRecordsError,
  type PatchReferenceEntityRecordsResponse,
  type GetReferenceEntityRecordsCodeData,
  type GetReferenceEntityRecordsCodeError,
  type GetReferenceEntityRecordsCodeResponse,
  type PatchReferenceEntityRecordsCodeData,
  type PatchReferenceEntityRecordsCodeError,
  type PatchReferenceEntityRecordsCodeResponse,
  type GetSystemInformationError,
  type GetSystemInformationResponse,
  GetAttributesCodeResponseTransformer,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get authentication token
 * This endpoint allows you to get an authentication token. No need to be authenticated to use this endpoint.
 */
export const postToken = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostTokenResponse,
    PostTokenError,
    ThrowOnError
  >({
    ...options,
    url: "/api/oauth/v1/token",
  });
};

/**
 * Get list of all endpoints
 * This endpoint allows you to get the list of all the available endpoints. No need to be authenticated to use this endpoint.
 */
export const getEndpoints = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetEndpointsResponse,
    GetEndpointsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1",
  });
};

/**
 * Get list of PAM asset categories
 * This endpoint allows you to get a list of PAM asset categories. PAM asset categories are paginated and sorted by `root/left`.
 */
export const getAssetCategories = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAssetCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetCategoriesResponse,
    GetAssetCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-categories",
  });
};

/**
 * Update/create several PAM asset categories
 * This endpoint allows you to update several PAM asset categories at once.
 */
export const patchAssetCategories = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchAssetCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAssetCategoriesResponse,
    PatchAssetCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-categories",
  });
};

/**
 * Create a new PAM asset category
 * This endpoint allows you to create a new PAM asset category.
 */
export const postAssetCategories = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostAssetCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAssetCategoriesResponse,
    PostAssetCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-categories",
  });
};

/**
 * Get a PAM asset category
 * This endpoint allows you to get the information about a given PAM asset category.
 */
export const getAssetCategoriesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAssetCategoriesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetCategoriesCodeResponse,
    GetAssetCategoriesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-categories/{code}",
  });
};

/**
 * Update/create a PAM asset category
 * This endpoint allows you to update a given PAM asset category. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no category exists for the given code, it creates it.
 */
export const patchAssetCategoriesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAssetCategoriesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAssetCategoriesCodeResponse,
    PatchAssetCategoriesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-categories/{code}",
  });
};

/**
 * Get list of asset families
 * This endpoint allows you to get a list of asset families. Asset families are paginated.
 */
export const getAssetFamilies = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAssetFamiliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetFamiliesResponse,
    GetAssetFamiliesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families",
  });
};

/**
 * Get the list of the assets of a given asset family
 * This endpoint allows you to get a list of assets of a given asset family. Assets are paginated. This endpoint is case sensitive on the asset family code.
 */
export const getAssets = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAssetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetsResponse,
    GetAssetsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/assets",
  });
};

/**
 * Update/create several assets
 * This endpoint allows you to update and/or create several assets of one given asset family at once. Learn more about the <a href="/documentation/update.html#patch-asset-attribute-values">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
 */
export const patchAssets = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAssetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAssetsResponse,
    PatchAssetsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/assets",
  });
};

/**
 * Delete an asset
 * This endpoint allows you to delete a given asset. This endpoint is case sensitive on the asset family code.
 */
export const deleteAssetsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteAssetsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAssetsCodeResponse,
    DeleteAssetsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/assets/{code}",
  });
};

/**
 * Get an asset of a given asset family
 * This endpoint allows you to get the information about a given asset for a given asset family. This endpoint is case sensitive on the asset family code.
 */
export const getAssetsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAssetsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetsCodeResponse,
    GetAssetsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/assets/{code}",
  });
};

/**
 * Update/create an asset
 * This endpoint allows you to update a given asset of a given asset family. Learn more about the <a href="/documentation/update.html#patch-asset-attribute-values">Update behavior</a>. Note that if the asset does not already exist for the given asset family, it creates it. This endpoint is case sensitive on the asset family code.
 */
export const patchAssetCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAssetCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAssetCodeResponse,
    PatchAssetCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/assets/{code}",
  });
};

/**
 * Get the list of attributes of a given asset family
 * This endpoint allows you to get the list of attributes of a given asset family.
 */
export const getAssetFamiliesCodeAttributes = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetAssetFamiliesCodeAttributesData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetAssetFamiliesCodeAttributesResponse,
    GetAssetFamiliesCodeAttributesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/attributes",
  });
};

/**
 * Get a list of attribute options of a given attribute for a given asset family
 * This endpoint allows you to get a list of attribute options for a given asset family.
 */
export const getAssetFamilyAttributesAttributeCodeOptions = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetAssetFamilyAttributesAttributeCodeOptionsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetAssetFamilyAttributesAttributeCodeOptionsResponse,
    GetAssetFamilyAttributesAttributeCodeOptionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/attributes/{attribute_code}/options",
  });
};

/**
 * Get an attribute option for a given attribute of a given asset family
 * This endpoint allows you to get the information about a given asset attribute option.
 */
export const getAssetAttributesAttributeCodeOptionsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetAssetAttributesAttributeCodeOptionsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetAssetAttributesAttributeCodeOptionsCodeResponse,
    GetAssetAttributesAttributeCodeOptionsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/attributes/{attribute_code}/options/{code}",
  });
};

/**
 * Update/create an asset attribute option for a given asset family
 * This endpoint allows you to update a given option for a given attribute and a given asset family. Learn more about the <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given asset family, it creates it.
 */
export const patchAssetAttributesAttributeCodeOptionsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchAssetAttributesAttributeCodeOptionsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchAssetAttributesAttributeCodeOptionsCodeResponse,
    PatchAssetAttributesAttributeCodeOptionsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/attributes/{attribute_code}/options/{code}",
  });
};

/**
 * Get an attribute of a given asset family
 * This endpoint allows you to get the information about a given attribute for a given asset family.
 */
export const getAssetFamilyAttributesCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<GetAssetFamilyAttributesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetFamilyAttributesCodeResponse,
    GetAssetFamilyAttributesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/attributes/{code}",
  });
};

/**
 * Update/create an attribute of a given asset family
 * This endpoint allows you to update a given attribute for a given asset family. Note that if the attribute does not already exist for the given asset family, it creates it.
 */
export const patchAssetFamilyAttributesCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchAssetFamilyAttributesCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchAssetFamilyAttributesCodeResponse,
    PatchAssetFamilyAttributesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{asset_family_code}/attributes/{code}",
  });
};

/**
 * Get an asset family
 * This endpoint allows you to get the information about a given asset family.
 */
export const getAssetFamilyCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAssetFamilyCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetFamilyCodeResponse,
    GetAssetFamilyCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{code}",
  });
};

/**
 * Update/create an asset family
 * This endpoint allows you to update a given asset family. Note that if the asset family does not already exist, it creates it.
 */
export const patchAssetFamilyCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAssetFamilyCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAssetFamilyCodeResponse,
    PatchAssetFamilyCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-families/{code}",
  });
};

/**
 * Create a new media file for an asset
 * This endpoint allows you to create a new media file and associate it to a media file attribute value of an asset.
 */
export const postAssetMediaFiles = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostAssetMediaFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAssetMediaFilesResponse,
    PostAssetMediaFilesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-media-files",
  });
};

/**
 * Download the media file associated to an asset
 * This endpoint allows you to download a given media file that is associated with an asset.
 */
export const getAssetMediaFilesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAssetMediaFilesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetMediaFilesCodeResponse,
    GetAssetMediaFilesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-media-files/{code}",
  });
};

/**
 * Get list of PAM asset tags
 * This endpoint allows you to get a list of PAM asset tags. PAM asset tags are paginated.
 */
export const getAssetTags = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAssetTagsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetTagsResponse,
    GetAssetTagsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-tags",
  });
};

/**
 * Get a PAM asset tag
 * This endpoint allows you to get the information about a given PAM asset tag.
 */
export const getAssetTagsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAssetTagsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAssetTagsCodeResponse,
    GetAssetTagsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-tags/{code}",
  });
};

/**
 * Update/create a PAM asset tag
 * This endpoint allows you to update a given PAM asset tag. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no tag exists for the given code, it creates it.
 */
export const patchAssetTagsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAssetTagsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAssetTagsCodeResponse,
    PatchAssetTagsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/asset-tags/{code}",
  });
};

/**
 * Get list of PAM assets
 * This endpoint allows you to get a list of PAM assets. PAM assets are paginated.
 */
export const getPamAssets = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetPamAssetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPamAssetsResponse,
    GetPamAssetsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets",
  });
};

/**
 * Update/create several PAM assets
 * This endpoint allows you to update several PAM assets at once.
 */
export const patchPamAssets = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchPamAssetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchPamAssetsResponse,
    PatchPamAssetsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets",
  });
};

/**
 * Create a new PAM asset
 * This endpoint allows you to create a new PAM asset.
 */
export const postPamAssets = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostPamAssetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostPamAssetsResponse,
    PostPamAssetsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets",
  });
};

/**
 * Get a reference file
 * This endpoint allows you to get the information about a reference file of a given PAM asset.
 */
export const getReferenceFilesLocaleCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<GetReferenceFilesLocaleCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReferenceFilesLocaleCodeResponse,
    GetReferenceFilesLocaleCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{asset_code}/reference-files/{locale_code}",
  });
};

/**
 * Upload a new reference file
 * This endpoint allows you to upload a new reference file for a given PAM asset and locale. It will also automatically generate all the variation files corresponding to this reference file.
 */
export const postReferenceFilesLocaleCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<PostReferenceFilesLocaleCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostReferenceFilesLocaleCodeResponse,
    PostReferenceFilesLocaleCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{asset_code}/reference-files/{locale_code}",
  });
};

/**
 * Download a reference file
 * This endpoint allows you to download a given reference file.
 */
export const getReferenceFilesChannelCodeLocaleCodeDownload = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetReferenceFilesChannelCodeLocaleCodeDownloadData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetReferenceFilesChannelCodeLocaleCodeDownloadResponse,
    GetReferenceFilesChannelCodeLocaleCodeDownloadError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{asset_code}/reference-files/{locale_code}/download",
  });
};

/**
 * Get a variation file
 * This endpoint allows you to get the information about a variation file of a given PAM asset.
 */
export const getVariationFilesChannelCodeLocaleCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetVariationFilesChannelCodeLocaleCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetVariationFilesChannelCodeLocaleCodeResponse,
    GetVariationFilesChannelCodeLocaleCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}",
  });
};

/**
 * Upload a new variation file
 * This endpoint allows you to upload a new variation file for a given PAM asset, channel and locale.
 */
export const postVariationFilesChannelCodeLocaleCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PostVariationFilesChannelCodeLocaleCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    PostVariationFilesChannelCodeLocaleCodeResponse,
    PostVariationFilesChannelCodeLocaleCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}",
  });
};

/**
 * Download a variation file
 * This endpoint allows you to download a given variation file.
 */
export const getVariationFilesChannelCodeLocaleCodeDownload = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetVariationFilesChannelCodeLocaleCodeDownloadData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetVariationFilesChannelCodeLocaleCodeDownloadResponse,
    GetVariationFilesChannelCodeLocaleCodeDownloadError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{asset_code}/variation-files/{channel_code}/{locale_code}/download",
  });
};

/**
 * Get a PAM asset
 * This endpoint allows you to get the information about a given PAM asset.
 */
export const getPamAssetsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetPamAssetsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPamAssetsCodeResponse,
    GetPamAssetsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{code}",
  });
};

/**
 * Update/create a PAM asset
 * This endpoint allows you to update a given PAM asset. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no asset exists for the given code, it creates it.
 */
export const patchPamAssetsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchPamAssetsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchPamAssetsCodeResponse,
    PatchPamAssetsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/assets/{code}",
  });
};

/**
 * Get a list of association types
 * This endpoint allows you to get a list of association types. Association types are paginated and sorted by code.
 */
export const associationTypesGetList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<AssociationTypesGetListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AssociationTypesGetListResponse,
    AssociationTypesGetListError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/association-types",
  });
};

/**
 * Update/create several association types
 * This endpoint allows you to update and/or create several association types at once.
 */
export const severalAssociationTypesPatch = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<SeveralAssociationTypesPatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    SeveralAssociationTypesPatchResponse,
    SeveralAssociationTypesPatchError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/association-types",
  });
};

/**
 * Create a new association type
 * This endpoint allows you to create a new association type.
 */
export const associationTypesPost = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<AssociationTypesPostData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AssociationTypesPostResponse,
    AssociationTypesPostError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/association-types",
  });
};

/**
 * Get an association type
 * This endpoint allows you to get the information about a given association type.
 */
export const associationTypesGet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AssociationTypesGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AssociationTypesGetResponse,
    AssociationTypesGetError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/association-types/{code}",
  });
};

/**
 * Update/create an association type
 * This endpoint allows you to update a given association type. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no association type exists for the given code, it creates it.
 */
export const associationTypesPatch = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AssociationTypesPatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    AssociationTypesPatchResponse,
    AssociationTypesPatchError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/association-types/{code}",
  });
};

/**
 * Get list of attribute groups
 * This endpoint allows you to get a list of attribute groups. Attribute groups are paginated and sorted by code.
 */
export const attributeGroupsGetList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<AttributeGroupsGetListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AttributeGroupsGetListResponse,
    AttributeGroupsGetListError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attribute-groups",
  });
};

/**
 * Update/create several attribute groups
 * This endpoint allows you to update and/or create several attribute groups at once.
 */
export const severalAttributeGroupsPatch = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<SeveralAttributeGroupsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    SeveralAttributeGroupsPatchResponse,
    SeveralAttributeGroupsPatchError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attribute-groups",
  });
};

/**
 * Create a new attribute group
 * This endpoint allows you to create a new attribute group.
 */
export const attributeGroupsPost = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<AttributeGroupsPostData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttributeGroupsPostResponse,
    AttributeGroupsPostError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attribute-groups",
  });
};

/**
 * Get an attribute group
 * This endpoint allows you to get the information about a given attribute group.
 */
export const attributeGroupsGet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AttributeGroupsGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AttributeGroupsGetResponse,
    AttributeGroupsGetError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attribute-groups/{code}",
  });
};

/**
 * Update/create an attribute group
 * This endpoint allows you to update a given attribute group. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute group exists for the given code, it creates it.
 */
export const attributeGroupsPatch = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AttributeGroupsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    AttributeGroupsPatchResponse,
    AttributeGroupsPatchError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attribute-groups/{code}",
  });
};

/**
 * Get list of attributes
 * This endpoint allows you to get a list of attributes. Attributes are paginated and sorted by code.
 */
export const getAttributes = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAttributesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAttributesResponse,
    GetAttributesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes",
  });
};

/**
 * Update/create several attributes
 * This endpoint allows you to update and/or create several attributes at once.
 */
export const patchAttributes = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchAttributesData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAttributesResponse,
    PatchAttributesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes",
  });
};

/**
 * Create a new attribute
 * This endpoint allows you to create a new attribute.
 */
export const postAttributes = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostAttributesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAttributesResponse,
    PostAttributesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes",
  });
};

/**
 * Get list of attribute options
 * This endpoint allows you to get a list of attribute options. Attribute options are paginated and sorted by code.
 */
export const getAttributesAttributeCodeOptions = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetAttributesAttributeCodeOptionsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetAttributesAttributeCodeOptionsResponse,
    GetAttributesAttributeCodeOptionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{attribute_code}/options",
  });
};

/**
 * Update/create several attribute options
 * This endpoint allows you to update several attribute options at once.
 */
export const patchAttributesAttributeCodeOptions = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchAttributesAttributeCodeOptionsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchAttributesAttributeCodeOptionsResponse,
    PatchAttributesAttributeCodeOptionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{attribute_code}/options",
  });
};

/**
 * Create a new attribute option
 * This endpoint allows you to create a new attribute option.
 */
export const postAttributesAttributeCodeOptions = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PostAttributesAttributeCodeOptionsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    PostAttributesAttributeCodeOptionsResponse,
    PostAttributesAttributeCodeOptionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{attribute_code}/options",
  });
};

/**
 * Get an attribute option
 * This endpoint allows you to get the information about a given attribute option.
 */
export const getAttributesAttributeCodeOptionsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetAttributesAttributeCodeOptionsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetAttributesAttributeCodeOptionsCodeResponse,
    GetAttributesAttributeCodeOptionsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{attribute_code}/options/{code}",
  });
};

/**
 * Update/create an attribute option
 * This endpoint allows you to update a given attribute option. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute option exists for the given code, it creates it.
 */
export const patchAttributesAttributeCodeOptionsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchAttributesAttributeCodeOptionsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchAttributesAttributeCodeOptionsCodeResponse,
    PatchAttributesAttributeCodeOptionsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{attribute_code}/options/{code}",
  });
};

/**
 * Get an attribute
 * This endpoint allows you to get the information about a given attribute.
 */
export const getAttributesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAttributesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAttributesCodeResponse,
    GetAttributesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{code}",
    responseTransformer: GetAttributesCodeResponseTransformer,
  });
};

/**
 * Update/create an attribute
 * This endpoint allows you to update a given attribute. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no attribute exists for the given code, it creates it.
 */
export const patchAttributesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAttributesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAttributesCodeResponse,
    PatchAttributesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/attributes/{code}",
  });
};

/**
 * Get the list of owned catalogs
 * This endpoint allows you to get the list of catalogs you owned.
 */
export const getAppCatalogs = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetAppCatalogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAppCatalogsResponse,
    GetAppCatalogsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs",
  });
};

/**
 * Create a new catalog
 * This endpoint allows you to create a new catalog.
 */
export const postAppCatalog = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostAppCatalogData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostAppCatalogResponse,
    PostAppCatalogError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs",
  });
};

/**
 * Delete a catalog
 * This endpoint allows you to delete a catalog.
 */
export const deleteAppCatalog = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteAppCatalogData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAppCatalogResponse,
    DeleteAppCatalogError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs/{id}",
  });
};

/**
 * Get a catalog
 * This endpoint allows you to get the information about a catalog.
 */
export const getAppCatalog = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAppCatalogData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAppCatalogResponse,
    GetAppCatalogError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs/{id}",
  });
};

/**
 * Update a catalog
 * This endpoint allows you to update a catalog.
 */
export const patchAppCatalog = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchAppCatalogData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchAppCatalogResponse,
    PatchAppCatalogError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs/{id}",
  });
};

/**
 * Get the list of product uuids
 * This endpoint allows you to get the list of uuids of products contained in a catalog. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href="apps/catalogs.html#troubleshooting">App Catalog</a> section.
 */
export const getAppCatalogProductUuids = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAppCatalogProductUuidsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAppCatalogProductUuidsResponse,
    GetAppCatalogProductUuidsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs/{id}/product-uuids",
  });
};

/**
 * Get the list of products related to a catalog
 * This endpoint allows you to get the list of products related to a catalog. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your app settings are applied to the set of products you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href="apps/catalogs.html#troubleshooting">App Catalog</a> section.
 */
export const getAppCatalogProducts = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAppCatalogProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAppCatalogProductsResponse,
    GetAppCatalogProductsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs/{id}/products",
  });
};

/**
 * Get a product related to a catalog
 * This endpoint allows you to get a specific product related to a catalog. In the Enterprise Edition, permissions based on your app settings are applied on the product you request. Please, note that a disabled catalog can return an HTTP 200 with a payload containing an error message, for more details see the <a href="apps/catalogs.html#troubleshooting">App Catalog</a> section.
 */
export const getAppCatalogProductsUuid = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetAppCatalogProductsUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAppCatalogProductsUuidResponse,
    GetAppCatalogProductsUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/catalogs/{id}/products/{uuid}",
  });
};

/**
 * Get list of categories
 * This endpoint allows you to get a list of categories. Categories are paginated and sorted by `root/left`.
 */
export const getCategories = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCategoriesResponse,
    GetCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/categories",
  });
};

/**
 * Update/create several categories
 * This endpoint allows you to update several categories at once.
 */
export const patchCategories = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchCategoriesResponse,
    PatchCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/categories",
  });
};

/**
 * Create a new category
 * This endpoint allows you to create a new category.
 */
export const postCategories = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostCategoriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostCategoriesResponse,
    PostCategoriesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/categories",
  });
};

/**
 * Get a category
 * This endpoint allows you to get the information about a given category.
 */
export const getCategoriesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetCategoriesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCategoriesCodeResponse,
    GetCategoriesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/categories/{code}",
  });
};

/**
 * Update/create a category
 * This endpoint allows you to update a given category. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no category exists for the given code, it creates it.
 */
export const patchCategoriesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchCategoriesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchCategoriesCodeResponse,
    PatchCategoriesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/categories/{code}",
  });
};

/**
 * Download a category media file [COMING SOON]
 * This endpoint allows you to download a given media file that is used as an attribute value of a enriched category.
 */
export const getCategoryMediaFilesCodeDownload = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetCategoryMediaFilesCodeDownloadData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetCategoryMediaFilesCodeDownloadResponse,
    GetCategoryMediaFilesCodeDownloadError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/category-media-files/{code}/download",
  });
};

/**
 * Get a list of channels
 * This endpoint allows you to get a list of channels. Channels are paginated and sorted by code.
 */
export const getChannels = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetChannelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetChannelsResponse,
    GetChannelsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/channels",
  });
};

/**
 * Update/create several channels
 * This endpoint allows you to update and/or create several channels at once.
 */
export const severalChannelsPatch = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<SeveralChannelsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    SeveralChannelsPatchResponse,
    SeveralChannelsPatchError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/channels",
  });
};

/**
 * Create a new channel
 * This endpoint allows you to create a new channel.
 */
export const channelsPost = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ChannelsPostData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ChannelsPostResponse,
    ChannelsPostError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/channels",
  });
};

/**
 * Get a channel
 * This endpoint allows you to get the information about a given channel.
 */
export const getChannelsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetChannelsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetChannelsCodeResponse,
    GetChannelsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/channels/{code}",
  });
};

/**
 * Update/create a channel
 * This endpoint allows you to update a given channel. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no channel exists for the given code, it creates it.
 */
export const channelsPatch = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ChannelsPatchData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    ChannelsPatchResponse,
    ChannelsPatchError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/channels/{code}",
  });
};

/**
 * Get a list of currencies
 * This endpoint allows you to get a list of currencies. Currencies are paginated and sorted by code.
 */
export const currenciesGetList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<CurrenciesGetListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CurrenciesGetListResponse,
    CurrenciesGetListError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/currencies",
  });
};

/**
 * Get a currency
 * This endpoint allows you to get the information about a given currency.
 */
export const currenciesGet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CurrenciesGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CurrenciesGetResponse,
    CurrenciesGetError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/currencies/{code}",
  });
};

/**
 * Get list of families
 * This endpoint allows you to get a list of families. Families are paginated and sorted by code.
 */
export const getFamilies = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetFamiliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFamiliesResponse,
    GetFamiliesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families",
  });
};

/**
 * Update/create several families
 * This endpoint allows you to update and/or create several families at once.
 */
export const patchFamilies = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchFamiliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchFamiliesResponse,
    PatchFamiliesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families",
  });
};

/**
 * Create a new family
 * This endpoint allows you to create a new family.
 */
export const postFamilies = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostFamiliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostFamiliesResponse,
    PostFamiliesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families",
  });
};

/**
 * Get a family
 * This endpoint allows you to get the information about a given family.
 */
export const getFamiliesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetFamiliesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFamiliesCodeResponse,
    GetFamiliesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{code}",
  });
};

/**
 * Update/create a family
 * This endpoint allows you to update a given family. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family exists for the given code, it creates it.
 */
export const patchFamiliesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchFamiliesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchFamiliesCodeResponse,
    PatchFamiliesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{code}",
  });
};

/**
 * Get list of family variants
 * This endpoint allows you to get a list of family variants. Family variants are paginated and sorted by code.
 */
export const getFamiliesFamilyCodeVariants = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFamiliesFamilyCodeVariantsResponse,
    GetFamiliesFamilyCodeVariantsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{family_code}/variants",
  });
};

/**
 * Update/create several family variants
 * This endpoint allows you to update and/or create several family variants at once, for a given family.
 */
export const patchFamiliesFamilyCodeVariants = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchFamiliesFamilyCodeVariantsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchFamiliesFamilyCodeVariantsResponse,
    PatchFamiliesFamilyCodeVariantsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{family_code}/variants",
  });
};

/**
 * Create a new family variant
 * This endpoint allows you to create a family variant.
 */
export const postFamiliesFamilyCodeVariants = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PostFamiliesFamilyCodeVariantsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    PostFamiliesFamilyCodeVariantsResponse,
    PostFamiliesFamilyCodeVariantsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{family_code}/variants",
  });
};

/**
 * Get a family variant
 * This endpoint allows you to get the information about a given family variant.
 */
export const getFamiliesFamilyCodeVariantsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetFamiliesFamilyCodeVariantsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetFamiliesFamilyCodeVariantsCodeResponse,
    GetFamiliesFamilyCodeVariantsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{family_code}/variants/{code}",
  });
};

/**
 * Update/create a family variant
 * This endpoint allows you to update a given family variant. Know more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no family variant exists for the given code, it creates it.
 */
export const patchFamiliesFamilyCodeVariantsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchFamiliesFamilyCodeVariantsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchFamiliesFamilyCodeVariantsCodeResponse,
    PatchFamiliesFamilyCodeVariantsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/families/{family_code}/variants/{code}",
  });
};

/**
 * Get a list of locales
 * This endpoint allows you to get a list of locales. Locales are paginated and sorted by code.
 */
export const getLocales = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetLocalesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLocalesResponse,
    GetLocalesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/locales",
  });
};

/**
 * Get a locale
 * This endpoint allows you to get the information about a given locale.
 */
export const getLocalesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetLocalesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLocalesCodeResponse,
    GetLocalesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/locales/{code}",
  });
};

/**
 * Get list of measure familiy
 * This endpoint allows you to get a list of measure families. Measure families are paginated and sorted by code.
 */
export const measureFamiliesGetList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MeasureFamiliesGetListResponse,
    MeasureFamiliesGetListError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/measure-families",
  });
};

/**
 * Get a measure family
 * This endpoint allows you to get the information about a given measure family.
 */
export const measureFamiliesGet = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MeasureFamiliesGetData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MeasureFamiliesGetResponse,
    MeasureFamiliesGetError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/measure-families/{code}",
  });
};

/**
 * Get list of measurement families
 * This endpoint allows you to get a list of measurement families.
 */
export const measurementFamiliesGetList = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MeasurementFamiliesGetListResponse,
    MeasurementFamiliesGetListError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/measurement-families",
  });
};

/**
 * Update/create several measurement families
 * This endpoint allows you to update and/or create several measurement families at once.
 */
export const patchMeasurementFamilies = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchMeasurementFamiliesData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchMeasurementFamiliesResponse,
    PatchMeasurementFamiliesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/measurement-families",
  });
};

/**
 * Get a list of product media files
 * This endpoint allows you to get a list of media files that are used as attribute values in products or product models.
 */
export const getMediaFiles = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetMediaFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMediaFilesResponse,
    GetMediaFilesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/media-files",
  });
};

/**
 * Create a new product media file
 * This endpoint allows you to create a new media file and associate it to an attribute value of a given product or product model.
 */
export const postMediaFiles = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostMediaFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostMediaFilesResponse,
    PostMediaFilesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/media-files",
  });
};

/**
 * Get a product media file
 * This endpoint allows you to get the information about a given media file that is used as an attribute value of a product or a product model.
 */
export const getMediaFilesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetMediaFilesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMediaFilesCodeResponse,
    GetMediaFilesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/media-files/{code}",
  });
};

/**
 * Download a product media file
 * This endpoint allows you to download a given media file that is used as an attribute value of a product or a product model.
 */
export const getMediaFilesCodeDownload = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetMediaFilesCodeDownloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMediaFilesCodeDownloadResponse,
    GetMediaFilesCodeDownloadError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/media-files/{code}/download",
  });
};

/**
 * Get list of product models
 * This endpoint allows you to get a list of product models. Product models are paginated. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
 */
export const getProductModels = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetProductModelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductModelsResponse,
    GetProductModelsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models",
  });
};

/**
 * Update/create several product models
 * This endpoint allows you to update and/or create several product models at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product models exists for the given code, it creates it. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product models you try to update. It may result in the creation of drafts if you only have edit rights through the product model's categories.
 */
export const patchProductModels = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchProductModelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchProductModelsResponse,
    PatchProductModelsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models",
  });
};

/**
 * Create a new product model
 * This endpoint allows you to create a new product model. In the Enterprise Edition, since the v2.3, permissions based on your user groups are applied to the product model you try to create.
 */
export const postProductModels = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostProductModelsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProductModelsResponse,
    PostProductModelsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models",
  });
};

/**
 * Delete a product model
 * This endpoint allows you to delete a given product model. All its children, product models and variant products, will be also deleted. In the Enterprise Edition, the permissions based on your connection user group are applied to the product model you try to delete.
 */
export const deleteProductModelsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteProductModelsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProductModelsCodeResponse,
    DeleteProductModelsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models/{code}",
  });
};

/**
 * Get a product model
 * This endpoint allows you to get the information about a given product model. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product model you request.
 */
export const getProductModelsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProductModelsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductModelsCodeResponse,
    GetProductModelsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models/{code}",
  });
};

/**
 * Update/create a product model
 * This endpoint allows you to update a given product model. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product model exists for the given code, it creates it. In the Enterprise Edition PIM since the 2.3, permissions based on your user groups are applied to the product model you try to update. It may result in the creation of a draft if you only have edit rights through the product model's categories.
 */
export const patchProductModelsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchProductModelsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchProductModelsCodeResponse,
    PatchProductModelsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models/{code}",
  });
};

/**
 * Get a draft
 * This endpoint allows you to get the information about a given product model draft.
 */
export const getProductModelDraftCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProductModelDraftCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductModelDraftCodeResponse,
    GetProductModelDraftCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models/{code}/draft",
  });
};

/**
 * Submit a draft for approval
 * This endpoint allows you to submit a product model draft for approval.
 */
export const postProductModelProposal = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostProductModelProposalData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProductModelProposalResponse,
    PostProductModelProposalError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/product-models/{code}/proposal",
  });
};

/**
 * Get list of products
 * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the set of products you request.
 */
export const getProducts = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductsResponse,
    GetProductsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products",
  });
};

/**
 * Update/create several products
 * This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
 */
export const patchProducts = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchProductsResponse,
    PatchProductsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products",
  });
};

/**
 * Create a new product
 * This endpoint allows you to create a new product. In the Enterprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to create.
 */
export const postProducts = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProductsResponse,
    PostProductsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products",
  });
};

/**
 * Get list of products
 * This endpoint allows you to get a list of products. Products are paginated and they can be filtered. In the Enterprise Edition, permissions based on your user groups are applied to the set of products you request.
 */
export const getProductsUuid = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetProductsUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductsUuidResponse,
    GetProductsUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid",
  });
};

/**
 * Update/create several products
 * This endpoint allows you to update and/or create several products at once. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Enterprise Edition, permissions based on your user groups are applied to the products you try to update. It may result in the creation of drafts if you only have edit rights through the product's categories.
 */
export const patchProductsUuid = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PatchProductsUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchProductsUuidResponse,
    PatchProductsUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid",
  });
};

/**
 * Create a new product
 * This endpoint allows you to create a new product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to create. If no uuid is provided, the PIM will generate one for you.
 */
export const postProductsUuid = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PostProductsUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProductsUuidResponse,
    PostProductsUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid",
  });
};

/**
 * Delete a product
 * This endpoint allows you to delete a given product. In the Enterprise Edition, permissions based on your user groups are applied to the product you try to delete.
 */
export const deleteProductsUuidUuid = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteProductsUuidUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProductsUuidUuidResponse,
    DeleteProductsUuidUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid/{uuid}",
  });
};

/**
 * Get a product
 * This endpoint allows you to get the information about a given product. In the Entreprise Edition, permissions based on your user groups are applied to the product you request.
 */
export const getProductsUuidUuid = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProductsUuidUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductsUuidUuidResponse,
    GetProductsUuidUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid/{uuid}",
  });
};

/**
 * Update/create a product
 * This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given uuid, it creates it. In the Entreprise Edition, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
 */
export const patchProductsUuidUuid = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchProductsUuidUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchProductsUuidUuidResponse,
    PatchProductsUuidUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid/{uuid}",
  });
};

/**
 * Get a draft
 * This endpoint allows you to get the information about a given draft.
 */
export const getDraftUuidUuid = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetDraftUuidUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDraftUuidUuidResponse,
    GetDraftUuidUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid/{uuid}/draft",
  });
};

/**
 * Submit a draft for approval
 * This endpoint allows you to submit a draft for approval.
 */
export const postProposalUuid = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostProposalUuidData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProposalUuidResponse,
    PostProposalUuidError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products-uuid/{uuid}/proposal",
  });
};

/**
 * Delete a product
 * This endpoint allows you to delete a given product. In the Enterprise Edition, since the 2.0, permissions based on your user groups are applied to the product you try to delete.
 */
export const deleteProductsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DeleteProductsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProductsCodeResponse,
    DeleteProductsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products/{code}",
  });
};

/**
 * Get a product
 * This endpoint allows you to get the information about a given product. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you request.
 */
export const getProductsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetProductsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductsCodeResponse,
    GetProductsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products/{code}",
  });
};

/**
 * Update/create a product
 * This endpoint allows you to update a given product. Learn more about <a href="/documentation/update.html#update-behavior">Update behavior</a>. Note that if no product exists for the given identifier, it creates it. In the Entreprise Edition, since the v2.0, permissions based on your user groups are applied to the product you try to update. It may result in the creation of a draft if you only have edit rights through the product's categories.
 */
export const patchProductsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchProductsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchProductsCodeResponse,
    PatchProductsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products/{code}",
  });
};

/**
 * Get a draft
 * This endpoint allows you to get the information about a given draft.
 */
export const getDraftCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetDraftCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDraftCodeResponse,
    GetDraftCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products/{code}/draft",
  });
};

/**
 * Submit a draft for approval
 * This endpoint allows you to submit a draft for approval.
 */
export const postProposal = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostProposalData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProposalResponse,
    PostProposalError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/products/{code}/proposal",
  });
};

/**
 * Get list of published products
 * This endpoint allows you to get a list of published products. Published products are paginated and they can be filtered.
 */
export const getPublishedProducts = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetPublishedProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPublishedProductsResponse,
    GetPublishedProductsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/published-products",
  });
};

/**
 * Get a published product
 * This endpoint allows you to get the information about a given published product.
 */
export const getPublishedProductsCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetPublishedProductsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPublishedProductsCodeResponse,
    GetPublishedProductsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/published-products/{code}",
  });
};

/**
 * Get list of reference entities
 * This endpoint allows you to get a list of reference entities. Reference entities are paginated.
 */
export const getReferenceEntities = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GetReferenceEntitiesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntitiesResponse,
    GetReferenceEntitiesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities",
  });
};

/**
 * Create a new media file for a reference entity or a record
 * This endpoint allows you to create a new media file and associate it to the image of a reference entity, or to the main image or to an attribute value of a record.
 */
export const postReferenceEntityMediaFiles = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<PostReferenceEntityMediaFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostReferenceEntityMediaFilesResponse,
    PostReferenceEntityMediaFilesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities-media-files",
  });
};

/**
 * Download the media file associated to a reference entity or a record
 * This endpoint allows you to download a given media file that is associated with a reference entity or a record.
 */
export const getReferenceEntityMediaFilesCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetReferenceEntityMediaFilesCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntityMediaFilesCodeResponse,
    GetReferenceEntityMediaFilesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities-media-files/{code}",
  });
};

/**
 * Get a reference entity
 * This endpoint allows you to get the information about a given reference entity.
 */
export const getReferenceEntitiesCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetReferenceEntitiesCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntitiesCodeResponse,
    GetReferenceEntitiesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{code}",
  });
};

/**
 * Update/create a reference entity
 * This endpoint allows you to update a given reference entity. Note that if the reference entity does not already exist, it creates it.
 */
export const patchReferenceEntityCode = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PatchReferenceEntityCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchReferenceEntityCodeResponse,
    PatchReferenceEntityCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{code}",
  });
};

/**
 * Get the list of attributes of a given reference entity
 * This endpoint allows you to get the list of attributes of a given reference entity.
 */
export const getReferenceEntitiesCodeAttributes = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetReferenceEntitiesCodeAttributesData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntitiesCodeAttributesResponse,
    GetReferenceEntitiesCodeAttributesError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/attributes",
  });
};

/**
 * Get a list of attribute options of a given attribute for a given reference entity
 * This endpoint allows you to get a list of attribute options for a given reference entity.
 */
export const getReferenceEntityAttributesAttributeCodeOptions = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetReferenceEntityAttributesAttributeCodeOptionsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntityAttributesAttributeCodeOptionsResponse,
    GetReferenceEntityAttributesAttributeCodeOptionsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options",
  });
};

/**
 * Get an attribute option for a given attribute of a given reference entity
 * This endpoint allows you to get the information about a given attribute option.
 */
export const getReferenceEntityAttributesAttributeCodeOptionsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetReferenceEntityAttributesAttributeCodeOptionsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntityAttributesAttributeCodeOptionsCodeResponse,
    GetReferenceEntityAttributesAttributeCodeOptionsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}",
  });
};

/**
 * Update/create a reference entity attribute option
 * This endpoint allows you to update a given option for a given attribute and a given reference entity. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the option does not already exist for the given attribute of the given reference entity, it creates it.
 */
export const patchReferenceEntityAttributesAttributeCodeOptionsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchReferenceEntityAttributesAttributeCodeOptionsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchReferenceEntityAttributesAttributeCodeOptionsCodeResponse,
    PatchReferenceEntityAttributesAttributeCodeOptionsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{attribute_code}/options/{code}",
  });
};

/**
 * Get an attribute of a given reference entity
 * This endpoint allows you to get the information about a given attribute for a given reference entity.
 */
export const getReferenceEntityAttributesCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    GetReferenceEntityAttributesCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntityAttributesCodeResponse,
    GetReferenceEntityAttributesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{code}",
  });
};

/**
 * Update/create an attribute of a given reference entity
 * This endpoint allows you to update a given attribute for a given renference entity. Note that if the attribute does not already exist for the given reference entity, it creates it.
 */
export const patchReferenceEntityAttributesCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchReferenceEntityAttributesCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchReferenceEntityAttributesCodeResponse,
    PatchReferenceEntityAttributesCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/attributes/{code}",
  });
};

/**
 * Get the list of the records of a reference entity
 * This endpoint allows you to get a list of records of a given reference entity. Records are paginated and can be filtered.
 */
export const getReferenceEntityRecords = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetReferenceEntityRecordsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntityRecordsResponse,
    GetReferenceEntityRecordsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/records",
  });
};

/**
 * Update/create several reference entity records
 * This endpoint allows you to update and/or create several records of one given reference entity at once. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
 */
export const patchReferenceEntityRecords = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<PatchReferenceEntityRecordsData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    PatchReferenceEntityRecordsResponse,
    PatchReferenceEntityRecordsError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/records",
  });
};

/**
 * Get a record of a given reference entity
 * This endpoint allows you to get the information about a given record for a given reference entity.
 */
export const getReferenceEntityRecordsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<GetReferenceEntityRecordsCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReferenceEntityRecordsCodeResponse,
    GetReferenceEntityRecordsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}",
  });
};

/**
 * Update/create a record of a given reference entity
 * This endpoint allows you to update a given record of a given renference entity. Learn more about <a href="/documentation/update.html#patch-reference-entity-record-values">Update behavior</a>. Note that if the record does not already exist for the given reference entity, it creates it.
 */
export const patchReferenceEntityRecordsCode = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<
    PatchReferenceEntityRecordsCodeData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).patch<
    PatchReferenceEntityRecordsCodeResponse,
    PatchReferenceEntityRecordsCodeError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/reference-entities/{reference_entity_code}/records/{code}",
  });
};

/**
 * Get system information
 * This endpoint allows you to get the version and the edition of the PIM. Example of what you can get <table class="description-table"> <thead> <tr> <th align="center">Environment</th> <th align="center">Edition</th> <th align="center">Version</th> </tr> </thead> <tbody> <tr> <td align="center">SaaS EE</td> <td align="center">Serenity</td> <td align="center">v20230112013744</td> </tr> <tr> <td align="center">SaaS CE</td> <td align="center">GE</td> <td align="center">v20210526040645</td> </tr> <tr> <td align="center">PaaS or onPrem EE</td> <td align="center">EE</td> <td align="center">5.0.28</td> </tr> <tr> <td align="center">PaaS or onPrem CE</td> <td align="center">CE</td> <td align="center">5.0.28</td> </tr> </tbody> </table>
 */
export const getSystemInformation = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSystemInformationResponse,
    GetSystemInformationError,
    ThrowOnError
  >({
    ...options,
    url: "/api/rest/v1/system-information",
  });
};
