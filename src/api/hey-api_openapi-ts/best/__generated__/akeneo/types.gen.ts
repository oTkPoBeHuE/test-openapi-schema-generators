// This file is auto-generated by @hey-api/openapi-ts

export type AppCatalogList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Whether the catalog is enabled or not
   */
  enabled?: boolean;
  /**
   * Catalog id
   */
  id?: string;
  /**
   * Catalog name
   */
  name?: string;
};

export type AssetAttributeList = Array<{
  /**
   * Extensions allowed when the attribute type is `media_file`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
   */
  is_read_only?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `media_file`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
   */
  media_type: "image" | "pdf" | "youtube" | "vimeo" | "other";
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
   */
  prefix?: string;
  /**
   * Suffix of the `media_link` attribute type. The common url suffix for the media
   */
  suffix?: string;
  /**
   * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "media_link"
    | "number"
    | "media_file"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links"
    | "boolean";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
}>;

export type AssetAttributeOptionList = Array<{
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
}>;

export type AssetFamilyItemList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
};

export type AssetFamilyList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Attribute code that is used as the main media of the asset family.
   */
  attribute_as_main_media?: string;
  /**
   * Asset family code
   */
  code: string;
  /**
   * Asset family labels for each locale
   */
  labels?: {
    /**
     * Asset family label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
   */
  naming_convention?: {
    /**
     * Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.
     */
    abort_asset_creation_on_error?: boolean;
    /**
     * The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.
     */
    pattern?: string;
    /**
     * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
     */
    source?: unknown;
  };
  /**
   * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.
   */
  product_link_rules?: Array<{
    /**
     * The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.
     */
    assign_assets_to?: Array<{
      attribute: string;
      channel?: string;
      locale?: string;
      mode: string;
    }>;
    /**
     * The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.
     */
    product_selections?: Array<{
      channel?: string;
      field: string;
      locale?: string;
      operator: string;
      value: string;
    }>;
  }>;
  /**
   * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.
   */
  transformations?: Array<{
    /**
     * The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
     */
    filename_prefix?: string;
    /**
     * The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
     */
    filename_suffix?: string;
    /**
     * The name of the transformation
     */
    label: string;
    /**
     * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
     */
    operations: {
      parameters?: {
        colorspace?: string;
        height?: number;
        quality?: number;
        ratio?: number;
        "resolution-unit"?: string;
        "resolution-x"?: number;
        "resolution-y"?: number;
        width?: number;
      };
      type?: string;
    };
    /**
     * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
     */
    source: {
      attribute: string;
      channel: string;
      locale: string;
    };
    /**
     * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
     */
    target: {
      attribute: string;
      channel: string;
      locale: string;
    };
  }>;
};

export type AssetItemList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
};

export type AssetList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Code of the asset
   */
  code: string;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Channel code of the asset attribute value
       */
      channel?: string;
      /**
       * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Locale code of the asset attribute value
       */
      locale?: string;
    }>;
  };
};

export type AssociationType = {
  /**
   * Association type code
   */
  code: string;
  /**
   * When true, the association is a quantified association (Only available in the PIM Serenity version.)
   */
  is_quantified?: boolean;
  /**
   * When true, the association is a two-way association (Only available in the PIM Serenity version.)
   */
  is_two_way?: boolean;
  /**
   * Association type labels for each locale
   */
  labels?: {
    /**
     * Association type label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type AssociationTypeList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Association type code
   */
  code: string;
  /**
   * When true, the association is a quantified association (Only available in the PIM Serenity version.)
   */
  is_quantified?: boolean;
  /**
   * When true, the association is a two-way association (Only available in the PIM Serenity version.)
   */
  is_two_way?: boolean;
  /**
   * Association type labels for each locale
   */
  labels?: {
    /**
     * Association type label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type Attribute = {
  /**
   * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
   */
  allowed_extensions?: Array<string>;
  /**
   * To make the attribute locale specfic, specify here for which locales it is specific
   */
  available_locales?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Maximum date allowed when the attribute type is `pim_catalog_date`
   */
  date_max?: Date;
  /**
   * Minimum date allowed when the attribute type is `pim_catalog_date`
   */
  date_min?: Date;
  /**
   * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  decimals_allowed?: boolean;
  /**
   * Default metric unit when the attribute type is `pim_catalog_metric`
   */
  default_metric_unit?: string;
  /**
   * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
   */
  default_value?: boolean;
  /**
   * Attribute group
   */
  group: string;
  /**
   * Group labels for each locale
   */
  group_labels?: {
    /**
     * Group label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  localizable?: boolean;
  /**
   * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
   */
  max_file_size?: string;
  /**
   * Metric family when the attribute type is `pim_catalog_metric`
   */
  metric_family?: string;
  /**
   * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
   */
  negative_allowed?: boolean;
  /**
   * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  number_max?: string;
  /**
   * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  number_min?: string;
  /**
   * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
   */
  reference_data_name?: string;
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  scopable?: boolean;
  /**
   * Order of the attribute in its group
   */
  sort_order?: number;
  /**
   * Configuration of the Table attribute (columns)
   */
  table_configuration?: Array<{
    /**
     * Column code
     */
    code: string;
    /**
     * Column data type
     */
    data_type: "select" | "text" | "number" | "boolean";
    /**
     * Defines if the column should be entirely filled for the attribute to be considered complete
     */
    is_required_for_completeness?: boolean;
    /**
     * Column labels for each locale
     */
    labels?: {
      /**
       * Column label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * User defined validation constraints on the cell content
     */
    validations?: {
      /**
       * whether the value of a numeric cell can hold a decimal part
       */
      decimals_allowed?: boolean;
      /**
       * maximum value of a numeric cell
       */
      max?: number;
      /**
       * maximum length of a text cell
       */
      max_length?: number;
      /**
       * minimum value of a numeric cell
       */
      min?: number;
    };
  }>;
  /**
   * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
   */
  type:
    | "pim_catalog_identifier"
    | "pim_catalog_metric"
    | "pim_catalog_number"
    | "pim_catalog_reference_data_multi_select"
    | "pim_catalog_reference_data_simple_select"
    | "pim_catalog_simpleselect"
    | "pim_catalog_multiselect"
    | "pim_catalog_date"
    | "pim_catalog_textarea"
    | "pim_catalog_text"
    | "pim_catalog_file"
    | "pim_catalog_image"
    | "pim_catalog_price_collection"
    | "pim_catalog_boolean"
    | "akeneo_reference_entity"
    | "akeneo_reference_entity_collection"
    | "pim_catalog_asset_collection";
  /**
   * Whether two values for the attribute cannot be the same
   */
  unique?: boolean;
  /**
   * Whether the attribute can be used as a filter for the product grid in the PIM user interface
   */
  useable_as_grid_filter?: boolean;
  /**
   * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
   */
  validation_rule?: string;
  /**
   * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
   */
  wysiwyg_enabled?: boolean;
};

export type AttributeGroup = {
  /**
   * Attribute codes that compose the attribute group
   */
  attributes?: Array<string>;
  /**
   * Attribute group code
   */
  code: string;
  /**
   * Attribute group labels for each locale
   */
  labels?: {
    /**
     * Attribute group label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attribute group order among other attribute groups
   */
  sort_order?: number;
};

export type AttributeGroupList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Attribute codes that compose the attribute group
   */
  attributes?: Array<string>;
  /**
   * Attribute group code
   */
  code: string;
  /**
   * Attribute group labels for each locale
   */
  labels?: {
    /**
     * Attribute group label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attribute group order among other attribute groups
   */
  sort_order?: number;
};

export type AttributeList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
   */
  allowed_extensions?: Array<string>;
  /**
   * To make the attribute locale specfic, specify here for which locales it is specific
   */
  available_locales?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Maximum date allowed when the attribute type is `pim_catalog_date`
   */
  date_max?: Date;
  /**
   * Minimum date allowed when the attribute type is `pim_catalog_date`
   */
  date_min?: Date;
  /**
   * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  decimals_allowed?: boolean;
  /**
   * Default metric unit when the attribute type is `pim_catalog_metric`
   */
  default_metric_unit?: string;
  /**
   * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
   */
  default_value?: boolean;
  /**
   * Attribute group
   */
  group: string;
  /**
   * Group labels for each locale
   */
  group_labels?: {
    /**
     * Group label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  localizable?: boolean;
  /**
   * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
   */
  max_file_size?: string;
  /**
   * Metric family when the attribute type is `pim_catalog_metric`
   */
  metric_family?: string;
  /**
   * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
   */
  negative_allowed?: boolean;
  /**
   * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  number_max?: string;
  /**
   * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  number_min?: string;
  /**
   * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
   */
  reference_data_name?: string;
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  scopable?: boolean;
  /**
   * Order of the attribute in its group
   */
  sort_order?: number;
  /**
   * Configuration of the Table attribute (columns)
   */
  table_configuration?: Array<{
    /**
     * Column code
     */
    code: string;
    /**
     * Column data type
     */
    data_type: "select" | "text" | "number" | "boolean";
    /**
     * Defines if the column should be entirely filled for the attribute to be considered complete
     */
    is_required_for_completeness?: boolean;
    /**
     * Column labels for each locale
     */
    labels?: {
      /**
       * Column label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * User defined validation constraints on the cell content
     */
    validations?: {
      /**
       * whether the value of a numeric cell can hold a decimal part
       */
      decimals_allowed?: boolean;
      /**
       * maximum value of a numeric cell
       */
      max?: number;
      /**
       * maximum length of a text cell
       */
      max_length?: number;
      /**
       * minimum value of a numeric cell
       */
      min?: number;
    };
  }>;
  /**
   * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
   */
  type:
    | "pim_catalog_identifier"
    | "pim_catalog_metric"
    | "pim_catalog_number"
    | "pim_catalog_reference_data_multi_select"
    | "pim_catalog_reference_data_simple_select"
    | "pim_catalog_simpleselect"
    | "pim_catalog_multiselect"
    | "pim_catalog_date"
    | "pim_catalog_textarea"
    | "pim_catalog_text"
    | "pim_catalog_file"
    | "pim_catalog_image"
    | "pim_catalog_price_collection"
    | "pim_catalog_boolean"
    | "akeneo_reference_entity"
    | "akeneo_reference_entity_collection"
    | "pim_catalog_asset_collection";
  /**
   * Whether two values for the attribute cannot be the same
   */
  unique?: boolean;
  /**
   * Whether the attribute can be used as a filter for the product grid in the PIM user interface
   */
  useable_as_grid_filter?: boolean;
  /**
   * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
   */
  validation_rule?: string;
  /**
   * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
   */
  wysiwyg_enabled?: boolean;
};

export type AttributeOption = {
  /**
   * Code of attribute related to the attribute option
   */
  attribute?: string;
  /**
   * Code of option
   */
  code: string;
  /**
   * Attribute option labels for each locale
   */
  labels?: {
    /**
     * Attribute option label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Order of attribute option
   */
  sort_order?: number;
};

export type AttributeOptionList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Code of attribute related to the attribute option
   */
  attribute?: string;
  /**
   * Code of option
   */
  code: string;
  /**
   * Attribute option labels for each locale
   */
  labels?: {
    /**
     * Attribute option label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Order of attribute option
   */
  sort_order?: number;
};

export type Category = {
  /**
   * Category code
   */
  code: string;
  /**
   * Category labels for each locale
   */
  labels?: {
    /**
     * Category label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Category code of the parent's category
   */
  parent?: string;
  /**
   * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")
   */
  position?: number;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Attribute values
   */
  values?: {
    "attributeCode|attributeUuid|channelCode|localeCode"?: Array<{
      /**
       * The attribute code with its uuid (attributeCode|attributeUuid)
       */
      attribute_code?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the attribute value
       */
      channel?: string;
      /**
       * Attribute value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the attribute value
       */
      locale?: string;
      /**
       * The attribute type
       */
      type?: string;
    }>;
  };
};

export type CategoryList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Category code
   */
  code: string;
  /**
   * Category labels for each locale
   */
  labels?: {
    /**
     * Category label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Category code of the parent's category
   */
  parent?: string;
  /**
   * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")
   */
  position?: number;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Attribute values
   */
  values?: {
    "attributeCode|attributeUuid|channelCode|localeCode"?: Array<{
      /**
       * The attribute code with its uuid (attributeCode|attributeUuid)
       */
      attribute_code?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the attribute value
       */
      channel?: string;
      /**
       * Attribute value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the attribute value
       */
      locale?: string;
      /**
       * The attribute type
       */
      type?: string;
    }>;
  };
};

export type Channel = {
  /**
   * Code of the category tree linked to the channel
   */
  category_tree: string;
  /**
   * Channel code
   */
  code: string;
  /**
   * Units to which the given metric attributes should be converted when exporting products
   */
  conversion_units?: {
    /**
     * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
     */
    attributeCode?: string;
  };
  /**
   * Codes of activated currencies for the channel
   */
  currencies: Array<string>;
  /**
   * Channel labels for each locale
   */
  labels?: {
    /**
     * Channel label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Codes of activated locales for the channel
   */
  locales: Array<string>;
};

export type ChannelList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Code of the category tree linked to the channel
   */
  category_tree: string;
  /**
   * Channel code
   */
  code: string;
  /**
   * Units to which the given metric attributes should be converted when exporting products
   */
  conversion_units?: {
    /**
     * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
     */
    attributeCode?: string;
  };
  /**
   * Codes of activated currencies for the channel
   */
  currencies: Array<string>;
  /**
   * Channel labels for each locale
   */
  labels?: {
    /**
     * Channel label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Codes of activated locales for the channel
   */
  locales: Array<string>;
};

export type Currency = {
  /**
   * Currency code
   */
  code: string;
  /**
   * Whether the currency is enabled
   */
  enabled?: boolean;
};

export type CurrencyList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Currency code
   */
  code: string;
  /**
   * Whether the currency is enabled
   */
  enabled?: boolean;
};

export type DeprecatedAsset = {
  /**
   * Codes of the PAM asset categories in which the asset is classified
   */
  categories?: Array<string>;
  /**
   * PAM asset code
   */
  code: string;
  /**
   * Description of the PAM asset
   */
  description?: string;
  /**
   * Date on which the PAM asset expire
   */
  end_of_use?: string;
  /**
   * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
   */
  localizable?: boolean;
  /**
   * Reference files of the PAM asset
   */
  reference_files?: Array<{
    /**
     * Links to get and download the reference file
     */
    _link?: {
      download?: {
        /**
         * URI to download the reference file
         */
        href?: string;
      };
      self?: {
        /**
         * URI of the reference file entity
         */
        href?: string;
      };
    };
    /**
     * Code of the reference file
     */
    code?: string;
    /**
     * Locale code of the reference file
     */
    locale?: string;
  }>;
  /**
   * Tags of the PAM asset
   */
  tags?: Array<string>;
  /**
   * Variations of the PAM asset
   */
  variation_files?: Array<{
    /**
     * Links to get and download the variation file
     */
    _link?: {
      download?: {
        /**
         * URI to download the variation file
         */
        href?: string;
      };
      self?: {
        /**
         * URI of the variation entity
         */
        href?: string;
      };
    };
    /**
     * Code of the variation
     */
    code?: string;
    /**
     * Locale code of the variation
     */
    locale?: string;
    /**
     * Channel code of the variation
     */
    scope?: string;
  }>;
};

export type DeprecatedAssetCategory = {
  /**
   * PAM asset category code
   */
  code: string;
  /**
   * PAM asset category labels for each locale
   */
  labels?: {
    /**
     * PAM asset category label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * PAM ssset category code of the parent's asset category
   */
  parent?: string;
};

export type DeprecatedAssetCategoryList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * PAM asset category code
   */
  code: string;
  /**
   * PAM asset category labels for each locale
   */
  labels?: {
    /**
     * PAM asset category label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * PAM ssset category code of the parent's asset category
   */
  parent?: string;
};

export type DeprecatedAssetList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Codes of the PAM asset categories in which the asset is classified
   */
  categories?: Array<string>;
  /**
   * PAM asset code
   */
  code: string;
  /**
   * Description of the PAM asset
   */
  description?: string;
  /**
   * Date on which the PAM asset expire
   */
  end_of_use?: string;
  /**
   * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
   */
  localizable?: boolean;
  /**
   * Reference files of the PAM asset
   */
  reference_files?: Array<{
    /**
     * Links to get and download the reference file
     */
    _link?: {
      download?: {
        /**
         * URI to download the reference file
         */
        href?: string;
      };
      self?: {
        /**
         * URI of the reference file entity
         */
        href?: string;
      };
    };
    /**
     * Code of the reference file
     */
    code?: string;
    /**
     * Locale code of the reference file
     */
    locale?: string;
  }>;
  /**
   * Tags of the PAM asset
   */
  tags?: Array<string>;
  /**
   * Variations of the PAM asset
   */
  variation_files?: Array<{
    /**
     * Links to get and download the variation file
     */
    _link?: {
      download?: {
        /**
         * URI to download the variation file
         */
        href?: string;
      };
      self?: {
        /**
         * URI of the variation entity
         */
        href?: string;
      };
    };
    /**
     * Code of the variation
     */
    code?: string;
    /**
     * Locale code of the variation
     */
    locale?: string;
    /**
     * Channel code of the variation
     */
    scope?: string;
  }>;
};

export type DeprecatedAssetReferenceFile = {
  /**
   * Links to get and download the reference file
   */
  _link?: {
    download?: {
      /**
       * URI to download the reference file
       */
      href?: string;
    };
  };
  /**
   * Code of the PAM asset reference file
   */
  code?: string;
  /**
   * Locale of the PAM asset reference file, equal to `null` if the asset is not localizable
   */
  locale?: string;
};

export type DeprecatedAssetReferenceFileUploadWarning = {
  errors?: Array<{
    /**
     * Channel for which the variation file generation failed
     */
    channel?: string;
    /**
     * Locale for which the variation file generation failed
     */
    locale?: string;
    /**
     * Message explaining why the variation file generation failed
     */
    message?: string;
  }>;
  /**
   * Message explaining the warning
   */
  message?: string;
};

export type DeprecatedAssetTag = {
  /**
   * PAM asset tag code
   */
  code: string;
};

export type DeprecatedAssetTagList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * PAM asset tag code
   */
  code: string;
};

export type DeprecatedAssetVariationFile = {
  /**
   * Links to get and download the reference file
   */
  _link?: {
    download?: {
      /**
       * URI to download the variation file
       */
      href?: string;
    };
  };
  /**
   * Code of the PAM asset variation file
   */
  code?: string;
  /**
   * Locale of the PAM asset variation file, equal to `null` if the asset is not localizable
   */
  locale?: string;
  /**
   * Channel of the PAM asset variation file
   */
  scope?: string;
};

export type Error = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type ErrorByLine = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type ErrorByLineProductUuid = {
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
  /**
   * Product uuid
   */
  uuid?: string;
};

export type ErrorByObject = Array<{
  /**
   * Resource code
   */
  code?: string;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
}>;

export type Family = {
  /**
   * Attribute code used as the main picture in the user interface (only since v2.0)
   */
  attribute_as_image?: string;
  /**
   * Attribute code used as label
   */
  attribute_as_label: string;
  /**
   * Attributes codes of the family that are required for the completeness calculation for each channel
   */
  attribute_requirements?: {
    channelCode?: Array<string>;
  };
  /**
   * Attributes codes that compose the family
   */
  attributes?: Array<string>;
  /**
   * Family code
   */
  code: string;
  /**
   * Family labels for each locale
   */
  labels?: {
    /**
     * Family label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type FamilyList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Attribute code used as the main picture in the user interface (only since v2.0)
   */
  attribute_as_image?: string;
  /**
   * Attribute code used as label
   */
  attribute_as_label: string;
  /**
   * Attributes codes of the family that are required for the completeness calculation for each channel
   */
  attribute_requirements?: {
    channelCode?: Array<string>;
  };
  /**
   * Attributes codes that compose the family
   */
  attributes?: Array<string>;
  /**
   * Family code
   */
  code: string;
  /**
   * Family labels for each locale
   */
  labels?: {
    /**
     * Family label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type FamilyVariant = {
  /**
   * Family variant code
   */
  code: string;
  /**
   * Family variant labels for each locale
   */
  labels?: {
    /**
     * Family variant label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attributes distribution according to the enrichment level
   */
  variant_attribute_sets: Array<{
    /**
     * Codes of attributes bind to this enrichment level
     */
    attributes?: Array<string>;
    /**
     * Codes of attributes used as variant axes
     */
    axes: Array<string>;
    /**
     * Enrichment level
     */
    level: number;
  }>;
};

export type FamilyVariantList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Family variant code
   */
  code: string;
  /**
   * Family variant labels for each locale
   */
  labels?: {
    /**
     * Family variant label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attributes distribution according to the enrichment level
   */
  variant_attribute_sets: Array<{
    /**
     * Codes of attributes bind to this enrichment level
     */
    attributes?: Array<string>;
    /**
     * Codes of attributes used as variant axes
     */
    axes: Array<string>;
    /**
     * Enrichment level
     */
    level: number;
  }>;
};

export type ItemList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
};

export type Locale = {
  /**
   * Locale code
   */
  code: string;
  /**
   * Whether the locale is enabled
   */
  enabled?: boolean;
};

export type LocaleList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Locale code
   */
  code: string;
  /**
   * Whether the locale is enabled
   */
  enabled?: boolean;
};

export type MeasureFamily = {
  /**
   * Measure family code
   */
  code: string;
  /**
   * Measure family standard
   */
  standard?: string;
  /**
   * Family units
   */
  units?: Array<{
    /**
     * Measure code
     */
    code?: string;
    /**
     * Mathematic operation to convert the unit into the standard unit
     */
    convert?: unknown;
    /**
     * Measure symbol
     */
    symbol?: string;
  }>;
};

export type MeasureFamilyList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Measure family code
   */
  code: string;
  /**
   * Measure family standard
   */
  standard?: string;
  /**
   * Family units
   */
  units?: Array<{
    /**
     * Measure code
     */
    code?: string;
    /**
     * Mathematic operation to convert the unit into the standard unit
     */
    convert?: unknown;
    /**
     * Measure symbol
     */
    symbol?: string;
  }>;
};

export type MeasurementFamily = {
  /**
   * Measurement family code
   */
  code: string;
  /**
   * Measurement family labels for each locale
   */
  labels?: {
    /**
     * Measurement family label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Unit code used as the standard unit for this measurement family
   */
  standard_unit_code: string;
  /**
   * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
   */
  units: {
    unitCode?: {
      /**
       * Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      code?: string;
      /**
       * Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      convert_from_standard?: Array<{
        /**
         * Operator for a conversion operation to convert the unit in the standard unit
         */
        operator?: "mul" | "div" | "add" | "sub";
        /**
         * Value for a conversion operation to convert the unit in the standard unit
         */
        value?: string;
      }>;
      /**
       * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      labels?: {
        /**
         * Unit label for the locale `localeCode`
         */
        localeCode?: string;
      };
      /**
       * Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      symbol?: string;
    };
  };
};

export type MeasurementFamilyList = {
  /**
   * Measurement family code
   */
  code: string;
  /**
   * Measurement family labels for each locale
   */
  labels?: {
    /**
     * Measurement family label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Unit code used as the standard unit for this measurement family
   */
  standard_unit_code: string;
  /**
   * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
   */
  units: {
    unitCode?: {
      /**
       * Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      code?: string;
      /**
       * Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      convert_from_standard?: Array<{
        /**
         * Operator for a conversion operation to convert the unit in the standard unit
         */
        operator?: "mul" | "div" | "add" | "sub";
        /**
         * Value for a conversion operation to convert the unit in the standard unit
         */
        value?: string;
      }>;
      /**
       * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      labels?: {
        /**
         * Unit label for the locale `localeCode`
         */
        localeCode?: string;
      };
      /**
       * Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      symbol?: string;
    };
  };
};

export type MediaFile = {
  _links?: {
    download?: {
      /**
       * URI to download the binaries of the media file
       */
      href?: string;
    };
  };
} & {
  /**
   * Media file code
   */
  code?: string;
  /**
   * Extension of the media file
   */
  extension?: string;
  /**
   * Mime type of the media file
   */
  mime_type?: string;
  /**
   * Original filename of the media file
   */
  original_filename?: string;
  /**
   * Size of the media file
   */
  size?: number;
};

export type MediaFileItemList = {
  _links?: {
    download?: {
      /**
       * URI to download the binaries of the media file
       */
      href?: string;
    };
    self?: {
      /**
       * URI to get the metadata of the media file
       */
      href?: string;
    };
  };
};

export type MediaFileList = {
  _links?: {
    download?: {
      /**
       * URI to download the binaries of the media file
       */
      href?: string;
    };
    self?: {
      /**
       * URI to get the metadata of the media file
       */
      href?: string;
    };
  };
} & {
  /**
   * Media file code
   */
  code?: string;
  /**
   * Extension of the media file
   */
  extension?: string;
  /**
   * Mime type of the media file
   */
  mime_type?: string;
  /**
   * Original filename of the media file
   */
  original_filename?: string;
  /**
   * Size of the media file
   */
  size?: number;
};

export type Pagination = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type Product = {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product UUID
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type ProductExamples = unknown;

export type ProductList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product UUID
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type ProductModel = {
  /**
   * Several associations related to groups, product and/or other product models, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
   */
  categories?: Array<string>;
  /**
   * Product model code
   */
  code: string;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
   */
  family?: string;
  /**
   * Family variant code from which the product model inherits its attributes and variant attributes
   */
  family_variant: string;
  /**
   * More information around the product model (only available since the v2.3 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product model regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product model is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product model is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type ProductModelList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Several associations related to groups, product and/or other product models, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
   */
  categories?: Array<string>;
  /**
   * Product model code
   */
  code: string;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
   */
  family?: string;
  /**
   * Family variant code from which the product model inherits its attributes and variant attributes
   */
  family_variant: string;
  /**
   * More information around the product model (only available since the v2.3 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product model regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product model is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product model is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type ProductUuid = {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product uuids with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product uuids and quantities with which the product is in relation
       */
      products?: Array<{
        quantity?: number;
        uuid?: string;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product uuid
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type ProductUuidExamples = unknown;

export type ProductUuidList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product uuids with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product uuids and quantities with which the product is in relation
       */
      products?: Array<{
        quantity?: number;
        uuid?: string;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product uuid
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type PublishedProduct = {
  /**
   * Several associations related to groups and/or other published products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the published product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of published product identifiers with which the published product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified
   */
  categories?: Array<string>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the published product is enable
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements
   */
  family?: string;
  /**
   * Codes of the groups to which the published product belong
   */
  groups?: Array<string>;
  /**
   * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
   */
  quantified_associations?: unknown;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type PublishedProductList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Several associations related to groups and/or other published products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the published product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of published product identifiers with which the published product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified
   */
  categories?: Array<string>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the published product is enable
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements
   */
  family?: string;
  /**
   * Codes of the groups to which the published product belong
   */
  groups?: Array<string>;
  /**
   * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
   */
  quantified_associations?: unknown;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type ReferenceEntity = {
  _links?: {
    image_download?: {
      /**
       * URI to download the binaries of the reference entity image file
       */
      href?: string;
    };
  };
} & {
  /**
   * Reference entity code
   */
  code: string;
  /**
   * Code of the reference entity image
   */
  image?: string;
  /**
   * Reference entity labels for each locale
   */
  labels?: {
    /**
     * Reference entity label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type ReferenceEntityAttribute = {
  /**
   * Extensions allowed when the attribute type is `image`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `image`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
   */
  reference_entity_code?: string;
  /**
   * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "image"
    | "number"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
};

export type ReferenceEntityAttributeList = Array<{
  /**
   * Extensions allowed when the attribute type is `image`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `image`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
   */
  reference_entity_code?: string;
  /**
   * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "image"
    | "number"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
}>;

export type ReferenceEntityAttributeOption = {
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type ReferenceEntityAttributeOptionList = Array<{
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
}>;

export type ReferenceEntityItemList = {
  _links?: {
    image_download?: {
      /**
       * URI to download the binaries of the reference entity image file
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
};

export type ReferenceEntityList = {
  _links?: {
    image_download?: {
      /**
       * URI to download the binaries of the reference entity image file
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Reference entity code
   */
  code: string;
  /**
   * Code of the reference entity image
   */
  image?: string;
  /**
   * Reference entity labels for each locale
   */
  labels?: {
    /**
     * Reference entity label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type ReferenceEntityRecord = {
  /**
   * Code of the record
   */
  code: string;
  /**
   * Date of creation.
   */
  created?: string;
  /**
   * Date of the last update.
   */
  updated?: string;
  /**
   * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Channel code of the reference entity record value
       */
      channel?: string;
      /**
       * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Locale code of the reference entity record value
       */
      locale?: string;
    }>;
  };
};

export type ReferenceEntityRecordItemList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
};

export type ReferenceEntityRecordList = {
  _links?: {
    self?: {
      /**
       * URI of the resource
       */
      href?: string;
    };
  };
} & {
  /**
   * Code of the record
   */
  code: string;
  /**
   * Date of creation.
   */
  created?: string;
  /**
   * Date of the last update.
   */
  updated?: string;
  /**
   * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Channel code of the reference entity record value
       */
      channel?: string;
      /**
       * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Locale code of the reference entity record value
       */
      locale?: string;
    }>;
  };
};

export type SearchAfterPagination = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type PostTokenData = {
  body?: {
    /**
     * Always equal to "password"
     */
    grant_type: string;
    /**
     * Your PIM password
     */
    password: string;
    /**
     * Your PIM username
     */
    username: string;
  };
  headers: {
    /**
     * Equal to 'Basic xx', where 'xx' is the base 64 encoding of the client id and secret. Find out how to generate them in the <a href="/documentation/authentication.html#client-idsecret-generation">Client ID/secret generation</a> section.
     */
    Authorization: string;
    /**
     * Equal to 'application/json' or 'application/x-www-form-urlencoded', no other value allowed
     */
    "Content-type": string;
  };
};

export type PostTokenResponse = {
  /**
   * Authentication token that should be given in every authenticated request to the API
   */
  access_token?: string;
  /**
   * Validity of the token given in seconds, 3600s = 1h by default
   */
  expires_in?: number;
  /**
   * Use this token when your access token has expired. See <a href="/documentation/authentication.html#refresh-an-expired-token">Refresh an expired token</a> section for more details.
   */
  refresh_token?: string;
  /**
   * Unused, always equal to "null"
   */
  scope?: string;
  /**
   * Token type, always equal to "bearer"
   */
  token_type?: string;
};

export type PostTokenError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetEndpointsResponse = {
  /**
   * Endpoint to get the authentication token
   */
  authentication?: unknown;
  /**
   * Host name
   */
  host?: string;
  /**
   * All the availables endpoints
   */
  routes?: unknown;
};

export type GetEndpointsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetCategoriesData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetAssetCategoriesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetAssetCategoriesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetCategoriesData = {
  body?: {
    /**
     * PAM asset category code
     */
    code: string;
    /**
     * PAM asset category labels for each locale
     */
    labels?: {
      /**
       * PAM asset category label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * PAM ssset category code of the parent's asset category
     */
    parent?: string;
  };
};

export type PatchAssetCategoriesResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchAssetCategoriesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostAssetCategoriesData = {
  body?: {
    /**
     * PAM asset category code
     */
    code: string;
    /**
     * PAM asset category labels for each locale
     */
    labels?: {
      /**
       * PAM asset category label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * PAM ssset category code of the parent's asset category
     */
    parent?: string;
  };
};

export type PostAssetCategoriesResponse = string;

export type PostAssetCategoriesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetCategoriesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetCategoriesCodeResponse = {
  /**
   * PAM asset category code
   */
  code: string;
  /**
   * PAM asset category labels for each locale
   */
  labels?: {
    /**
     * PAM asset category label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * PAM ssset category code of the parent's asset category
   */
  parent?: string;
};

export type GetAssetCategoriesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetCategoriesCodeData = {
  body: {
    /**
     * PAM asset category code
     */
    code: string;
    /**
     * PAM asset category labels for each locale
     */
    labels?: {
      /**
       * PAM asset category label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * PAM ssset category code of the parent's asset category
     */
    parent?: string;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAssetCategoriesCodeResponse = string;

export type PatchAssetCategoriesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetFamiliesData = {
  query?: {
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
  };
};

export type GetAssetFamiliesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type GetAssetFamiliesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetsData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
  };
  query?: {
    /**
     * Filter asset values to return scopable asset attributes for the given channel as well as the non localizable/non scopable asset attributes, for more details see the <a href="/documentation/filter.html#asset-values-by-channel">Filter asset values by channel</a> section
     */
    channel?: string;
    /**
     * Filter asset values to return localizable attributes for the given locales as well as the non localizable/non scopable asset attributes, for more details see the <a href="/documentation/filter.html#asset-values-by-locale">Filter asset values by locale</a> section
     */
    locales?: string;
    /**
     * Filter assets, for more details see the <a href="/documentation/filter.html#filter-assets">Asset filters</a> section
     */
    search?: string;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
  };
};

export type GetAssetsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type GetAssetsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetsData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
  };
};

export type PatchAssetsResponse = Array<{
  /**
   * Resource code
   */
  code?: string;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
}>;

export type PatchAssetsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type DeleteAssetsCodeData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type DeleteAssetsCodeResponse = void;

export type DeleteAssetsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetsCodeData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetsCodeResponse = {
  /**
   * Code of the asset
   */
  code: string;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Channel code of the asset attribute value
       */
      channel?: string;
      /**
       * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Locale code of the asset attribute value
       */
      locale?: string;
    }>;
  };
};

export type GetAssetsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetCodeData = {
  body: {
    /**
     * Code of the asset
     */
    code: string;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Asset attributes values, see the <a href='/concepts/asset-manager.html#focus-on-the-asset-values'>Focus on the asset values</a> section for more details.
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Channel code of the asset attribute value
         */
        channel?: string;
        /**
         * Asset attribute value. See <a href='/concepts/asset-manager.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Locale code of the asset attribute value
         */
        locale?: string;
      }>;
    };
  };
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAssetCodeResponse = string;

export type PatchAssetCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetFamiliesCodeAttributesData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
  };
};

export type GetAssetFamiliesCodeAttributesResponse = Array<{
  /**
   * Extensions allowed when the attribute type is `media_file`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
   */
  is_read_only?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `media_file`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
   */
  media_type: "image" | "pdf" | "youtube" | "vimeo" | "other";
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
   */
  prefix?: string;
  /**
   * Suffix of the `media_link` attribute type. The common url suffix for the media
   */
  suffix?: string;
  /**
   * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "media_link"
    | "number"
    | "media_file"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links"
    | "boolean";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
}>;

export type GetAssetFamiliesCodeAttributesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetFamilyAttributesAttributeCodeOptionsData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the attribute
     */
    attribute_code: string;
  };
};

export type GetAssetFamilyAttributesAttributeCodeOptionsResponse = Array<{
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
}>;

export type GetAssetFamilyAttributesAttributeCodeOptionsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetAttributesAttributeCodeOptionsCodeData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetAttributesAttributeCodeOptionsCodeResponse = {
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type GetAssetAttributesAttributeCodeOptionsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetAttributesAttributeCodeOptionsCodeData = {
  body: {
    /**
     * Attribute's option code
     */
    code: string;
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAssetAttributesAttributeCodeOptionsCodeResponse = string;

export type PatchAssetAttributesAttributeCodeOptionsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetFamilyAttributesCodeData = {
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetFamilyAttributesCodeResponse = {
  /**
   * Extensions allowed when the attribute type is `media_file`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
   */
  is_read_only?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `media_file`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
   */
  media_type: "image" | "pdf" | "youtube" | "vimeo" | "other";
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
   */
  prefix?: string;
  /**
   * Suffix of the `media_link` attribute type. The common url suffix for the media
   */
  suffix?: string;
  /**
   * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "media_link"
    | "number"
    | "media_file"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links"
    | "boolean";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
};

export type GetAssetFamilyAttributesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetFamilyAttributesCodeData = {
  body: {
    /**
     * Extensions allowed when the attribute type is `media_file`
     */
    allowed_extensions?: Array<string>;
    /**
     * Attribute code
     */
    code: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     */
    decimals_allowed?: boolean;
    /**
     * Whether the attribute should be in read only mode only in the UI, but you can still update it with the API
     */
    is_read_only?: boolean;
    /**
     * Whether the attribute should be part of the record's completeness calculation
     */
    is_required_for_completeness?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     */
    is_rich_text_editor?: boolean;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     */
    is_textarea?: boolean;
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     */
    max_characters?: number;
    /**
     * Max file size in MB when the attribute type is `media_file`
     */
    max_file_size?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     */
    max_value?: string;
    /**
     * For the `media_link` attribute type, it is the type of the media behind the url, to allow its preview in the PIM. For the `media_file` attribute type, it is the type of the file.
     */
    media_type: "image" | "pdf" | "youtube" | "vimeo" | "other";
    /**
     * Minimum value allowed when the attribute type is `number`
     */
    min_value?: string;
    /**
     * Prefix of the `media_link` attribute type. The common url root that prefixes the link to the media
     */
    prefix?: string;
    /**
     * Suffix of the `media_link` attribute type. The common url suffix for the media
     */
    suffix?: string;
    /**
     * Attribute type. See <a href='/concepts/asset-manager.html#asset-attribute'>type</a> section for more details.
     */
    type:
      | "text"
      | "media_link"
      | "number"
      | "media_file"
      | "single_option"
      | "multiple_options"
      | "reference_entity_single_link"
      | "reference_entity_multiple_links"
      | "boolean";
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     */
    validation_regexp?: string;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     */
    validation_rule?: "email" | "url" | "regexp" | "none";
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     */
    value_per_channel?: boolean;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     */
    value_per_locale?: boolean;
  };
  path: {
    /**
     * Code of the asset family
     */
    asset_family_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAssetFamilyAttributesCodeResponse = string;

export type PatchAssetFamilyAttributesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetFamilyCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetFamilyCodeResponse = {
  /**
   * Attribute code that is used as the main media of the asset family.
   */
  attribute_as_main_media?: string;
  /**
   * Asset family code
   */
  code: string;
  /**
   * Asset family labels for each locale
   */
  labels?: {
    /**
     * Asset family label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
   */
  naming_convention?: {
    /**
     * Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.
     */
    abort_asset_creation_on_error?: boolean;
    /**
     * The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.
     */
    pattern?: string;
    /**
     * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
     */
    source?: unknown;
  };
  /**
   * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.
   */
  product_link_rules?: Array<{
    /**
     * The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.
     */
    assign_assets_to?: Array<{
      attribute: string;
      channel?: string;
      locale?: string;
      mode: string;
    }>;
    /**
     * The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.
     */
    product_selections?: Array<{
      channel?: string;
      field: string;
      locale?: string;
      operator: string;
      value: string;
    }>;
  }>;
  /**
   * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.
   */
  transformations?: Array<{
    /**
     * The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
     */
    filename_prefix?: string;
    /**
     * The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
     */
    filename_suffix?: string;
    /**
     * The name of the transformation
     */
    label: string;
    /**
     * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
     */
    operations: {
      parameters?: {
        colorspace?: string;
        height?: number;
        quality?: number;
        ratio?: number;
        "resolution-unit"?: string;
        "resolution-x"?: number;
        "resolution-y"?: number;
        width?: number;
      };
      type?: string;
    };
    /**
     * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
     */
    source: {
      attribute: string;
      channel: string;
      locale: string;
    };
    /**
     * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
     */
    target: {
      attribute: string;
      channel: string;
      locale: string;
    };
  }>;
};

export type GetAssetFamilyCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetFamilyCodeData = {
  body: {
    /**
     * Attribute code that is used as the main media of the asset family.
     */
    attribute_as_main_media?: string;
    /**
     * Asset family code
     */
    code: string;
    /**
     * Asset family labels for each locale
     */
    labels?: {
      /**
       * Asset family label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * The naming convention ran over the asset code or the main media filename upon each asset creation, in order to automatically set several values in asset attributes. To learn more and see the format of this property, take a look at <a href='/concepts/asset-manager.html#focus-on-the-naming-convention'>here</a>.
     */
    naming_convention?: {
      /**
       * Whether the asset should be created if the naming convention failed to apply. More details <a href='/concepts/asset-manager.html#abort-asset-creation-on-error'>here</a>.
       */
      abort_asset_creation_on_error?: boolean;
      /**
       * The regular expression that should be applied on the source. More details <a href='/concepts/asset-manager.html#pattern'>here</a>.
       */
      pattern?: string;
      /**
       * The string on which the naming convention should be applied. More details <a href='/concepts/asset-manager.html#source'>here</a>.
       */
      source?: unknown;
    };
    /**
     * The rules that will be run after the asset creation, in order to automatically link the assets of this family to a set of products. To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-product-link-rule'>here</a>.
     */
    product_link_rules?: Array<{
      /**
       * The product value in which your assets will be assigned. More details <a href='/concepts/asset-manager.html#product-value-assignment'>here</a>.
       */
      assign_assets_to?: Array<{
        attribute: string;
        channel?: string;
        locale?: string;
        mode: string;
      }>;
      /**
       * The product selection to which the assets of the asset family to be automatically linked. More details <a href='/concepts/asset-manager.html#product-selection'>here</a>.
       */
      product_selections?: Array<{
        channel?: string;
        field: string;
        locale?: string;
        operator: string;
        value: string;
      }>;
    }>;
    /**
     * The transformations to perform on source files in order to generate new files into your asset attributes (only available since v4.0). To understand the format of this property, see <a href='/concepts/asset-manager.html#focus-on-the-transformations'>here</a>.
     */
    transformations?: Array<{
      /**
       * The prefix that will be prepended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
       */
      filename_prefix?: string;
      /**
       * The suffix that will be appended to the source filename to generate the target filename. More details <a href='/concepts/asset-manager.html#target-filename'>here</a>.
       */
      filename_suffix?: string;
      /**
       * The name of the transformation
       */
      label: string;
      /**
       * The transformations that should be applied to your source file to generate the target file. More details <a href='/concepts/asset-manager.html#transformation-operations'>here</a>.
       */
      operations: {
        parameters?: {
          colorspace?: string;
          height?: number;
          quality?: number;
          ratio?: number;
          "resolution-unit"?: string;
          "resolution-x"?: number;
          "resolution-y"?: number;
          width?: number;
        };
        type?: string;
      };
      /**
       * The attribute value in which is stored the media file you want to use as the source file for your transformation. More details <a href='/concepts/asset-manager.html#source-file'>here</a>.
       */
      source: {
        attribute: string;
        channel: string;
        locale: string;
      };
      /**
       * The attribute value in which the PIM will generate the new transformed file, aka the target file. More details <a href='/concepts/asset-manager.html#target-file'>here</a>.
       */
      target: {
        attribute: string;
        channel: string;
        locale: string;
      };
    }>;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAssetFamilyCodeResponse = string;

export type PatchAssetFamilyCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostAssetMediaFilesData = {
  headers: {
    /**
     * Equal to 'multipart/form-data', no other value allowed
     */
    "Content-type": string;
  };
};

export type PostAssetMediaFilesResponse = string;

export type PostAssetMediaFilesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetMediaFilesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetMediaFilesCodeResponse = unknown;

export type GetAssetMediaFilesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetTagsData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetAssetTagsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetAssetTagsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAssetTagsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAssetTagsCodeResponse = {
  /**
   * PAM asset tag code
   */
  code: string;
};

export type GetAssetTagsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAssetTagsCodeData = {
  body: {
    /**
     * PAM asset tag code
     */
    code: string;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAssetTagsCodeResponse = string;

export type PatchAssetTagsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetPamAssetsData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    pagination_type?: "page" | "search_after";
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetPamAssetsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetPamAssetsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchPamAssetsData = {
  body?: {
    /**
     * Codes of the PAM asset categories in which the asset is classified
     */
    categories?: Array<string>;
    /**
     * PAM asset code
     */
    code: string;
    /**
     * Description of the PAM asset
     */
    description?: string;
    /**
     * Date on which the PAM asset expire
     */
    end_of_use?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     */
    localizable?: boolean;
    /**
     * Reference files of the PAM asset
     */
    reference_files?: Array<{
      /**
       * Links to get and download the reference file
       */
      _link?: {
        download?: {
          /**
           * URI to download the reference file
           */
          href?: string;
        };
        self?: {
          /**
           * URI of the reference file entity
           */
          href?: string;
        };
      };
      /**
       * Code of the reference file
       */
      code?: string;
      /**
       * Locale code of the reference file
       */
      locale?: string;
    }>;
    /**
     * Tags of the PAM asset
     */
    tags?: Array<string>;
    /**
     * Variations of the PAM asset
     */
    variation_files?: Array<{
      /**
       * Links to get and download the variation file
       */
      _link?: {
        download?: {
          /**
           * URI to download the variation file
           */
          href?: string;
        };
        self?: {
          /**
           * URI of the variation entity
           */
          href?: string;
        };
      };
      /**
       * Code of the variation
       */
      code?: string;
      /**
       * Locale code of the variation
       */
      locale?: string;
      /**
       * Channel code of the variation
       */
      scope?: string;
    }>;
  };
};

export type PatchPamAssetsResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchPamAssetsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostPamAssetsData = {
  body?: {
    /**
     * Codes of the PAM asset categories in which the asset is classified
     */
    categories?: Array<string>;
    /**
     * PAM asset code
     */
    code: string;
    /**
     * Description of the PAM asset
     */
    description?: string;
    /**
     * Date on which the PAM asset expire
     */
    end_of_use?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     */
    localizable?: boolean;
    /**
     * Reference files of the PAM asset
     */
    reference_files?: Array<{
      /**
       * Links to get and download the reference file
       */
      _link?: {
        download?: {
          /**
           * URI to download the reference file
           */
          href?: string;
        };
        self?: {
          /**
           * URI of the reference file entity
           */
          href?: string;
        };
      };
      /**
       * Code of the reference file
       */
      code?: string;
      /**
       * Locale code of the reference file
       */
      locale?: string;
    }>;
    /**
     * Tags of the PAM asset
     */
    tags?: Array<string>;
    /**
     * Variations of the PAM asset
     */
    variation_files?: Array<{
      /**
       * Links to get and download the variation file
       */
      _link?: {
        download?: {
          /**
           * URI to download the variation file
           */
          href?: string;
        };
        self?: {
          /**
           * URI of the variation entity
           */
          href?: string;
        };
      };
      /**
       * Code of the variation
       */
      code?: string;
      /**
       * Locale code of the variation
       */
      locale?: string;
      /**
       * Channel code of the variation
       */
      scope?: string;
    }>;
  };
};

export type PostPamAssetsResponse = string;

export type PostPamAssetsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceFilesLocaleCodeData = {
  path: {
    /**
     * Code of the asset
     */
    asset_code: string;
    /**
     * Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable
     */
    locale_code: string;
  };
};

export type GetReferenceFilesLocaleCodeResponse = {
  /**
   * Links to get and download the reference file
   */
  _link?: {
    download?: {
      /**
       * URI to download the reference file
       */
      href?: string;
    };
  };
  /**
   * Code of the PAM asset reference file
   */
  code?: string;
  /**
   * Locale of the PAM asset reference file, equal to `null` if the asset is not localizable
   */
  locale?: string;
};

export type GetReferenceFilesLocaleCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostReferenceFilesLocaleCodeData = {
  headers: {
    /**
     * Equal to 'multipart/form-data', no other value allowed
     */
    "Content-type": string;
  };
  path: {
    /**
     * Code of the asset
     */
    asset_code: string;
    /**
     * Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable
     */
    locale_code: string;
  };
};

export type PostReferenceFilesLocaleCodeResponse = {
  errors?: Array<{
    /**
     * Channel for which the variation file generation failed
     */
    channel?: string;
    /**
     * Locale for which the variation file generation failed
     */
    locale?: string;
    /**
     * Message explaining why the variation file generation failed
     */
    message?: string;
  }>;
  /**
   * Message explaining the warning
   */
  message?: string;
};

export type PostReferenceFilesLocaleCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceFilesChannelCodeLocaleCodeDownloadData = {
  path: {
    /**
     * Code of the asset
     */
    asset_code: string;
    /**
     * Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable
     */
    locale_code: string;
  };
};

export type GetReferenceFilesChannelCodeLocaleCodeDownloadResponse = unknown;

export type GetReferenceFilesChannelCodeLocaleCodeDownloadError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCodeData = {
  path: {
    /**
     * Code of the asset
     */
    asset_code: string;
    /**
     * Code of the channel
     */
    channel_code: string;
    /**
     * Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable
     */
    locale_code: string;
  };
};

export type GetVariationFilesChannelCodeLocaleCodeResponse = {
  /**
   * Links to get and download the reference file
   */
  _link?: {
    download?: {
      /**
       * URI to download the variation file
       */
      href?: string;
    };
  };
  /**
   * Code of the PAM asset variation file
   */
  code?: string;
  /**
   * Locale of the PAM asset variation file, equal to `null` if the asset is not localizable
   */
  locale?: string;
  /**
   * Channel of the PAM asset variation file
   */
  scope?: string;
};

export type GetVariationFilesChannelCodeLocaleCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostVariationFilesChannelCodeLocaleCodeData = {
  headers: {
    /**
     * Equal to 'multipart/form-data', no other value allowed
     */
    "Content-type": string;
  };
  path: {
    /**
     * Code of the asset
     */
    asset_code: string;
    /**
     * Code of the channel
     */
    channel_code: string;
    /**
     * Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable
     */
    locale_code: string;
  };
};

export type PostVariationFilesChannelCodeLocaleCodeResponse = string;

export type PostVariationFilesChannelCodeLocaleCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetVariationFilesChannelCodeLocaleCodeDownloadData = {
  path: {
    /**
     * Code of the asset
     */
    asset_code: string;
    /**
     * Code of the channel
     */
    channel_code: string;
    /**
     * Code of the locale if the asset is localizable or equal to `no-locale` if the asset is not localizable
     */
    locale_code: string;
  };
};

export type GetVariationFilesChannelCodeLocaleCodeDownloadResponse = unknown;

export type GetVariationFilesChannelCodeLocaleCodeDownloadError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetPamAssetsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetPamAssetsCodeResponse = {
  /**
   * Codes of the PAM asset categories in which the asset is classified
   */
  categories?: Array<string>;
  /**
   * PAM asset code
   */
  code: string;
  /**
   * Description of the PAM asset
   */
  description?: string;
  /**
   * Date on which the PAM asset expire
   */
  end_of_use?: string;
  /**
   * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
   */
  localizable?: boolean;
  /**
   * Reference files of the PAM asset
   */
  reference_files?: Array<{
    /**
     * Links to get and download the reference file
     */
    _link?: {
      download?: {
        /**
         * URI to download the reference file
         */
        href?: string;
      };
      self?: {
        /**
         * URI of the reference file entity
         */
        href?: string;
      };
    };
    /**
     * Code of the reference file
     */
    code?: string;
    /**
     * Locale code of the reference file
     */
    locale?: string;
  }>;
  /**
   * Tags of the PAM asset
   */
  tags?: Array<string>;
  /**
   * Variations of the PAM asset
   */
  variation_files?: Array<{
    /**
     * Links to get and download the variation file
     */
    _link?: {
      download?: {
        /**
         * URI to download the variation file
         */
        href?: string;
      };
      self?: {
        /**
         * URI of the variation entity
         */
        href?: string;
      };
    };
    /**
     * Code of the variation
     */
    code?: string;
    /**
     * Locale code of the variation
     */
    locale?: string;
    /**
     * Channel code of the variation
     */
    scope?: string;
  }>;
};

export type GetPamAssetsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchPamAssetsCodeData = {
  body: {
    /**
     * Codes of the PAM asset categories in which the asset is classified
     */
    categories?: Array<string>;
    /**
     * PAM asset code
     */
    code: string;
    /**
     * Description of the PAM asset
     */
    description?: string;
    /**
     * Date on which the PAM asset expire
     */
    end_of_use?: string;
    /**
     * Whether the asset is localized or not, meaning if you want to have different reference files for each of your locale
     */
    localizable?: boolean;
    /**
     * Reference files of the PAM asset
     */
    reference_files?: Array<{
      /**
       * Links to get and download the reference file
       */
      _link?: {
        download?: {
          /**
           * URI to download the reference file
           */
          href?: string;
        };
        self?: {
          /**
           * URI of the reference file entity
           */
          href?: string;
        };
      };
      /**
       * Code of the reference file
       */
      code?: string;
      /**
       * Locale code of the reference file
       */
      locale?: string;
    }>;
    /**
     * Tags of the PAM asset
     */
    tags?: Array<string>;
    /**
     * Variations of the PAM asset
     */
    variation_files?: Array<{
      /**
       * Links to get and download the variation file
       */
      _link?: {
        download?: {
          /**
           * URI to download the variation file
           */
          href?: string;
        };
        self?: {
          /**
           * URI of the variation entity
           */
          href?: string;
        };
      };
      /**
       * Code of the variation
       */
      code?: string;
      /**
       * Locale code of the variation
       */
      locale?: string;
      /**
       * Channel code of the variation
       */
      scope?: string;
    }>;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchPamAssetsCodeResponse = string;

export type PatchPamAssetsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AssociationTypesGetListData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type AssociationTypesGetListResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type AssociationTypesGetListError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type SeveralAssociationTypesPatchData = {
  body?: {
    /**
     * Association type code
     */
    code: string;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     */
    is_quantified?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     */
    is_two_way?: boolean;
    /**
     * Association type labels for each locale
     */
    labels?: {
      /**
       * Association type label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
};

export type SeveralAssociationTypesPatchResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type SeveralAssociationTypesPatchError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AssociationTypesPostData = {
  body?: {
    /**
     * Association type code
     */
    code: string;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     */
    is_quantified?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     */
    is_two_way?: boolean;
    /**
     * Association type labels for each locale
     */
    labels?: {
      /**
       * Association type label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
};

export type AssociationTypesPostResponse = string;

export type AssociationTypesPostError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AssociationTypesGetData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type AssociationTypesGetResponse = {
  /**
   * Association type code
   */
  code: string;
  /**
   * When true, the association is a quantified association (Only available in the PIM Serenity version.)
   */
  is_quantified?: boolean;
  /**
   * When true, the association is a two-way association (Only available in the PIM Serenity version.)
   */
  is_two_way?: boolean;
  /**
   * Association type labels for each locale
   */
  labels?: {
    /**
     * Association type label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type AssociationTypesGetError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AssociationTypesPatchData = {
  body: {
    /**
     * Association type code
     */
    code: string;
    /**
     * When true, the association is a quantified association (Only available in the PIM Serenity version.)
     */
    is_quantified?: boolean;
    /**
     * When true, the association is a two-way association (Only available in the PIM Serenity version.)
     */
    is_two_way?: boolean;
    /**
     * Association type labels for each locale
     */
    labels?: {
      /**
       * Association type label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type AssociationTypesPatchResponse = string;

export type AssociationTypesPatchError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AttributeGroupsGetListData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Filter attribute groups, for more details see the <a href="/documentation/filter.html#filter-attribute-groups">Filters</a> section.
     */
    search?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type AttributeGroupsGetListResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type AttributeGroupsGetListError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type SeveralAttributeGroupsPatchData = {
  body?: {
    /**
     * Attribute codes that compose the attribute group
     */
    attributes?: Array<string>;
    /**
     * Attribute group code
     */
    code: string;
    /**
     * Attribute group labels for each locale
     */
    labels?: {
      /**
       * Attribute group label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attribute group order among other attribute groups
     */
    sort_order?: number;
  };
};

export type SeveralAttributeGroupsPatchResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type SeveralAttributeGroupsPatchError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AttributeGroupsPostData = {
  body?: {
    /**
     * Attribute codes that compose the attribute group
     */
    attributes?: Array<string>;
    /**
     * Attribute group code
     */
    code: string;
    /**
     * Attribute group labels for each locale
     */
    labels?: {
      /**
       * Attribute group label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attribute group order among other attribute groups
     */
    sort_order?: number;
  };
};

export type AttributeGroupsPostResponse = string;

export type AttributeGroupsPostError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AttributeGroupsGetData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type AttributeGroupsGetResponse = {
  /**
   * Attribute codes that compose the attribute group
   */
  attributes?: Array<string>;
  /**
   * Attribute group code
   */
  code: string;
  /**
   * Attribute group labels for each locale
   */
  labels?: {
    /**
     * Attribute group label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attribute group order among other attribute groups
   */
  sort_order?: number;
};

export type AttributeGroupsGetError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type AttributeGroupsPatchData = {
  body: {
    /**
     * Attribute codes that compose the attribute group
     */
    attributes?: Array<string>;
    /**
     * Attribute group code
     */
    code: string;
    /**
     * Attribute group labels for each locale
     */
    labels?: {
      /**
       * Attribute group label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attribute group order among other attribute groups
     */
    sort_order?: number;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type AttributeGroupsPatchResponse = string;

export type AttributeGroupsPatchError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAttributesData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Filter attributes, for more details see the <a href="/documentation/filter.html#filter-attributes">Filters</a> section.
     */
    search?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
    /**
     * Return the options of 'select' column types (of a table attribute) in the response. (Only available since the 7.0 version)
     */
    with_table_select_options?: boolean;
  };
};

export type GetAttributesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetAttributesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAttributesData = {
  body?: {
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     */
    allowed_extensions?: Array<string>;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     */
    available_locales?: Array<string>;
    /**
     * Attribute code
     */
    code: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     */
    date_max?: Date;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     */
    date_min?: Date;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    decimals_allowed?: boolean;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     */
    default_metric_unit?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     */
    default_value?: boolean;
    /**
     * Attribute group
     */
    group: string;
    /**
     * Group labels for each locale
     */
    group_labels?: {
      /**
       * Group label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     */
    localizable?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     */
    max_characters?: number;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     */
    max_file_size?: string;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     */
    metric_family?: string;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     */
    negative_allowed?: boolean;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    number_max?: string;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    number_min?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     */
    reference_data_name?: string;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     */
    scopable?: boolean;
    /**
     * Order of the attribute in its group
     */
    sort_order?: number;
    /**
     * Configuration of the Table attribute (columns)
     */
    table_configuration?: Array<{
      /**
       * Column code
       */
      code: string;
      /**
       * Column data type
       */
      data_type: "select" | "text" | "number" | "boolean";
      /**
       * Defines if the column should be entirely filled for the attribute to be considered complete
       */
      is_required_for_completeness?: boolean;
      /**
       * Column labels for each locale
       */
      labels?: {
        /**
         * Column label for the locale `localeCode`
         */
        localeCode?: string;
      };
      /**
       * User defined validation constraints on the cell content
       */
      validations?: {
        /**
         * whether the value of a numeric cell can hold a decimal part
         */
        decimals_allowed?: boolean;
        /**
         * maximum value of a numeric cell
         */
        max?: number;
        /**
         * maximum length of a text cell
         */
        max_length?: number;
        /**
         * minimum value of a numeric cell
         */
        min?: number;
      };
    }>;
    /**
     * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
     */
    type:
      | "pim_catalog_identifier"
      | "pim_catalog_metric"
      | "pim_catalog_number"
      | "pim_catalog_reference_data_multi_select"
      | "pim_catalog_reference_data_simple_select"
      | "pim_catalog_simpleselect"
      | "pim_catalog_multiselect"
      | "pim_catalog_date"
      | "pim_catalog_textarea"
      | "pim_catalog_text"
      | "pim_catalog_file"
      | "pim_catalog_image"
      | "pim_catalog_price_collection"
      | "pim_catalog_boolean"
      | "akeneo_reference_entity"
      | "akeneo_reference_entity_collection"
      | "pim_catalog_asset_collection";
    /**
     * Whether two values for the attribute cannot be the same
     */
    unique?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     */
    useable_as_grid_filter?: boolean;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     */
    validation_regexp?: string;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     */
    validation_rule?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     */
    wysiwyg_enabled?: boolean;
  };
};

export type PatchAttributesResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchAttributesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostAttributesData = {
  body?: {
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     */
    allowed_extensions?: Array<string>;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     */
    available_locales?: Array<string>;
    /**
     * Attribute code
     */
    code: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     */
    date_max?: Date;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     */
    date_min?: Date;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    decimals_allowed?: boolean;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     */
    default_metric_unit?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     */
    default_value?: boolean;
    /**
     * Attribute group
     */
    group: string;
    /**
     * Group labels for each locale
     */
    group_labels?: {
      /**
       * Group label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     */
    localizable?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     */
    max_characters?: number;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     */
    max_file_size?: string;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     */
    metric_family?: string;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     */
    negative_allowed?: boolean;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    number_max?: string;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    number_min?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     */
    reference_data_name?: string;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     */
    scopable?: boolean;
    /**
     * Order of the attribute in its group
     */
    sort_order?: number;
    /**
     * Configuration of the Table attribute (columns)
     */
    table_configuration?: Array<{
      /**
       * Column code
       */
      code: string;
      /**
       * Column data type
       */
      data_type: "select" | "text" | "number" | "boolean";
      /**
       * Defines if the column should be entirely filled for the attribute to be considered complete
       */
      is_required_for_completeness?: boolean;
      /**
       * Column labels for each locale
       */
      labels?: {
        /**
         * Column label for the locale `localeCode`
         */
        localeCode?: string;
      };
      /**
       * User defined validation constraints on the cell content
       */
      validations?: {
        /**
         * whether the value of a numeric cell can hold a decimal part
         */
        decimals_allowed?: boolean;
        /**
         * maximum value of a numeric cell
         */
        max?: number;
        /**
         * maximum length of a text cell
         */
        max_length?: number;
        /**
         * minimum value of a numeric cell
         */
        min?: number;
      };
    }>;
    /**
     * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
     */
    type:
      | "pim_catalog_identifier"
      | "pim_catalog_metric"
      | "pim_catalog_number"
      | "pim_catalog_reference_data_multi_select"
      | "pim_catalog_reference_data_simple_select"
      | "pim_catalog_simpleselect"
      | "pim_catalog_multiselect"
      | "pim_catalog_date"
      | "pim_catalog_textarea"
      | "pim_catalog_text"
      | "pim_catalog_file"
      | "pim_catalog_image"
      | "pim_catalog_price_collection"
      | "pim_catalog_boolean"
      | "akeneo_reference_entity"
      | "akeneo_reference_entity_collection"
      | "pim_catalog_asset_collection";
    /**
     * Whether two values for the attribute cannot be the same
     */
    unique?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     */
    useable_as_grid_filter?: boolean;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     */
    validation_regexp?: string;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     */
    validation_rule?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     */
    wysiwyg_enabled?: boolean;
  };
};

export type PostAttributesResponse = string;

export type PostAttributesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAttributesAttributeCodeOptionsData = {
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
  };
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetAttributesAttributeCodeOptionsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetAttributesAttributeCodeOptionsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAttributesAttributeCodeOptionsData = {
  body?: {
    /**
     * Code of attribute related to the attribute option
     */
    attribute?: string;
    /**
     * Code of option
     */
    code: string;
    /**
     * Attribute option labels for each locale
     */
    labels?: {
      /**
       * Attribute option label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Order of attribute option
     */
    sort_order?: number;
  };
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
  };
};

export type PatchAttributesAttributeCodeOptionsResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchAttributesAttributeCodeOptionsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostAttributesAttributeCodeOptionsData = {
  body?: {
    /**
     * Code of attribute related to the attribute option
     */
    attribute?: string;
    /**
     * Code of option
     */
    code: string;
    /**
     * Attribute option labels for each locale
     */
    labels?: {
      /**
       * Attribute option label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Order of attribute option
     */
    sort_order?: number;
  };
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
  };
};

export type PostAttributesAttributeCodeOptionsResponse = string;

export type PostAttributesAttributeCodeOptionsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAttributesAttributeCodeOptionsCodeData = {
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetAttributesAttributeCodeOptionsCodeResponse = {
  /**
   * Code of attribute related to the attribute option
   */
  attribute?: string;
  /**
   * Code of option
   */
  code: string;
  /**
   * Attribute option labels for each locale
   */
  labels?: {
    /**
     * Attribute option label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Order of attribute option
   */
  sort_order?: number;
};

export type GetAttributesAttributeCodeOptionsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAttributesAttributeCodeOptionsCodeData = {
  body: {
    /**
     * Code of attribute related to the attribute option
     */
    attribute?: string;
    /**
     * Code of option
     */
    code: string;
    /**
     * Attribute option labels for each locale
     */
    labels?: {
      /**
       * Attribute option label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Order of attribute option
     */
    sort_order?: number;
  };
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAttributesAttributeCodeOptionsCodeResponse = string;

export type PatchAttributesAttributeCodeOptionsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAttributesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
  query?: {
    /**
     * Return the options of 'select' column types (of a table attribute) in the response. (Only available since the 7.0 version)
     */
    with_table_select_options?: boolean;
  };
};

export type GetAttributesCodeResponse = {
  /**
   * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
   */
  allowed_extensions?: Array<string>;
  /**
   * To make the attribute locale specfic, specify here for which locales it is specific
   */
  available_locales?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Maximum date allowed when the attribute type is `pim_catalog_date`
   */
  date_max?: Date;
  /**
   * Minimum date allowed when the attribute type is `pim_catalog_date`
   */
  date_min?: Date;
  /**
   * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  decimals_allowed?: boolean;
  /**
   * Default metric unit when the attribute type is `pim_catalog_metric`
   */
  default_metric_unit?: string;
  /**
   * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
   */
  default_value?: boolean;
  /**
   * Attribute group
   */
  group: string;
  /**
   * Group labels for each locale
   */
  group_labels?: {
    /**
     * Group label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  localizable?: boolean;
  /**
   * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
   */
  max_file_size?: string;
  /**
   * Metric family when the attribute type is `pim_catalog_metric`
   */
  metric_family?: string;
  /**
   * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
   */
  negative_allowed?: boolean;
  /**
   * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  number_max?: string;
  /**
   * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
   */
  number_min?: string;
  /**
   * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
   */
  reference_data_name?: string;
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  scopable?: boolean;
  /**
   * Order of the attribute in its group
   */
  sort_order?: number;
  /**
   * Configuration of the Table attribute (columns)
   */
  table_configuration?: Array<{
    /**
     * Column code
     */
    code: string;
    /**
     * Column data type
     */
    data_type: "select" | "text" | "number" | "boolean";
    /**
     * Defines if the column should be entirely filled for the attribute to be considered complete
     */
    is_required_for_completeness?: boolean;
    /**
     * Column labels for each locale
     */
    labels?: {
      /**
       * Column label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * User defined validation constraints on the cell content
     */
    validations?: {
      /**
       * whether the value of a numeric cell can hold a decimal part
       */
      decimals_allowed?: boolean;
      /**
       * maximum value of a numeric cell
       */
      max?: number;
      /**
       * maximum length of a text cell
       */
      max_length?: number;
      /**
       * minimum value of a numeric cell
       */
      min?: number;
    };
  }>;
  /**
   * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
   */
  type:
    | "pim_catalog_identifier"
    | "pim_catalog_metric"
    | "pim_catalog_number"
    | "pim_catalog_reference_data_multi_select"
    | "pim_catalog_reference_data_simple_select"
    | "pim_catalog_simpleselect"
    | "pim_catalog_multiselect"
    | "pim_catalog_date"
    | "pim_catalog_textarea"
    | "pim_catalog_text"
    | "pim_catalog_file"
    | "pim_catalog_image"
    | "pim_catalog_price_collection"
    | "pim_catalog_boolean"
    | "akeneo_reference_entity"
    | "akeneo_reference_entity_collection"
    | "pim_catalog_asset_collection";
  /**
   * Whether two values for the attribute cannot be the same
   */
  unique?: boolean;
  /**
   * Whether the attribute can be used as a filter for the product grid in the PIM user interface
   */
  useable_as_grid_filter?: boolean;
  /**
   * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
   */
  validation_rule?: string;
  /**
   * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
   */
  wysiwyg_enabled?: boolean;
};

export type GetAttributesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAttributesCodeData = {
  body: {
    /**
     * Extensions allowed when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     */
    allowed_extensions?: Array<string>;
    /**
     * To make the attribute locale specfic, specify here for which locales it is specific
     */
    available_locales?: Array<string>;
    /**
     * Attribute code
     */
    code: string;
    /**
     * Maximum date allowed when the attribute type is `pim_catalog_date`
     */
    date_max?: Date;
    /**
     * Minimum date allowed when the attribute type is `pim_catalog_date`
     */
    date_min?: Date;
    /**
     * Whether decimals are allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    decimals_allowed?: boolean;
    /**
     * Default metric unit when the attribute type is `pim_catalog_metric`
     */
    default_metric_unit?: string;
    /**
     * Default value for a Yes/No attribute, applied when creating a new product or product model (only available since the 5.0)
     */
    default_value?: boolean;
    /**
     * Attribute group
     */
    group: string;
    /**
     * Group labels for each locale
     */
    group_labels?: {
      /**
       * Group label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     */
    localizable?: boolean;
    /**
     * Number maximum of characters allowed for the value of the attribute when the attribute type is `pim_catalog_text`, `pim_catalog_textarea` or `pim_catalog_identifier`
     */
    max_characters?: number;
    /**
     * Max file size in MB when the attribute type is `pim_catalog_file` or `pim_catalog_image`
     */
    max_file_size?: string;
    /**
     * Metric family when the attribute type is `pim_catalog_metric`
     */
    metric_family?: string;
    /**
     * Whether negative values are allowed when the attribute type is `pim_catalog_metric` or `pim_catalog_number`
     */
    negative_allowed?: boolean;
    /**
     * Maximum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    number_max?: string;
    /**
     * Minimum integer value allowed when the attribute type is `pim_catalog_metric`, `pim_catalog_price` or `pim_catalog_number`
     */
    number_min?: string;
    /**
     * Reference entity code when the attribute type is `akeneo_reference_entity` or `akeneo_reference_entity_collection` OR Asset family code when the attribute type is `pim_catalog_asset_collection`
     */
    reference_data_name?: string;
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     */
    scopable?: boolean;
    /**
     * Order of the attribute in its group
     */
    sort_order?: number;
    /**
     * Configuration of the Table attribute (columns)
     */
    table_configuration?: Array<{
      /**
       * Column code
       */
      code: string;
      /**
       * Column data type
       */
      data_type: "select" | "text" | "number" | "boolean";
      /**
       * Defines if the column should be entirely filled for the attribute to be considered complete
       */
      is_required_for_completeness?: boolean;
      /**
       * Column labels for each locale
       */
      labels?: {
        /**
         * Column label for the locale `localeCode`
         */
        localeCode?: string;
      };
      /**
       * User defined validation constraints on the cell content
       */
      validations?: {
        /**
         * whether the value of a numeric cell can hold a decimal part
         */
        decimals_allowed?: boolean;
        /**
         * maximum value of a numeric cell
         */
        max?: number;
        /**
         * maximum length of a text cell
         */
        max_length?: number;
        /**
         * minimum value of a numeric cell
         */
        min?: number;
      };
    }>;
    /**
     * Attribute type. See <a href='/concepts/catalog-structure.html#attribute'>type</a> section for more details.
     */
    type:
      | "pim_catalog_identifier"
      | "pim_catalog_metric"
      | "pim_catalog_number"
      | "pim_catalog_reference_data_multi_select"
      | "pim_catalog_reference_data_simple_select"
      | "pim_catalog_simpleselect"
      | "pim_catalog_multiselect"
      | "pim_catalog_date"
      | "pim_catalog_textarea"
      | "pim_catalog_text"
      | "pim_catalog_file"
      | "pim_catalog_image"
      | "pim_catalog_price_collection"
      | "pim_catalog_boolean"
      | "akeneo_reference_entity"
      | "akeneo_reference_entity_collection"
      | "pim_catalog_asset_collection";
    /**
     * Whether two values for the attribute cannot be the same
     */
    unique?: boolean;
    /**
     * Whether the attribute can be used as a filter for the product grid in the PIM user interface
     */
    useable_as_grid_filter?: boolean;
    /**
     * Regexp expression used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     */
    validation_regexp?: string;
    /**
     * Validation rule type used to validate any attribute value when the attribute type is `pim_catalog_text` or `pim_catalog_identifier`
     */
    validation_rule?: string;
    /**
     * Whether the WYSIWYG interface is shown when the attribute type is `pim_catalog_textarea`
     */
    wysiwyg_enabled?: boolean;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchAttributesCodeResponse = string;

export type PatchAttributesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAppCatalogsData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
  };
};

export type GetAppCatalogsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetAppCatalogsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostAppCatalogData = {
  body?: {
    /**
     * Catalog name
     */
    name: string;
  };
};

export type PostAppCatalogResponse = {
  /**
   * Whether the catalog is enabled or not
   */
  enabled?: boolean;
  /**
   * Catalog id
   */
  id?: string;
  /**
   * Catalog name
   */
  name?: string;
};

export type PostAppCatalogError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type DeleteAppCatalogData = {
  path: {
    /**
     * Catalog ID
     */
    id: string;
  };
};

export type DeleteAppCatalogResponse = void;

export type DeleteAppCatalogError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAppCatalogData = {
  path: {
    /**
     * Catalog ID
     */
    id: string;
  };
};

export type GetAppCatalogResponse = {
  /**
   * Whether the catalog is enabled or not
   */
  enabled?: boolean;
  /**
   * Catalog id
   */
  id?: string;
  /**
   * Catalog name
   */
  name?: string;
};

export type GetAppCatalogError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchAppCatalogData = {
  body?: {
    /**
     * Catalog name
     */
    name: string;
  };
  path: {
    /**
     * Catalog ID
     */
    id: string;
  };
};

export type PatchAppCatalogResponse = {
  /**
   * Whether the catalog is enabled or not
   */
  enabled?: boolean;
  /**
   * Catalog id
   */
  id?: string;
  /**
   * Catalog name
   */
  name?: string;
};

export type PatchAppCatalogError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAppCatalogProductUuidsData = {
  path: {
    /**
     * Id of the catalog
     */
    id: string;
  };
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     */
    updated_after?: Date;
    /**
     * Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     */
    updated_before?: Date;
  };
};

export type GetAppCatalogProductUuidsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type GetAppCatalogProductUuidsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAppCatalogProductsData = {
  path: {
    /**
     * Catalog ID
     */
    id: string;
  };
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Filter products that have been updated AFTER the provided date (Only available on Catalogs endpoints)
     */
    updated_after?: Date;
    /**
     * Filter products that have been updated BEFORE the provided date (Only available on Catalogs endpoints)
     */
    updated_before?: Date;
  };
};

export type GetAppCatalogProductsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type GetAppCatalogProductsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAppCatalogProductsUuidData = {
  path: {
    /**
     * Catalog ID
     */
    id: string;
    /**
     * Product UUID
     */
    uuid: string;
  };
};

export type GetAppCatalogProductsUuidResponse = unknown;

export type GetAppCatalogProductsUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetCategoriesData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Filter categories, for more details see the <a href="/documentation/filter.html#filter-categories">Filters</a> section.
     */
    search?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
    /**
     * Return attribute values of the category (only available on SaaS platforms)
     */
    with_enriched_attributes?: boolean;
    /**
     * Return information about category position into its category tree (only available since the 7.0 version)
     */
    with_position?: boolean;
  };
};

export type GetCategoriesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetCategoriesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchCategoriesData = {
  body?: {
    /**
     * Category code
     */
    code: string;
    /**
     * Category labels for each locale
     */
    labels?: {
      /**
       * Category label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Category code of the parent's category
     */
    parent?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")
     */
    position?: number;
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Attribute values
     */
    values?: {
      "attributeCode|attributeUuid|channelCode|localeCode"?: Array<{
        /**
         * The attribute code with its uuid (attributeCode|attributeUuid)
         */
        attribute_code?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the attribute value
         */
        channel?: string;
        /**
         * Attribute value
         */
        data?: unknown;
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the attribute value
         */
        locale?: string;
        /**
         * The attribute type
         */
        type?: string;
      }>;
    };
  };
};

export type PatchCategoriesResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchCategoriesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostCategoriesData = {
  body?: {
    /**
     * Category code
     */
    code: string;
    /**
     * Category labels for each locale
     */
    labels?: {
      /**
       * Category label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Category code of the parent's category
     */
    parent?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")
     */
    position?: number;
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Attribute values
     */
    values?: {
      "attributeCode|attributeUuid|channelCode|localeCode"?: Array<{
        /**
         * The attribute code with its uuid (attributeCode|attributeUuid)
         */
        attribute_code?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the attribute value
         */
        channel?: string;
        /**
         * Attribute value
         */
        data?: unknown;
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the attribute value
         */
        locale?: string;
        /**
         * The attribute type
         */
        type?: string;
      }>;
    };
  };
};

export type PostCategoriesResponse = string;

export type PostCategoriesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetCategoriesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
  query?: {
    /**
     * Return attribute values of the category (only available on SaaS platforms) <strong>[COMING SOON]<strong>
     */
    with_enriched_attributes?: boolean;
    /**
     * Return information about category position into its category tree (only available since the 7.0 version)
     */
    with_position?: boolean;
  };
};

export type GetCategoriesCodeResponse = {
  /**
   * Category code
   */
  code: string;
  /**
   * Category labels for each locale
   */
  labels?: {
    /**
     * Category label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Category code of the parent's category
   */
  parent?: string;
  /**
   * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")
   */
  position?: number;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Attribute values
   */
  values?: {
    "attributeCode|attributeUuid|channelCode|localeCode"?: Array<{
      /**
       * The attribute code with its uuid (attributeCode|attributeUuid)
       */
      attribute_code?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the attribute value
       */
      channel?: string;
      /**
       * Attribute value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the attribute value
       */
      locale?: string;
      /**
       * The attribute type
       */
      type?: string;
    }>;
  };
};

export type GetCategoriesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchCategoriesCodeData = {
  body: {
    /**
     * Category code
     */
    code: string;
    /**
     * Category labels for each locale
     */
    labels?: {
      /**
       * Category label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Category code of the parent's category
     */
    parent?: string;
    /**
     * Position of the category in its level, start from 1 (only available since the 7.0 version and when query parameter "with_position" is set to "true")
     */
    position?: number;
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Attribute values
     */
    values?: {
      "attributeCode|attributeUuid|channelCode|localeCode"?: Array<{
        /**
         * The attribute code with its uuid (attributeCode|attributeUuid)
         */
        attribute_code?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the attribute value
         */
        channel?: string;
        /**
         * Attribute value
         */
        data?: unknown;
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the attribute value
         */
        locale?: string;
        /**
         * The attribute type
         */
        type?: string;
      }>;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchCategoriesCodeResponse = string;

export type PatchCategoriesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetCategoryMediaFilesCodeDownloadData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetCategoryMediaFilesCodeDownloadResponse = unknown;

export type GetCategoryMediaFilesCodeDownloadError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetChannelsData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetChannelsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetChannelsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type SeveralChannelsPatchData = {
  body?: {
    /**
     * Code of the category tree linked to the channel
     */
    category_tree: string;
    /**
     * Channel code
     */
    code: string;
    /**
     * Units to which the given metric attributes should be converted when exporting products
     */
    conversion_units?: {
      /**
       * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
       */
      attributeCode?: string;
    };
    /**
     * Codes of activated currencies for the channel
     */
    currencies: Array<string>;
    /**
     * Channel labels for each locale
     */
    labels?: {
      /**
       * Channel label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Codes of activated locales for the channel
     */
    locales: Array<string>;
  };
};

export type SeveralChannelsPatchResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type SeveralChannelsPatchError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type ChannelsPostData = {
  body?: {
    /**
     * Code of the category tree linked to the channel
     */
    category_tree: string;
    /**
     * Channel code
     */
    code: string;
    /**
     * Units to which the given metric attributes should be converted when exporting products
     */
    conversion_units?: {
      /**
       * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
       */
      attributeCode?: string;
    };
    /**
     * Codes of activated currencies for the channel
     */
    currencies: Array<string>;
    /**
     * Channel labels for each locale
     */
    labels?: {
      /**
       * Channel label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Codes of activated locales for the channel
     */
    locales: Array<string>;
  };
};

export type ChannelsPostResponse = string;

export type ChannelsPostError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetChannelsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetChannelsCodeResponse = {
  /**
   * Code of the category tree linked to the channel
   */
  category_tree: string;
  /**
   * Channel code
   */
  code: string;
  /**
   * Units to which the given metric attributes should be converted when exporting products
   */
  conversion_units?: {
    /**
     * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
     */
    attributeCode?: string;
  };
  /**
   * Codes of activated currencies for the channel
   */
  currencies: Array<string>;
  /**
   * Channel labels for each locale
   */
  labels?: {
    /**
     * Channel label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Codes of activated locales for the channel
   */
  locales: Array<string>;
};

export type GetChannelsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type ChannelsPatchData = {
  body: {
    /**
     * Code of the category tree linked to the channel
     */
    category_tree: string;
    /**
     * Channel code
     */
    code: string;
    /**
     * Units to which the given metric attributes should be converted when exporting products
     */
    conversion_units?: {
      /**
       * Conversion unit code used to convert the values of the attribute `attributeCode` when exporting via the channel
       */
      attributeCode?: string;
    };
    /**
     * Codes of activated currencies for the channel
     */
    currencies: Array<string>;
    /**
     * Channel labels for each locale
     */
    labels?: {
      /**
       * Channel label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Codes of activated locales for the channel
     */
    locales: Array<string>;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type ChannelsPatchResponse = string;

export type ChannelsPatchError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type CurrenciesGetListData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type CurrenciesGetListResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type CurrenciesGetListError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type CurrenciesGetData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type CurrenciesGetResponse = {
  /**
   * Currency code
   */
  code: string;
  /**
   * Whether the currency is enabled
   */
  enabled?: boolean;
};

export type CurrenciesGetError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetFamiliesData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Filter families, for more details see the <a href="/documentation/filter.html#filter-families">Filters</a> section.
     */
    search?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetFamiliesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetFamiliesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchFamiliesData = {
  body?: {
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     */
    attribute_as_image?: string;
    /**
     * Attribute code used as label
     */
    attribute_as_label: string;
    /**
     * Attributes codes of the family that are required for the completeness calculation for each channel
     */
    attribute_requirements?: {
      channelCode?: Array<string>;
    };
    /**
     * Attributes codes that compose the family
     */
    attributes?: Array<string>;
    /**
     * Family code
     */
    code: string;
    /**
     * Family labels for each locale
     */
    labels?: {
      /**
       * Family label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
};

export type PatchFamiliesResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchFamiliesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostFamiliesData = {
  body?: {
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     */
    attribute_as_image?: string;
    /**
     * Attribute code used as label
     */
    attribute_as_label: string;
    /**
     * Attributes codes of the family that are required for the completeness calculation for each channel
     */
    attribute_requirements?: {
      channelCode?: Array<string>;
    };
    /**
     * Attributes codes that compose the family
     */
    attributes?: Array<string>;
    /**
     * Family code
     */
    code: string;
    /**
     * Family labels for each locale
     */
    labels?: {
      /**
       * Family label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
};

export type PostFamiliesResponse = string;

export type PostFamiliesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetFamiliesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetFamiliesCodeResponse = {
  /**
   * Attribute code used as the main picture in the user interface (only since v2.0)
   */
  attribute_as_image?: string;
  /**
   * Attribute code used as label
   */
  attribute_as_label: string;
  /**
   * Attributes codes of the family that are required for the completeness calculation for each channel
   */
  attribute_requirements?: {
    channelCode?: Array<string>;
  };
  /**
   * Attributes codes that compose the family
   */
  attributes?: Array<string>;
  /**
   * Family code
   */
  code: string;
  /**
   * Family labels for each locale
   */
  labels?: {
    /**
     * Family label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type GetFamiliesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchFamiliesCodeData = {
  body: {
    /**
     * Attribute code used as the main picture in the user interface (only since v2.0)
     */
    attribute_as_image?: string;
    /**
     * Attribute code used as label
     */
    attribute_as_label: string;
    /**
     * Attributes codes of the family that are required for the completeness calculation for each channel
     */
    attribute_requirements?: {
      channelCode?: Array<string>;
    };
    /**
     * Attributes codes that compose the family
     */
    attributes?: Array<string>;
    /**
     * Family code
     */
    code: string;
    /**
     * Family labels for each locale
     */
    labels?: {
      /**
       * Family label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchFamiliesCodeResponse = string;

export type PatchFamiliesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetFamiliesFamilyCodeVariantsData = {
  path: {
    /**
     * Code of the family
     */
    family_code: string;
  };
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetFamiliesFamilyCodeVariantsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetFamiliesFamilyCodeVariantsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariantsData = {
  body?: {
    /**
     * Family variant code
     */
    code: string;
    /**
     * Family variant labels for each locale
     */
    labels?: {
      /**
       * Family variant label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attributes distribution according to the enrichment level
     */
    variant_attribute_sets: Array<{
      /**
       * Codes of attributes bind to this enrichment level
       */
      attributes?: Array<string>;
      /**
       * Codes of attributes used as variant axes
       */
      axes: Array<string>;
      /**
       * Enrichment level
       */
      level: number;
    }>;
  };
  path: {
    /**
     * Code of the family
     */
    family_code: string;
  };
};

export type PatchFamiliesFamilyCodeVariantsResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchFamiliesFamilyCodeVariantsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostFamiliesFamilyCodeVariantsData = {
  body?: {
    /**
     * Family variant code
     */
    code: string;
    /**
     * Family variant labels for each locale
     */
    labels?: {
      /**
       * Family variant label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attributes distribution according to the enrichment level
     */
    variant_attribute_sets: Array<{
      /**
       * Codes of attributes bind to this enrichment level
       */
      attributes?: Array<string>;
      /**
       * Codes of attributes used as variant axes
       */
      axes: Array<string>;
      /**
       * Enrichment level
       */
      level: number;
    }>;
  };
  path: {
    /**
     * Code of the family
     */
    family_code: string;
  };
};

export type PostFamiliesFamilyCodeVariantsResponse = string;

export type PostFamiliesFamilyCodeVariantsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetFamiliesFamilyCodeVariantsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the family
     */
    family_code: string;
  };
};

export type GetFamiliesFamilyCodeVariantsCodeResponse = {
  /**
   * Family variant code
   */
  code: string;
  /**
   * Family variant labels for each locale
   */
  labels?: {
    /**
     * Family variant label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Attributes distribution according to the enrichment level
   */
  variant_attribute_sets: Array<{
    /**
     * Codes of attributes bind to this enrichment level
     */
    attributes?: Array<string>;
    /**
     * Codes of attributes used as variant axes
     */
    axes: Array<string>;
    /**
     * Enrichment level
     */
    level: number;
  }>;
};

export type GetFamiliesFamilyCodeVariantsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchFamiliesFamilyCodeVariantsCodeData = {
  body: {
    /**
     * Family variant code
     */
    code: string;
    /**
     * Family variant labels for each locale
     */
    labels?: {
      /**
       * Family variant label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Attributes distribution according to the enrichment level
     */
    variant_attribute_sets: Array<{
      /**
       * Codes of attributes bind to this enrichment level
       */
      attributes?: Array<string>;
      /**
       * Codes of attributes used as variant axes
       */
      axes: Array<string>;
      /**
       * Enrichment level
       */
      level: number;
    }>;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the family
     */
    family_code: string;
  };
};

export type PatchFamiliesFamilyCodeVariantsCodeResponse = string;

export type PatchFamiliesFamilyCodeVariantsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetLocalesData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Filter locales, for more details see the <a href="/documentation/filter.html">Filters</a> section
     */
    search?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetLocalesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetLocalesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetLocalesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetLocalesCodeResponse = {
  /**
   * Locale code
   */
  code: string;
  /**
   * Whether the locale is enabled
   */
  enabled?: boolean;
};

export type GetLocalesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type MeasureFamiliesGetListResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type MeasureFamiliesGetListError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type MeasureFamiliesGetData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type MeasureFamiliesGetResponse = {
  /**
   * Measure family code
   */
  code: string;
  /**
   * Measure family standard
   */
  standard?: string;
  /**
   * Family units
   */
  units?: Array<{
    /**
     * Measure code
     */
    code?: string;
    /**
     * Mathematic operation to convert the unit into the standard unit
     */
    convert?: unknown;
    /**
     * Measure symbol
     */
    symbol?: string;
  }>;
};

export type MeasureFamiliesGetError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type MeasurementFamiliesGetListResponse = {
  /**
   * Measurement family code
   */
  code: string;
  /**
   * Measurement family labels for each locale
   */
  labels?: {
    /**
     * Measurement family label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Unit code used as the standard unit for this measurement family
   */
  standard_unit_code: string;
  /**
   * Measurement units for this family with their conversion operations. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
   */
  units: {
    unitCode?: {
      /**
       * Measurement unit code. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      code?: string;
      /**
       * Calculation to convert the unit from the standard unit. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      convert_from_standard?: Array<{
        /**
         * Operator for a conversion operation to convert the unit in the standard unit
         */
        operator?: "mul" | "div" | "add" | "sub";
        /**
         * Value for a conversion operation to convert the unit in the standard unit
         */
        value?: string;
      }>;
      /**
       * Unit labels for each locale. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      labels?: {
        /**
         * Unit label for the locale `localeCode`
         */
        localeCode?: string;
      };
      /**
       * Measurement unit symbol. More details <a href='/concepts/target-market-settings.html#focus-on-the-units'>here</a>.
       */
      symbol?: string;
    };
  };
};

export type MeasurementFamiliesGetListError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchMeasurementFamiliesData = unknown;

export type PatchMeasurementFamiliesResponse = Array<{
  /**
   * Resource code
   */
  code?: string;
  /**
   * List of errors
   */
  errors?: Array<{
    message?: string;
    property?: string;
  }>;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
}>;

export type PatchMeasurementFamiliesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetMediaFilesData = {
  query?: {
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetMediaFilesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetMediaFilesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostMediaFilesData = {
  headers: {
    /**
     * Equal to 'multipart/form-data', no other value allowed
     */
    "Content-type": string;
  };
};

export type PostMediaFilesResponse = string;

export type PostMediaFilesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetMediaFilesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetMediaFilesCodeResponse = {
  _links?: {
    download?: {
      /**
       * URI to download the binaries of the media file
       */
      href?: string;
    };
  };
} & {
  /**
   * Media file code
   */
  code?: string;
  /**
   * Extension of the media file
   */
  extension?: string;
  /**
   * Mime type of the media file
   */
  mime_type?: string;
  /**
   * Original filename of the media file
   */
  original_filename?: string;
  /**
   * Size of the media file
   */
  size?: number;
};

export type GetMediaFilesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetMediaFilesCodeDownloadData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetMediaFilesCodeDownloadResponse = unknown;

export type GetMediaFilesCodeDownloadError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductModelsData = {
  query?: {
    /**
     * Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section and the <a href="/documentation/filter.html#filter-on-product-model-properties">Filter on product model properties</a> section
     */
    attributes?: string;
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-locale">Filter product values via locale</a> section
     */
    locales?: string;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    pagination_type?: "page" | "search_after";
    /**
     * Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-channel">Filter product values via channel</a> section
     */
    scope?: string;
    /**
     * Filter product models, for more details see the <a href="/documentation/filter.html">Filters</a> section
     */
    search?: string;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
    /**
     * Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
     */
    with_quality_scores?: boolean;
  };
};

export type GetProductModelsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetProductModelsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchProductModelsData = {
  body?: {
    /**
     * Several associations related to groups, product and/or other product models, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product identifiers with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
     */
    categories?: Array<string>;
    /**
     * Product model code
     */
    code: string;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     */
    family?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     */
    family_variant: string;
    /**
     * More information around the product model (only available since the v2.3 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product model regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product model is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product identifiers and quantities with which the product model is in relation
         */
        products?: Array<{
          identifier?: string;
          quantity?: number;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * <a href='api-reference.html#Productuuid'>Product</a> value
         */
        data?: unknown;
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
};

export type PatchProductModelsResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchProductModelsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostProductModelsData = {
  body?: {
    /**
     * Several associations related to groups, product and/or other product models, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product identifiers with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
     */
    categories?: Array<string>;
    /**
     * Product model code
     */
    code: string;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     */
    family?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     */
    family_variant: string;
    /**
     * More information around the product model (only available since the v2.3 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product model regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product model is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product identifiers and quantities with which the product model is in relation
         */
        products?: Array<{
          identifier?: string;
          quantity?: number;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * <a href='api-reference.html#Productuuid'>Product</a> value
         */
        data?: unknown;
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
};

export type PostProductModelsResponse = string;

export type PostProductModelsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type DeleteProductModelsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type DeleteProductModelsCodeResponse = void;

export type DeleteProductModelsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductModelsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
  query?: {
    /**
     * Return product model quality scores in the response. <strong>(Only available since the 6.0 version)</strong>
     */
    with_quality_scores?: boolean;
  };
};

export type GetProductModelsCodeResponse = {
  /**
   * Several associations related to groups, product and/or other product models, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
   */
  categories?: Array<string>;
  /**
   * Product model code
   */
  code: string;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
   */
  family?: string;
  /**
   * Family variant code from which the product model inherits its attributes and variant attributes
   */
  family_variant: string;
  /**
   * More information around the product model (only available since the v2.3 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product model regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product model is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product model is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetProductModelsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchProductModelsCodeData = {
  body: {
    /**
     * Several associations related to groups, product and/or other product models, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product identifiers with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
     */
    categories?: Array<string>;
    /**
     * Product model code
     */
    code: string;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
     */
    family?: string;
    /**
     * Family variant code from which the product model inherits its attributes and variant attributes
     */
    family_variant: string;
    /**
     * More information around the product model (only available since the v2.3 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product model regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product model is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product identifiers and quantities with which the product model is in relation
         */
        products?: Array<{
          identifier?: string;
          quantity?: number;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * <a href='api-reference.html#Productuuid'>Product</a> value
         */
        data?: unknown;
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchProductModelsCodeResponse = string;

export type PatchProductModelsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductModelDraftCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetProductModelDraftCodeResponse = {
  /**
   * Several associations related to groups, product and/or other product models, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product model is categorized
   */
  categories?: Array<string>;
  /**
   * Product model code
   */
  code: string;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * <a href='api-reference.html#Family'>Family</a> code  from which the product inherits its attributes and attributes requirements (since the 3.2)
   */
  family?: string;
  /**
   * Family variant code from which the product model inherits its attributes and variant attributes
   */
  family_variant: string;
  /**
   * More information around the product model (only available since the v2.3 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product model regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a>. This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product model quality scores for each channel/locale combination (<strong>only available since the 7.0 version</strong> and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product model is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product model is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product model attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetProductModelDraftCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostProductModelProposalData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PostProductModelProposalResponse = string;

export type PostProductModelProposalError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductsData = {
  query?: {
    /**
     * Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
     */
    attributes?: string;
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-locale">Filter product values via locale</a> section
     */
    locales?: string;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    pagination_type?: "page" | "search_after";
    /**
     * Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-channel">Filter product values via channel</a> section
     */
    scope?: string;
    /**
     * Filter products, for more details see the <a href="/documentation/filter.html">Filters</a> section
     */
    search?: string;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Return labels of attribute options in the response. (Only available since the 5.0 version)
     */
    with_attribute_options?: boolean;
    /**
     * Return product completenesses in the response. (Only available since the 6.0 version)
     */
    with_completenesses?: boolean;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
    /**
     * Return product quality scores in the response. (Only available since the 5.0 version)
     */
    with_quality_scores?: boolean;
  };
};

export type GetProductsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetProductsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchProductsData = {
  body?: {
    /**
     * Several associations related to groups, product models and/or other products, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product identifiers with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
     */
    categories?: Array<string>;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
     */
    completenesses?: Array<{
      data?: number;
      locale?: string;
      scope?: string;
    }>;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Whether the product is enabled
     */
    enabled?: boolean;
    /**
     * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
     */
    family?: string;
    /**
     * Codes of the groups to which the product belong
     */
    groups?: Array<string>;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     */
    identifier: string;
    /**
     * More information around the product (only available since the v2.0 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product identifiers and quantities with which the product is in relation
         */
        products?: Array<{
          identifier?: string;
          quantity?: number;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product UUID
     */
    uuid?: string;
    /**
     * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
         */
        linked_data?: {
          attribute?: string;
          code?: string;
          labels?: unknown;
        };
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
};

export type PatchProductsResponse = {
  /**
   * Resource code, only filled when the resource is not a product
   */
  code?: string;
  /**
   * Resource identifier, only filled when the resource is a product
   */
  identifier?: string;
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
};

export type PatchProductsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostProductsData = {
  body?: {
    /**
     * Several associations related to groups, product models and/or other products, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product identifiers with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
     */
    categories?: Array<string>;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
     */
    completenesses?: Array<{
      data?: number;
      locale?: string;
      scope?: string;
    }>;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Whether the product is enabled
     */
    enabled?: boolean;
    /**
     * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
     */
    family?: string;
    /**
     * Codes of the groups to which the product belong
     */
    groups?: Array<string>;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     */
    identifier: string;
    /**
     * More information around the product (only available since the v2.0 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product identifiers and quantities with which the product is in relation
         */
        products?: Array<{
          identifier?: string;
          quantity?: number;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product UUID
     */
    uuid?: string;
    /**
     * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
         */
        linked_data?: {
          attribute?: string;
          code?: string;
          labels?: unknown;
        };
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
};

export type PostProductsResponse = string;

export type PostProductsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductsUuidData = {
  query?: {
    /**
     * Filter product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
     */
    attributes?: string;
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Filter product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-locale">Filter product values via locale</a> section
     */
    locales?: string;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    pagination_type?: "page" | "search_after";
    /**
     * Filter product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#via-channel">Filter product values via channel</a> section
     */
    scope?: string;
    /**
     * Filter products, for more details see the <a href="/documentation/filter.html">Filters</a> section
     */
    search?: string;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Return labels of attribute options in the response. (Only available since the 5.0 version)
     */
    with_attribute_options?: boolean;
    /**
     * Return product completenesses in the response. (Only available since the 6.0 version)
     */
    with_completenesses?: boolean;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
    /**
     * Return product quality scores in the response. (Only available since the 5.0 version)
     */
    with_quality_scores?: boolean;
  };
};

export type GetProductsUuidResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetProductsUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchProductsUuidData = {
  body?: {
    /**
     * Several associations related to groups, product models and/or other products, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product uuids with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
     */
    categories?: Array<string>;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
     */
    completenesses?: Array<{
      data?: number;
      locale?: string;
      scope?: string;
    }>;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Whether the product is enabled
     */
    enabled?: boolean;
    /**
     * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
     */
    family?: string;
    /**
     * Codes of the groups to which the product belong
     */
    groups?: Array<string>;
    /**
     * More information around the product (only available since the v2.0 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product uuids and quantities with which the product is in relation
         */
        products?: Array<{
          quantity?: number;
          uuid?: string;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product uuid
     */
    uuid: string;
    /**
     * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
         */
        linked_data?: {
          attribute?: string;
          code?: string;
          labels?: unknown;
        };
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
};

export type PatchProductsUuidResponse = {
  /**
   * Line number
   */
  line?: number;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
  /**
   * Product uuid
   */
  uuid?: string;
};

export type PatchProductsUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostProductsUuidData = {
  body?: {
    /**
     * Several associations related to groups, product models and/or other products, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product uuids with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
     */
    categories?: Array<string>;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
     */
    completenesses?: Array<{
      data?: number;
      locale?: string;
      scope?: string;
    }>;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Whether the product is enabled
     */
    enabled?: boolean;
    /**
     * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
     */
    family?: string;
    /**
     * Codes of the groups to which the product belong
     */
    groups?: Array<string>;
    /**
     * More information around the product (only available since the v2.0 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product uuids and quantities with which the product is in relation
         */
        products?: Array<{
          quantity?: number;
          uuid?: string;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product uuid
     */
    uuid?: string;
    /**
     * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
         */
        linked_data?: {
          attribute?: string;
          code?: string;
          labels?: unknown;
        };
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
};

export type PostProductsUuidResponse = string;

export type PostProductsUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type DeleteProductsUuidUuidData = {
  path: {
    /**
     * Uuid of the resource
     */
    uuid: string;
  };
};

export type DeleteProductsUuidUuidResponse = void;

export type DeleteProductsUuidUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductsUuidUuidData = {
  path: {
    /**
     * Uuid of the resource
     */
    uuid: string;
  };
  query?: {
    /**
     * Return labels of attribute options in the response. (Only available since the 5.0 version)
     */
    with_attribute_options?: boolean;
    /**
     * Return product completenesses in the response. (Only available since the 6.0 version)
     */
    with_completenesses?: boolean;
    /**
     * Return product quality scores in the response. (Only available since the 5.0 version)
     */
    with_quality_scores?: boolean;
  };
};

export type GetProductsUuidUuidResponse = {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product uuids with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product uuids and quantities with which the product is in relation
       */
      products?: Array<{
        quantity?: number;
        uuid?: string;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product uuid
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetProductsUuidUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchProductsUuidUuidData = {
  body: {
    /**
     * Several associations related to groups, product models and/or other products, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product uuids with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
     */
    categories?: Array<string>;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
     */
    completenesses?: Array<{
      data?: number;
      locale?: string;
      scope?: string;
    }>;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Whether the product is enabled
     */
    enabled?: boolean;
    /**
     * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
     */
    family?: string;
    /**
     * Codes of the groups to which the product belong
     */
    groups?: Array<string>;
    /**
     * More information around the product (only available since the v2.0 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product uuids and quantities with which the product is in relation
         */
        products?: Array<{
          quantity?: number;
          uuid?: string;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product uuid
     */
    uuid?: string;
    /**
     * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
         */
        linked_data?: {
          attribute?: string;
          code?: string;
          labels?: unknown;
        };
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
  path: {
    /**
     * Uuid of the resource
     */
    uuid: string;
  };
};

export type PatchProductsUuidUuidResponse = string;

export type PatchProductsUuidUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetDraftUuidUuidData = {
  path: {
    /**
     * Uuid of the resource
     */
    uuid: string;
  };
};

export type GetDraftUuidUuidResponse = {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product uuids with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product uuids and quantities with which the product is in relation
       */
      products?: Array<{
        quantity?: number;
        uuid?: string;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product uuid
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetDraftUuidUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostProposalUuidData = {
  path: {
    /**
     * Uuid of the resource
     */
    uuid: string;
  };
};

export type PostProposalUuidResponse = string;

export type PostProposalUuidError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type DeleteProductsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type DeleteProductsCodeResponse = void;

export type DeleteProductsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetProductsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
  query?: {
    /**
     * Return labels of attribute options in the response. (Only available since the 5.0 version)
     */
    with_attribute_options?: boolean;
    /**
     * Return product completenesses in the response. (Only available since the 6.0 version)
     */
    with_completenesses?: boolean;
    /**
     * Return product quality scores in the response. (Only available since the 5.0 version)
     */
    with_quality_scores?: boolean;
  };
};

export type GetProductsCodeResponse = {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product UUID
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetProductsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchProductsCodeData = {
  body: {
    /**
     * Several associations related to groups, product models and/or other products, grouped by association types
     */
    associations?: {
      associationTypeCode?: {
        /**
         * Array of groups codes with which the product is in relation
         */
        groups?: Array<string>;
        /**
         * Array of product model codes with which the product is in relation (only available since the v2.1)
         */
        product_models?: Array<string>;
        /**
         * Array of product identifiers with which the product is in relation
         */
        products?: Array<string>;
      };
    };
    /**
     * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
     */
    categories?: Array<string>;
    /**
     * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
     */
    completenesses?: Array<{
      data?: number;
      locale?: string;
      scope?: string;
    }>;
    /**
     * Date of creation
     */
    created?: string;
    /**
     * Whether the product is enabled
     */
    enabled?: boolean;
    /**
     * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
     */
    family?: string;
    /**
     * Codes of the groups to which the product belong
     */
    groups?: Array<string>;
    /**
     * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
     */
    identifier: string;
    /**
     * More information around the product (only available since the v2.0 in the Enterprise Edition)
     */
    metadata?: {
      /**
       * Status of the product regarding the user permissions
       */
      workflow_status?:
        | "read_only"
        | "draft_in_progress"
        | "proposal_waiting_for_approval"
        | "working_copy";
    };
    /**
     * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
     */
    parent?: string;
    /**
     * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
     */
    quality_scores?: unknown;
    /**
     * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
     */
    quantified_associations?: {
      quantifiedAssociationTypeCode?: {
        /**
         * Array of objects containing product model codes and quantities with which the product is in relation
         */
        product_models?: Array<{
          code?: string;
          quantity?: number;
        }>;
        /**
         * Array of objects containing product identifiers and quantities with which the product is in relation
         */
        products?: Array<{
          identifier?: string;
          quantity?: number;
        }>;
      };
    };
    /**
     * Date of the last update
     */
    updated?: string;
    /**
     * Product UUID
     */
    uuid?: string;
    /**
     * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
         */
        linked_data?: {
          attribute?: string;
          code?: string;
          labels?: unknown;
        };
        /**
         * <a href='api-reference.html#Locale'>Locale</a> code of the product value
         */
        locale?: string;
        /**
         * <a href='api-reference.html#Channel'>Channel</a> code of the product value
         */
        scope?: string;
      }>;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchProductsCodeResponse = string;

export type PatchProductsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetDraftCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetDraftCodeResponse = {
  /**
   * Several associations related to groups, product models and/or other products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of product identifiers with which the product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the product is classified
   */
  categories?: Array<string>;
  /**
   * Product completenesses for each channel/locale combination (only available since the 7.0 version, and when the "with_completenesses" query parameter is set to "true")
   */
  completenesses?: Array<{
    data?: number;
    locale?: string;
    scope?: string;
  }>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the product is enabled
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the product inherits its attributes and attributes requirements.
   */
  family?: string;
  /**
   * Codes of the groups to which the product belong
   */
  groups?: Array<string>;
  /**
   * Product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * More information around the product (only available since the v2.0 in the Enterprise Edition)
   */
  metadata?: {
    /**
     * Status of the product regarding the user permissions
     */
    workflow_status?:
      | "read_only"
      | "draft_in_progress"
      | "proposal_waiting_for_approval"
      | "working_copy";
  };
  /**
   * Code of the parent <a href='api-reference.html#Productmodel'>product model</a> when the product is a variant (only available since the 2.0). This parent can be modified since the 2.3.
   */
  parent?: string;
  /**
   * Product quality scores for each channel/locale combination (only available since the 5.0 and when the "with_quality_scores" query parameter is set to "true")
   */
  quality_scores?: unknown;
  /**
   * Several quantified associations related to products and/or product models, grouped by quantified association types (only available since the 5.0)
   */
  quantified_associations?: {
    quantifiedAssociationTypeCode?: {
      /**
       * Array of objects containing product model codes and quantities with which the product is in relation
       */
      product_models?: Array<{
        code?: string;
        quantity?: number;
      }>;
      /**
       * Array of objects containing product identifiers and quantities with which the product is in relation
       */
      products?: Array<{
        identifier?: string;
        quantity?: number;
      }>;
    };
  };
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Product UUID
   */
  uuid?: string;
  /**
   * Product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Product value. See <a href='/concepts/products.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Object containing labels of attribute options (only available since the 5.0 and when query parameter "with_attribute_options" is set to "true"). See <a href='/concepts/products.html#the-linked_data-format'>the `linked_data` format</a> section for more details.
       */
      linked_data?: {
        attribute?: string;
        code?: string;
        labels?: unknown;
      };
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetDraftCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostProposalData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PostProposalResponse = string;

export type PostProposalError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetPublishedProductsData = {
  query?: {
    /**
     * Filter published product values to only return those concerning the given attributes, for more details see the <a href="/documentation/filter.html#filter-product-values">Filter on product values</a> section
     */
    attributes?: string;
    /**
     * Number of results by page, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    limit?: number;
    /**
     * Filter published product values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-published-product-values">Filter on published product values</a> section
     */
    locales?: string;
    /**
     * Number of the page to retrieve when using the `page` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html#pagination">Pagination</a> section
     */
    page?: number;
    /**
     * Pagination method type, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    pagination_type?: "page" | "search_after";
    /**
     * Filter published product values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#filter-published-product-values">Filter on published product values</a> section
     */
    scope?: string;
    /**
     * Filter published products, for more details see the <a href="/documentation/filter.html">Filters</a> section
     */
    search?: string;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
    /**
     * Return the count of items in the response. Be carefull with that, on a big catalog, it can decrease performance in a significative way
     */
    with_count?: boolean;
  };
};

export type GetPublishedProductsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    previous?: {
      /**
       * URI of the previous page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
  /**
   * Current page number
   */
  current_page?: number;
};

export type GetPublishedProductsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetPublishedProductsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetPublishedProductsCodeResponse = {
  /**
   * Several associations related to groups and/or other published products, grouped by association types
   */
  associations?: {
    associationTypeCode?: {
      /**
       * Array of groups codes with which the published product is in relation
       */
      groups?: Array<string>;
      /**
       * Array of product model codes with which the product is in relation (only available since the v2.1)
       */
      product_models?: Array<string>;
      /**
       * Array of published product identifiers with which the published product is in relation
       */
      products?: Array<string>;
    };
  };
  /**
   * Codes of the <a href='api-reference.html#Category'>categories</a> in which the published product is classified
   */
  categories?: Array<string>;
  /**
   * Date of creation
   */
  created?: string;
  /**
   * Whether the published product is enable
   */
  enabled?: boolean;
  /**
   * <a href='api-reference.html#Family'>Family</a> code from which the published product inherits its attributes and attributes requirements
   */
  family?: string;
  /**
   * Codes of the groups to which the published product belong
   */
  groups?: Array<string>;
  /**
   * Published product identifier, i.e. the value of the only `pim_catalog_identifier` attribute
   */
  identifier: string;
  /**
   * Warning: associations with quantities are not compatible with the published products. The response will always be empty.
   */
  quantified_associations?: unknown;
  /**
   * Date of the last update
   */
  updated?: string;
  /**
   * Published product attributes values, see <a href='/concepts/products.html#focus-on-the-product-values'>Product values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * <a href='api-reference.html#Productuuid'>Product</a> value
       */
      data?: unknown;
      /**
       * <a href='api-reference.html#Locale'>Locale</a> code of the product value
       */
      locale?: string;
      /**
       * <a href='api-reference.html#Channel'>Channel</a> code of the product value
       */
      scope?: string;
    }>;
  };
};

export type GetPublishedProductsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntitiesData = {
  query?: {
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
  };
};

export type GetReferenceEntitiesResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type GetReferenceEntitiesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PostReferenceEntityMediaFilesData = {
  headers: {
    /**
     * Equal to 'multipart/form-data', no other value allowed
     */
    "Content-type": string;
  };
};

export type PostReferenceEntityMediaFilesResponse = string;

export type PostReferenceEntityMediaFilesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntityMediaFilesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetReferenceEntityMediaFilesCodeResponse = unknown;

export type GetReferenceEntityMediaFilesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntitiesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type GetReferenceEntitiesCodeResponse = {
  _links?: {
    image_download?: {
      /**
       * URI to download the binaries of the reference entity image file
       */
      href?: string;
    };
  };
} & {
  /**
   * Reference entity code
   */
  code: string;
  /**
   * Code of the reference entity image
   */
  image?: string;
  /**
   * Reference entity labels for each locale
   */
  labels?: {
    /**
     * Reference entity label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type GetReferenceEntitiesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchReferenceEntityCodeData = {
  body: {
    /**
     * Reference entity code
     */
    code: string;
    /**
     * Code of the reference entity image
     */
    image?: string;
    /**
     * Reference entity labels for each locale
     */
    labels?: {
      /**
       * Reference entity label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
  };
};

export type PatchReferenceEntityCodeResponse = string;

export type PatchReferenceEntityCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntitiesCodeAttributesData = {
  path: {
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type GetReferenceEntitiesCodeAttributesResponse = Array<{
  /**
   * Extensions allowed when the attribute type is `image`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `image`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
   */
  reference_entity_code?: string;
  /**
   * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "image"
    | "number"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
}>;

export type GetReferenceEntitiesCodeAttributesError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptionsData = {
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type GetReferenceEntityAttributesAttributeCodeOptionsResponse = Array<{
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
}>;

export type GetReferenceEntityAttributesAttributeCodeOptionsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCodeData = {
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCodeResponse = {
  /**
   * Attribute's option code
   */
  code: string;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
};

export type GetReferenceEntityAttributesAttributeCodeOptionsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchReferenceEntityAttributesAttributeCodeOptionsCodeData = {
  body: {
    /**
     * Attribute's option code
     */
    code: string;
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
  };
  path: {
    /**
     * Code of the attribute
     */
    attribute_code: string;
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type PatchReferenceEntityAttributesAttributeCodeOptionsCodeResponse =
  string;

export type PatchReferenceEntityAttributesAttributeCodeOptionsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntityAttributesCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type GetReferenceEntityAttributesCodeResponse = {
  /**
   * Extensions allowed when the attribute type is `image`
   */
  allowed_extensions?: Array<string>;
  /**
   * Attribute code
   */
  code: string;
  /**
   * Whether decimals are allowed when the attribute type is `number`
   */
  decimals_allowed?: boolean;
  /**
   * Whether the attribute should be part of the record's completeness calculation
   */
  is_required_for_completeness?: boolean;
  /**
   * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
   */
  is_rich_text_editor?: boolean;
  /**
   * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
   */
  is_textarea?: boolean;
  /**
   * Attribute labels for each locale
   */
  labels?: {
    /**
     * Attribute label for the locale `localeCode`
     */
    localeCode?: string;
  };
  /**
   * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
   */
  max_characters?: number;
  /**
   * Max file size in MB when the attribute type is `image`
   */
  max_file_size?: string;
  /**
   * Maximum value allowed when the attribute type is `number`
   */
  max_value?: string;
  /**
   * Minimum value allowed when the attribute type is `number`
   */
  min_value?: string;
  /**
   * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
   */
  reference_entity_code?: string;
  /**
   * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
   */
  type:
    | "text"
    | "image"
    | "number"
    | "single_option"
    | "multiple_options"
    | "reference_entity_single_link"
    | "reference_entity_multiple_links";
  /**
   * Regexp expression used to validate the attribute value when the attribute type is `text`
   */
  validation_regexp?: string;
  /**
   * Validation rule type used to validate the attribute value when the attribute type is `text`
   */
  validation_rule?: "email" | "url" | "regexp" | "none";
  /**
   * Whether the attribute is scopable, i.e. can have one value by channel
   */
  value_per_channel?: boolean;
  /**
   * Whether the attribute is localizable, i.e. can have one value by locale
   */
  value_per_locale?: boolean;
};

export type GetReferenceEntityAttributesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchReferenceEntityAttributesCodeData = {
  body: {
    /**
     * Extensions allowed when the attribute type is `image`
     */
    allowed_extensions?: Array<string>;
    /**
     * Attribute code
     */
    code: string;
    /**
     * Whether decimals are allowed when the attribute type is `number`
     */
    decimals_allowed?: boolean;
    /**
     * Whether the attribute should be part of the record's completeness calculation
     */
    is_required_for_completeness?: boolean;
    /**
     * Whether the UI should display a rich text editor instead of a simple text area when the attribute type is `text`
     */
    is_rich_text_editor?: boolean;
    /**
     * Whether the UI should display a text area instead of a simple field when the attribute type is `text`
     */
    is_textarea?: boolean;
    /**
     * Attribute labels for each locale
     */
    labels?: {
      /**
       * Attribute label for the locale `localeCode`
       */
      localeCode?: string;
    };
    /**
     * Maximum number of characters allowed for the value of the attribute when the attribute type is `text`
     */
    max_characters?: number;
    /**
     * Max file size in MB when the attribute type is `image`
     */
    max_file_size?: string;
    /**
     * Maximum value allowed when the attribute type is `number`
     */
    max_value?: string;
    /**
     * Minimum value allowed when the attribute type is `number`
     */
    min_value?: string;
    /**
     * Code of the linked reference entity when the attribute type is `reference_entity_single_link` or `reference_entity_multiple_links`
     */
    reference_entity_code?: string;
    /**
     * Attribute type. See <a href='/concepts/reference-entities.html#reference-entity-attribute'>type</a> section for more details.
     */
    type:
      | "text"
      | "image"
      | "number"
      | "single_option"
      | "multiple_options"
      | "reference_entity_single_link"
      | "reference_entity_multiple_links";
    /**
     * Regexp expression used to validate the attribute value when the attribute type is `text`
     */
    validation_regexp?: string;
    /**
     * Validation rule type used to validate the attribute value when the attribute type is `text`
     */
    validation_rule?: "email" | "url" | "regexp" | "none";
    /**
     * Whether the attribute is scopable, i.e. can have one value by channel
     */
    value_per_channel?: boolean;
    /**
     * Whether the attribute is localizable, i.e. can have one value by locale
     */
    value_per_locale?: boolean;
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type PatchReferenceEntityAttributesCodeResponse = string;

export type PatchReferenceEntityAttributesCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntityRecordsData = {
  path: {
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
  query?: {
    /**
     * Filter attribute values to return scopable attributes for the given channel as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#record-values-by-channel">Filter attribute values by channel</a> section
     */
    channel?: string;
    /**
     * Filter attribute values to return localizable attributes for the given locales as well as the non localizable/non scopable attributes, for more details see the <a href="/documentation/filter.html#record-values-by-locale">Filter attribute values by locale</a> section
     */
    locales?: string;
    /**
     * Filter records of the reference entity, for more details see the <a href="/documentation/filter.html#filter-reference-entity-records">Filters</a> section
     */
    search?: string;
    /**
     * Cursor when using the `search_after` pagination method type. <strong>Should never be set manually</strong>, see <a href="/documentation/pagination.html">Pagination</a> section
     */
    search_after?: string;
  };
};

export type GetReferenceEntityRecordsResponse = {
  _links?: {
    first?: {
      /**
       * URI of the first page of resources
       */
      href?: string;
    };
    next?: {
      /**
       * URI of the next page of resources
       */
      href?: string;
    };
    self?: {
      /**
       * URI of the current page of resources
       */
      href?: string;
    };
  };
};

export type GetReferenceEntityRecordsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchReferenceEntityRecordsData = {
  path: {
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type PatchReferenceEntityRecordsResponse = Array<{
  /**
   * Resource code
   */
  code?: string;
  /**
   * Message explaining the error
   */
  message?: string;
  /**
   * HTTP status code, see <a href="/documentation/responses.html#client-errors">Client errors</a> to understand the meaning of each code
   */
  status_code?: number;
}>;

export type PatchReferenceEntityRecordsError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetReferenceEntityRecordsCodeData = {
  path: {
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type GetReferenceEntityRecordsCodeResponse = {
  /**
   * Code of the record
   */
  code: string;
  /**
   * Date of creation.
   */
  created?: string;
  /**
   * Date of the last update.
   */
  updated?: string;
  /**
   * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
   */
  values?: {
    attributeCode?: Array<{
      /**
       * Channel code of the reference entity record value
       */
      channel?: string;
      /**
       * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
       */
      data?: unknown;
      /**
       * Locale code of the reference entity record value
       */
      locale?: string;
    }>;
  };
};

export type GetReferenceEntityRecordsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type PatchReferenceEntityRecordsCodeData = {
  body: {
    /**
     * Code of the record
     */
    code: string;
    /**
     * Date of creation.
     */
    created?: string;
    /**
     * Date of the last update.
     */
    updated?: string;
    /**
     * Record attributes values, see <a href='/concepts/reference-entities.html#focus-on-the-reference-entity-record-values'>Reference entity record values</a> section for more details
     */
    values?: {
      attributeCode?: Array<{
        /**
         * Channel code of the reference entity record value
         */
        channel?: string;
        /**
         * Reference entity record value. See <a href='/concepts/reference-entities.html#the-data-format'>the `data` format</a> section for more details.
         */
        data?: unknown;
        /**
         * Locale code of the reference entity record value
         */
        locale?: string;
      }>;
    };
  };
  path: {
    /**
     * Code of the resource
     */
    code: string;
    /**
     * Code of the reference entity
     */
    reference_entity_code: string;
  };
};

export type PatchReferenceEntityRecordsCodeResponse = string;

export type PatchReferenceEntityRecordsCodeError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetSystemInformationResponse = {
  /**
   * Edition of the PIM
   */
  edition?: string;
  /**
   * Version of the PIM
   */
  version?: string;
};

export type GetSystemInformationError = {
  /**
   * HTTP status code
   */
  code?: number;
  /**
   * Message explaining the error
   */
  message?: string;
};

export type GetAttributesCodeResponseTransformer = (
  data: any,
) => Promise<GetAttributesCodeResponse>;

export const GetAttributesCodeResponseTransformer: GetAttributesCodeResponseTransformer =
  async (data) => {
    if (data?.date_max) {
      data.date_max = new Date(data.date_max);
    }
    if (data?.date_min) {
      data.date_min = new Date(data.date_min);
    }
    return data;
  };
