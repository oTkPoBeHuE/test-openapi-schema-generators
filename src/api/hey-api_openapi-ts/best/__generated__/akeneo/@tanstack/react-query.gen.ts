// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from "@hey-api/client-fetch";
import {
  queryOptions,
  type UseMutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/react-query";
import type {
  PostTokenData,
  PostTokenError,
  PostTokenResponse,
  GetAssetCategoriesData,
  GetAssetCategoriesError,
  GetAssetCategoriesResponse,
  PatchAssetCategoriesData,
  PatchAssetCategoriesError,
  PatchAssetCategoriesResponse,
  PostAssetCategoriesData,
  PostAssetCategoriesError,
  PostAssetCategoriesResponse,
  GetAssetCategoriesCodeData,
  PatchAssetCategoriesCodeData,
  PatchAssetCategoriesCodeError,
  PatchAssetCategoriesCodeResponse,
  GetAssetFamiliesData,
  GetAssetsData,
  PatchAssetsData,
  PatchAssetsError,
  PatchAssetsResponse,
  DeleteAssetsCodeData,
  DeleteAssetsCodeError,
  DeleteAssetsCodeResponse,
  GetAssetsCodeData,
  PatchAssetCodeData,
  PatchAssetCodeError,
  PatchAssetCodeResponse,
  GetAssetFamiliesCodeAttributesData,
  GetAssetFamilyAttributesAttributeCodeOptionsData,
  GetAssetAttributesAttributeCodeOptionsCodeData,
  PatchAssetAttributesAttributeCodeOptionsCodeData,
  PatchAssetAttributesAttributeCodeOptionsCodeError,
  PatchAssetAttributesAttributeCodeOptionsCodeResponse,
  GetAssetFamilyAttributesCodeData,
  PatchAssetFamilyAttributesCodeData,
  PatchAssetFamilyAttributesCodeError,
  PatchAssetFamilyAttributesCodeResponse,
  GetAssetFamilyCodeData,
  PatchAssetFamilyCodeData,
  PatchAssetFamilyCodeError,
  PatchAssetFamilyCodeResponse,
  PostAssetMediaFilesData,
  PostAssetMediaFilesError,
  PostAssetMediaFilesResponse,
  GetAssetMediaFilesCodeData,
  GetAssetTagsData,
  GetAssetTagsError,
  GetAssetTagsResponse,
  GetAssetTagsCodeData,
  PatchAssetTagsCodeData,
  PatchAssetTagsCodeError,
  PatchAssetTagsCodeResponse,
  GetPamAssetsData,
  GetPamAssetsError,
  GetPamAssetsResponse,
  PatchPamAssetsData,
  PatchPamAssetsError,
  PatchPamAssetsResponse,
  PostPamAssetsData,
  PostPamAssetsError,
  PostPamAssetsResponse,
  GetReferenceFilesLocaleCodeData,
  PostReferenceFilesLocaleCodeData,
  PostReferenceFilesLocaleCodeError,
  PostReferenceFilesLocaleCodeResponse,
  GetReferenceFilesChannelCodeLocaleCodeDownloadData,
  GetVariationFilesChannelCodeLocaleCodeData,
  PostVariationFilesChannelCodeLocaleCodeData,
  PostVariationFilesChannelCodeLocaleCodeError,
  PostVariationFilesChannelCodeLocaleCodeResponse,
  GetVariationFilesChannelCodeLocaleCodeDownloadData,
  GetPamAssetsCodeData,
  PatchPamAssetsCodeData,
  PatchPamAssetsCodeError,
  PatchPamAssetsCodeResponse,
  AssociationTypesGetListData,
  AssociationTypesGetListError,
  AssociationTypesGetListResponse,
  SeveralAssociationTypesPatchData,
  SeveralAssociationTypesPatchError,
  SeveralAssociationTypesPatchResponse,
  AssociationTypesPostData,
  AssociationTypesPostError,
  AssociationTypesPostResponse,
  AssociationTypesGetData,
  AssociationTypesPatchData,
  AssociationTypesPatchError,
  AssociationTypesPatchResponse,
  AttributeGroupsGetListData,
  AttributeGroupsGetListError,
  AttributeGroupsGetListResponse,
  SeveralAttributeGroupsPatchData,
  SeveralAttributeGroupsPatchError,
  SeveralAttributeGroupsPatchResponse,
  AttributeGroupsPostData,
  AttributeGroupsPostError,
  AttributeGroupsPostResponse,
  AttributeGroupsGetData,
  AttributeGroupsPatchData,
  AttributeGroupsPatchError,
  AttributeGroupsPatchResponse,
  GetAttributesData,
  GetAttributesError,
  GetAttributesResponse,
  PatchAttributesData,
  PatchAttributesError,
  PatchAttributesResponse,
  PostAttributesData,
  PostAttributesError,
  PostAttributesResponse,
  GetAttributesAttributeCodeOptionsData,
  GetAttributesAttributeCodeOptionsError,
  GetAttributesAttributeCodeOptionsResponse,
  PatchAttributesAttributeCodeOptionsData,
  PatchAttributesAttributeCodeOptionsError,
  PatchAttributesAttributeCodeOptionsResponse,
  PostAttributesAttributeCodeOptionsData,
  PostAttributesAttributeCodeOptionsError,
  PostAttributesAttributeCodeOptionsResponse,
  GetAttributesAttributeCodeOptionsCodeData,
  PatchAttributesAttributeCodeOptionsCodeData,
  PatchAttributesAttributeCodeOptionsCodeError,
  PatchAttributesAttributeCodeOptionsCodeResponse,
  GetAttributesCodeData,
  PatchAttributesCodeData,
  PatchAttributesCodeError,
  PatchAttributesCodeResponse,
  GetAppCatalogsData,
  GetAppCatalogsError,
  GetAppCatalogsResponse,
  PostAppCatalogData,
  PostAppCatalogError,
  PostAppCatalogResponse,
  DeleteAppCatalogData,
  DeleteAppCatalogError,
  DeleteAppCatalogResponse,
  GetAppCatalogData,
  PatchAppCatalogData,
  PatchAppCatalogError,
  PatchAppCatalogResponse,
  GetAppCatalogProductUuidsData,
  GetAppCatalogProductsData,
  GetAppCatalogProductsUuidData,
  GetCategoriesData,
  GetCategoriesError,
  GetCategoriesResponse,
  PatchCategoriesData,
  PatchCategoriesError,
  PatchCategoriesResponse,
  PostCategoriesData,
  PostCategoriesError,
  PostCategoriesResponse,
  GetCategoriesCodeData,
  PatchCategoriesCodeData,
  PatchCategoriesCodeError,
  PatchCategoriesCodeResponse,
  GetCategoryMediaFilesCodeDownloadData,
  GetChannelsData,
  GetChannelsError,
  GetChannelsResponse,
  SeveralChannelsPatchData,
  SeveralChannelsPatchError,
  SeveralChannelsPatchResponse,
  ChannelsPostData,
  ChannelsPostError,
  ChannelsPostResponse,
  GetChannelsCodeData,
  ChannelsPatchData,
  ChannelsPatchError,
  ChannelsPatchResponse,
  CurrenciesGetListData,
  CurrenciesGetListError,
  CurrenciesGetListResponse,
  CurrenciesGetData,
  GetFamiliesData,
  GetFamiliesError,
  GetFamiliesResponse,
  PatchFamiliesData,
  PatchFamiliesError,
  PatchFamiliesResponse,
  PostFamiliesData,
  PostFamiliesError,
  PostFamiliesResponse,
  GetFamiliesCodeData,
  PatchFamiliesCodeData,
  PatchFamiliesCodeError,
  PatchFamiliesCodeResponse,
  GetFamiliesFamilyCodeVariantsData,
  GetFamiliesFamilyCodeVariantsError,
  GetFamiliesFamilyCodeVariantsResponse,
  PatchFamiliesFamilyCodeVariantsData,
  PatchFamiliesFamilyCodeVariantsError,
  PatchFamiliesFamilyCodeVariantsResponse,
  PostFamiliesFamilyCodeVariantsData,
  PostFamiliesFamilyCodeVariantsError,
  PostFamiliesFamilyCodeVariantsResponse,
  GetFamiliesFamilyCodeVariantsCodeData,
  PatchFamiliesFamilyCodeVariantsCodeData,
  PatchFamiliesFamilyCodeVariantsCodeError,
  PatchFamiliesFamilyCodeVariantsCodeResponse,
  GetLocalesData,
  GetLocalesError,
  GetLocalesResponse,
  GetLocalesCodeData,
  MeasureFamiliesGetData,
  PatchMeasurementFamiliesData,
  PatchMeasurementFamiliesError,
  PatchMeasurementFamiliesResponse,
  GetMediaFilesData,
  GetMediaFilesError,
  GetMediaFilesResponse,
  PostMediaFilesData,
  PostMediaFilesError,
  PostMediaFilesResponse,
  GetMediaFilesCodeData,
  GetMediaFilesCodeDownloadData,
  GetProductModelsData,
  GetProductModelsError,
  GetProductModelsResponse,
  PatchProductModelsData,
  PatchProductModelsError,
  PatchProductModelsResponse,
  PostProductModelsData,
  PostProductModelsError,
  PostProductModelsResponse,
  DeleteProductModelsCodeData,
  DeleteProductModelsCodeError,
  DeleteProductModelsCodeResponse,
  GetProductModelsCodeData,
  PatchProductModelsCodeData,
  PatchProductModelsCodeError,
  PatchProductModelsCodeResponse,
  GetProductModelDraftCodeData,
  PostProductModelProposalData,
  PostProductModelProposalError,
  PostProductModelProposalResponse,
  GetProductsData,
  GetProductsError,
  GetProductsResponse,
  PatchProductsData,
  PatchProductsError,
  PatchProductsResponse,
  PostProductsData,
  PostProductsError,
  PostProductsResponse,
  GetProductsUuidData,
  GetProductsUuidError,
  GetProductsUuidResponse,
  PatchProductsUuidData,
  PatchProductsUuidError,
  PatchProductsUuidResponse,
  PostProductsUuidData,
  PostProductsUuidError,
  PostProductsUuidResponse,
  DeleteProductsUuidUuidData,
  DeleteProductsUuidUuidError,
  DeleteProductsUuidUuidResponse,
  GetProductsUuidUuidData,
  PatchProductsUuidUuidData,
  PatchProductsUuidUuidError,
  PatchProductsUuidUuidResponse,
  GetDraftUuidUuidData,
  PostProposalUuidData,
  PostProposalUuidError,
  PostProposalUuidResponse,
  DeleteProductsCodeData,
  DeleteProductsCodeError,
  DeleteProductsCodeResponse,
  GetProductsCodeData,
  PatchProductsCodeData,
  PatchProductsCodeError,
  PatchProductsCodeResponse,
  GetDraftCodeData,
  PostProposalData,
  PostProposalError,
  PostProposalResponse,
  GetPublishedProductsData,
  GetPublishedProductsError,
  GetPublishedProductsResponse,
  GetPublishedProductsCodeData,
  GetReferenceEntitiesData,
  PostReferenceEntityMediaFilesData,
  PostReferenceEntityMediaFilesError,
  PostReferenceEntityMediaFilesResponse,
  GetReferenceEntityMediaFilesCodeData,
  GetReferenceEntitiesCodeData,
  PatchReferenceEntityCodeData,
  PatchReferenceEntityCodeError,
  PatchReferenceEntityCodeResponse,
  GetReferenceEntitiesCodeAttributesData,
  GetReferenceEntityAttributesAttributeCodeOptionsData,
  GetReferenceEntityAttributesAttributeCodeOptionsCodeData,
  PatchReferenceEntityAttributesAttributeCodeOptionsCodeData,
  PatchReferenceEntityAttributesAttributeCodeOptionsCodeError,
  PatchReferenceEntityAttributesAttributeCodeOptionsCodeResponse,
  GetReferenceEntityAttributesCodeData,
  PatchReferenceEntityAttributesCodeData,
  PatchReferenceEntityAttributesCodeError,
  PatchReferenceEntityAttributesCodeResponse,
  GetReferenceEntityRecordsData,
  PatchReferenceEntityRecordsData,
  PatchReferenceEntityRecordsError,
  PatchReferenceEntityRecordsResponse,
  GetReferenceEntityRecordsCodeData,
  PatchReferenceEntityRecordsCodeData,
  PatchReferenceEntityRecordsCodeError,
  PatchReferenceEntityRecordsCodeResponse,
} from "../types.gen";
import {
  client,
  postToken,
  getEndpoints,
  getAssetCategories,
  patchAssetCategories,
  postAssetCategories,
  getAssetCategoriesCode,
  patchAssetCategoriesCode,
  getAssetFamilies,
  getAssets,
  patchAssets,
  deleteAssetsCode,
  getAssetsCode,
  patchAssetCode,
  getAssetFamiliesCodeAttributes,
  getAssetFamilyAttributesAttributeCodeOptions,
  getAssetAttributesAttributeCodeOptionsCode,
  patchAssetAttributesAttributeCodeOptionsCode,
  getAssetFamilyAttributesCode,
  patchAssetFamilyAttributesCode,
  getAssetFamilyCode,
  patchAssetFamilyCode,
  postAssetMediaFiles,
  getAssetMediaFilesCode,
  getAssetTags,
  getAssetTagsCode,
  patchAssetTagsCode,
  getPamAssets,
  patchPamAssets,
  postPamAssets,
  getReferenceFilesLocaleCode,
  postReferenceFilesLocaleCode,
  getReferenceFilesChannelCodeLocaleCodeDownload,
  getVariationFilesChannelCodeLocaleCode,
  postVariationFilesChannelCodeLocaleCode,
  getVariationFilesChannelCodeLocaleCodeDownload,
  getPamAssetsCode,
  patchPamAssetsCode,
  associationTypesGetList,
  severalAssociationTypesPatch,
  associationTypesPost,
  associationTypesGet,
  associationTypesPatch,
  attributeGroupsGetList,
  severalAttributeGroupsPatch,
  attributeGroupsPost,
  attributeGroupsGet,
  attributeGroupsPatch,
  getAttributes,
  patchAttributes,
  postAttributes,
  getAttributesAttributeCodeOptions,
  patchAttributesAttributeCodeOptions,
  postAttributesAttributeCodeOptions,
  getAttributesAttributeCodeOptionsCode,
  patchAttributesAttributeCodeOptionsCode,
  getAttributesCode,
  patchAttributesCode,
  getAppCatalogs,
  postAppCatalog,
  deleteAppCatalog,
  getAppCatalog,
  patchAppCatalog,
  getAppCatalogProductUuids,
  getAppCatalogProducts,
  getAppCatalogProductsUuid,
  getCategories,
  patchCategories,
  postCategories,
  getCategoriesCode,
  patchCategoriesCode,
  getCategoryMediaFilesCodeDownload,
  getChannels,
  severalChannelsPatch,
  channelsPost,
  getChannelsCode,
  channelsPatch,
  currenciesGetList,
  currenciesGet,
  getFamilies,
  patchFamilies,
  postFamilies,
  getFamiliesCode,
  patchFamiliesCode,
  getFamiliesFamilyCodeVariants,
  patchFamiliesFamilyCodeVariants,
  postFamiliesFamilyCodeVariants,
  getFamiliesFamilyCodeVariantsCode,
  patchFamiliesFamilyCodeVariantsCode,
  getLocales,
  getLocalesCode,
  measureFamiliesGetList,
  measureFamiliesGet,
  measurementFamiliesGetList,
  patchMeasurementFamilies,
  getMediaFiles,
  postMediaFiles,
  getMediaFilesCode,
  getMediaFilesCodeDownload,
  getProductModels,
  patchProductModels,
  postProductModels,
  deleteProductModelsCode,
  getProductModelsCode,
  patchProductModelsCode,
  getProductModelDraftCode,
  postProductModelProposal,
  getProducts,
  patchProducts,
  postProducts,
  getProductsUuid,
  patchProductsUuid,
  postProductsUuid,
  deleteProductsUuidUuid,
  getProductsUuidUuid,
  patchProductsUuidUuid,
  getDraftUuidUuid,
  postProposalUuid,
  deleteProductsCode,
  getProductsCode,
  patchProductsCode,
  getDraftCode,
  postProposal,
  getPublishedProducts,
  getPublishedProductsCode,
  getReferenceEntities,
  postReferenceEntityMediaFiles,
  getReferenceEntityMediaFilesCode,
  getReferenceEntitiesCode,
  patchReferenceEntityCode,
  getReferenceEntitiesCodeAttributes,
  getReferenceEntityAttributesAttributeCodeOptions,
  getReferenceEntityAttributesAttributeCodeOptionsCode,
  patchReferenceEntityAttributesAttributeCodeOptionsCode,
  getReferenceEntityAttributesCode,
  patchReferenceEntityAttributesCode,
  getReferenceEntityRecords,
  patchReferenceEntityRecords,
  getReferenceEntityRecordsCode,
  patchReferenceEntityRecordsCode,
  getSystemInformation,
} from "../sdk.gen";

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const postTokenQueryKey = (
  options: OptionsLegacyParser<PostTokenData>,
) => [createQueryKey("postToken", options)];

export const postTokenOptions = (
  options: OptionsLegacyParser<PostTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postTokenQueryKey(options),
  });
};

export const postTokenMutation = (
  options?: Partial<OptionsLegacyParser<PostTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostTokenResponse,
    PostTokenError,
    OptionsLegacyParser<PostTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getEndpointsQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("getEndpoints", options),
];

export const getEndpointsOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getEndpoints({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getEndpointsQueryKey(options),
  });
};

export const getAssetCategoriesQueryKey = (
  options?: OptionsLegacyParser<GetAssetCategoriesData>,
) => [createQueryKey("getAssetCategories", options)];

export const getAssetCategoriesOptions = (
  options?: OptionsLegacyParser<GetAssetCategoriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetCategories({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetCategoriesQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<
    QueryKey<OptionsLegacyParser>[0],
    "body" | "headers" | "path" | "query"
  >,
>(
  queryKey: QueryKey<OptionsLegacyParser>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path,
    };
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query,
    };
  }
  return params as unknown as typeof page;
};

export const getAssetCategoriesInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetAssetCategoriesData>,
): QueryKey<OptionsLegacyParser<GetAssetCategoriesData>> => [
  createQueryKey("getAssetCategories", options, true),
];

export const getAssetCategoriesInfiniteOptions = (
  options?: OptionsLegacyParser<GetAssetCategoriesData>,
) => {
  return infiniteQueryOptions<
    GetAssetCategoriesResponse,
    GetAssetCategoriesError,
    InfiniteData<GetAssetCategoriesResponse>,
    QueryKey<OptionsLegacyParser<GetAssetCategoriesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetAssetCategoriesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetAssetCategoriesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAssetCategories({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAssetCategoriesInfiniteQueryKey(options),
    },
  );
};

export const patchAssetCategoriesMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetCategoriesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetCategoriesResponse,
    PatchAssetCategoriesError,
    OptionsLegacyParser<PatchAssetCategoriesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetCategories({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAssetCategoriesQueryKey = (
  options?: OptionsLegacyParser<PostAssetCategoriesData>,
) => [createQueryKey("postAssetCategories", options)];

export const postAssetCategoriesOptions = (
  options?: OptionsLegacyParser<PostAssetCategoriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAssetCategories({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAssetCategoriesQueryKey(options),
  });
};

export const postAssetCategoriesMutation = (
  options?: Partial<OptionsLegacyParser<PostAssetCategoriesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostAssetCategoriesResponse,
    PostAssetCategoriesError,
    OptionsLegacyParser<PostAssetCategoriesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAssetCategories({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetCategoriesCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetCategoriesCodeData>,
) => [createQueryKey("getAssetCategoriesCode", options)];

export const getAssetCategoriesCodeOptions = (
  options: OptionsLegacyParser<GetAssetCategoriesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetCategoriesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetCategoriesCodeQueryKey(options),
  });
};

export const patchAssetCategoriesCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetCategoriesCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetCategoriesCodeResponse,
    PatchAssetCategoriesCodeError,
    OptionsLegacyParser<PatchAssetCategoriesCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetCategoriesCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetFamiliesQueryKey = (
  options?: OptionsLegacyParser<GetAssetFamiliesData>,
) => [createQueryKey("getAssetFamilies", options)];

export const getAssetFamiliesOptions = (
  options?: OptionsLegacyParser<GetAssetFamiliesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetFamilies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetFamiliesQueryKey(options),
  });
};

export const getAssetsQueryKey = (
  options: OptionsLegacyParser<GetAssetsData>,
) => [createQueryKey("getAssets", options)];

export const getAssetsOptions = (
  options: OptionsLegacyParser<GetAssetsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetsQueryKey(options),
  });
};

export const patchAssetsMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetsResponse,
    PatchAssetsError,
    OptionsLegacyParser<PatchAssetsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssets({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAssetsCodeMutation = (
  options?: Partial<OptionsLegacyParser<DeleteAssetsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAssetsCodeResponse,
    DeleteAssetsCodeError,
    OptionsLegacyParser<DeleteAssetsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAssetsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetsCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetsCodeData>,
) => [createQueryKey("getAssetsCode", options)];

export const getAssetsCodeOptions = (
  options: OptionsLegacyParser<GetAssetsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetsCodeQueryKey(options),
  });
};

export const patchAssetCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetCodeResponse,
    PatchAssetCodeError,
    OptionsLegacyParser<PatchAssetCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetFamiliesCodeAttributesQueryKey = (
  options: OptionsLegacyParser<GetAssetFamiliesCodeAttributesData>,
) => [createQueryKey("getAssetFamiliesCodeAttributes", options)];

export const getAssetFamiliesCodeAttributesOptions = (
  options: OptionsLegacyParser<GetAssetFamiliesCodeAttributesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetFamiliesCodeAttributes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetFamiliesCodeAttributesQueryKey(options),
  });
};

export const getAssetFamilyAttributesAttributeCodeOptionsQueryKey = (
  options: OptionsLegacyParser<GetAssetFamilyAttributesAttributeCodeOptionsData>,
) => [createQueryKey("getAssetFamilyAttributesAttributeCodeOptions", options)];

export const getAssetFamilyAttributesAttributeCodeOptionsOptions = (
  options: OptionsLegacyParser<GetAssetFamilyAttributesAttributeCodeOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetFamilyAttributesAttributeCodeOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetFamilyAttributesAttributeCodeOptionsQueryKey(options),
  });
};

export const getAssetAttributesAttributeCodeOptionsCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetAttributesAttributeCodeOptionsCodeData>,
) => [createQueryKey("getAssetAttributesAttributeCodeOptionsCode", options)];

export const getAssetAttributesAttributeCodeOptionsCodeOptions = (
  options: OptionsLegacyParser<GetAssetAttributesAttributeCodeOptionsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetAttributesAttributeCodeOptionsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetAttributesAttributeCodeOptionsCodeQueryKey(options),
  });
};

export const patchAssetAttributesAttributeCodeOptionsCodeMutation = (
  options?: Partial<
    OptionsLegacyParser<PatchAssetAttributesAttributeCodeOptionsCodeData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetAttributesAttributeCodeOptionsCodeResponse,
    PatchAssetAttributesAttributeCodeOptionsCodeError,
    OptionsLegacyParser<PatchAssetAttributesAttributeCodeOptionsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetAttributesAttributeCodeOptionsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetFamilyAttributesCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetFamilyAttributesCodeData>,
) => [createQueryKey("getAssetFamilyAttributesCode", options)];

export const getAssetFamilyAttributesCodeOptions = (
  options: OptionsLegacyParser<GetAssetFamilyAttributesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetFamilyAttributesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetFamilyAttributesCodeQueryKey(options),
  });
};

export const patchAssetFamilyAttributesCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetFamilyAttributesCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetFamilyAttributesCodeResponse,
    PatchAssetFamilyAttributesCodeError,
    OptionsLegacyParser<PatchAssetFamilyAttributesCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetFamilyAttributesCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetFamilyCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetFamilyCodeData>,
) => [createQueryKey("getAssetFamilyCode", options)];

export const getAssetFamilyCodeOptions = (
  options: OptionsLegacyParser<GetAssetFamilyCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetFamilyCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetFamilyCodeQueryKey(options),
  });
};

export const patchAssetFamilyCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetFamilyCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetFamilyCodeResponse,
    PatchAssetFamilyCodeError,
    OptionsLegacyParser<PatchAssetFamilyCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetFamilyCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAssetMediaFilesQueryKey = (
  options: OptionsLegacyParser<PostAssetMediaFilesData>,
) => [createQueryKey("postAssetMediaFiles", options)];

export const postAssetMediaFilesOptions = (
  options: OptionsLegacyParser<PostAssetMediaFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAssetMediaFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAssetMediaFilesQueryKey(options),
  });
};

export const postAssetMediaFilesMutation = (
  options?: Partial<OptionsLegacyParser<PostAssetMediaFilesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostAssetMediaFilesResponse,
    PostAssetMediaFilesError,
    OptionsLegacyParser<PostAssetMediaFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAssetMediaFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAssetMediaFilesCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetMediaFilesCodeData>,
) => [createQueryKey("getAssetMediaFilesCode", options)];

export const getAssetMediaFilesCodeOptions = (
  options: OptionsLegacyParser<GetAssetMediaFilesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetMediaFilesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetMediaFilesCodeQueryKey(options),
  });
};

export const getAssetTagsQueryKey = (
  options?: OptionsLegacyParser<GetAssetTagsData>,
) => [createQueryKey("getAssetTags", options)];

export const getAssetTagsOptions = (
  options?: OptionsLegacyParser<GetAssetTagsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetTags({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetTagsQueryKey(options),
  });
};

export const getAssetTagsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetAssetTagsData>,
): QueryKey<OptionsLegacyParser<GetAssetTagsData>> => [
  createQueryKey("getAssetTags", options, true),
];

export const getAssetTagsInfiniteOptions = (
  options?: OptionsLegacyParser<GetAssetTagsData>,
) => {
  return infiniteQueryOptions<
    GetAssetTagsResponse,
    GetAssetTagsError,
    InfiniteData<GetAssetTagsResponse>,
    QueryKey<OptionsLegacyParser<GetAssetTagsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetAssetTagsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetAssetTagsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAssetTags({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAssetTagsInfiniteQueryKey(options),
    },
  );
};

export const getAssetTagsCodeQueryKey = (
  options: OptionsLegacyParser<GetAssetTagsCodeData>,
) => [createQueryKey("getAssetTagsCode", options)];

export const getAssetTagsCodeOptions = (
  options: OptionsLegacyParser<GetAssetTagsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAssetTagsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAssetTagsCodeQueryKey(options),
  });
};

export const patchAssetTagsCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchAssetTagsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAssetTagsCodeResponse,
    PatchAssetTagsCodeError,
    OptionsLegacyParser<PatchAssetTagsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAssetTagsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getPamAssetsQueryKey = (
  options?: OptionsLegacyParser<GetPamAssetsData>,
) => [createQueryKey("getPamAssets", options)];

export const getPamAssetsOptions = (
  options?: OptionsLegacyParser<GetPamAssetsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPamAssets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPamAssetsQueryKey(options),
  });
};

export const getPamAssetsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetPamAssetsData>,
): QueryKey<OptionsLegacyParser<GetPamAssetsData>> => [
  createQueryKey("getPamAssets", options, true),
];

export const getPamAssetsInfiniteOptions = (
  options?: OptionsLegacyParser<GetPamAssetsData>,
) => {
  return infiniteQueryOptions<
    GetPamAssetsResponse,
    GetPamAssetsError,
    InfiniteData<GetPamAssetsResponse>,
    QueryKey<OptionsLegacyParser<GetPamAssetsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetPamAssetsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetPamAssetsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getPamAssets({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getPamAssetsInfiniteQueryKey(options),
    },
  );
};

export const patchPamAssetsMutation = (
  options?: Partial<OptionsLegacyParser<PatchPamAssetsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchPamAssetsResponse,
    PatchPamAssetsError,
    OptionsLegacyParser<PatchPamAssetsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchPamAssets({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postPamAssetsQueryKey = (
  options?: OptionsLegacyParser<PostPamAssetsData>,
) => [createQueryKey("postPamAssets", options)];

export const postPamAssetsOptions = (
  options?: OptionsLegacyParser<PostPamAssetsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postPamAssets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postPamAssetsQueryKey(options),
  });
};

export const postPamAssetsMutation = (
  options?: Partial<OptionsLegacyParser<PostPamAssetsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostPamAssetsResponse,
    PostPamAssetsError,
    OptionsLegacyParser<PostPamAssetsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postPamAssets({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceFilesLocaleCodeQueryKey = (
  options: OptionsLegacyParser<GetReferenceFilesLocaleCodeData>,
) => [createQueryKey("getReferenceFilesLocaleCode", options)];

export const getReferenceFilesLocaleCodeOptions = (
  options: OptionsLegacyParser<GetReferenceFilesLocaleCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceFilesLocaleCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceFilesLocaleCodeQueryKey(options),
  });
};

export const postReferenceFilesLocaleCodeQueryKey = (
  options: OptionsLegacyParser<PostReferenceFilesLocaleCodeData>,
) => [createQueryKey("postReferenceFilesLocaleCode", options)];

export const postReferenceFilesLocaleCodeOptions = (
  options: OptionsLegacyParser<PostReferenceFilesLocaleCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postReferenceFilesLocaleCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postReferenceFilesLocaleCodeQueryKey(options),
  });
};

export const postReferenceFilesLocaleCodeMutation = (
  options?: Partial<OptionsLegacyParser<PostReferenceFilesLocaleCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostReferenceFilesLocaleCodeResponse,
    PostReferenceFilesLocaleCodeError,
    OptionsLegacyParser<PostReferenceFilesLocaleCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postReferenceFilesLocaleCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceFilesChannelCodeLocaleCodeDownloadQueryKey = (
  options: OptionsLegacyParser<GetReferenceFilesChannelCodeLocaleCodeDownloadData>,
) => [
  createQueryKey("getReferenceFilesChannelCodeLocaleCodeDownload", options),
];

export const getReferenceFilesChannelCodeLocaleCodeDownloadOptions = (
  options: OptionsLegacyParser<GetReferenceFilesChannelCodeLocaleCodeDownloadData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceFilesChannelCodeLocaleCodeDownload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceFilesChannelCodeLocaleCodeDownloadQueryKey(options),
  });
};

export const getVariationFilesChannelCodeLocaleCodeQueryKey = (
  options: OptionsLegacyParser<GetVariationFilesChannelCodeLocaleCodeData>,
) => [createQueryKey("getVariationFilesChannelCodeLocaleCode", options)];

export const getVariationFilesChannelCodeLocaleCodeOptions = (
  options: OptionsLegacyParser<GetVariationFilesChannelCodeLocaleCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVariationFilesChannelCodeLocaleCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getVariationFilesChannelCodeLocaleCodeQueryKey(options),
  });
};

export const postVariationFilesChannelCodeLocaleCodeQueryKey = (
  options: OptionsLegacyParser<PostVariationFilesChannelCodeLocaleCodeData>,
) => [createQueryKey("postVariationFilesChannelCodeLocaleCode", options)];

export const postVariationFilesChannelCodeLocaleCodeOptions = (
  options: OptionsLegacyParser<PostVariationFilesChannelCodeLocaleCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postVariationFilesChannelCodeLocaleCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postVariationFilesChannelCodeLocaleCodeQueryKey(options),
  });
};

export const postVariationFilesChannelCodeLocaleCodeMutation = (
  options?: Partial<
    OptionsLegacyParser<PostVariationFilesChannelCodeLocaleCodeData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PostVariationFilesChannelCodeLocaleCodeResponse,
    PostVariationFilesChannelCodeLocaleCodeError,
    OptionsLegacyParser<PostVariationFilesChannelCodeLocaleCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postVariationFilesChannelCodeLocaleCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getVariationFilesChannelCodeLocaleCodeDownloadQueryKey = (
  options: OptionsLegacyParser<GetVariationFilesChannelCodeLocaleCodeDownloadData>,
) => [
  createQueryKey("getVariationFilesChannelCodeLocaleCodeDownload", options),
];

export const getVariationFilesChannelCodeLocaleCodeDownloadOptions = (
  options: OptionsLegacyParser<GetVariationFilesChannelCodeLocaleCodeDownloadData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getVariationFilesChannelCodeLocaleCodeDownload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getVariationFilesChannelCodeLocaleCodeDownloadQueryKey(options),
  });
};

export const getPamAssetsCodeQueryKey = (
  options: OptionsLegacyParser<GetPamAssetsCodeData>,
) => [createQueryKey("getPamAssetsCode", options)];

export const getPamAssetsCodeOptions = (
  options: OptionsLegacyParser<GetPamAssetsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPamAssetsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPamAssetsCodeQueryKey(options),
  });
};

export const patchPamAssetsCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchPamAssetsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchPamAssetsCodeResponse,
    PatchPamAssetsCodeError,
    OptionsLegacyParser<PatchPamAssetsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchPamAssetsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const associationTypesGetListQueryKey = (
  options?: OptionsLegacyParser<AssociationTypesGetListData>,
) => [createQueryKey("associationTypesGetList", options)];

export const associationTypesGetListOptions = (
  options?: OptionsLegacyParser<AssociationTypesGetListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await associationTypesGetList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: associationTypesGetListQueryKey(options),
  });
};

export const associationTypesGetListInfiniteQueryKey = (
  options?: OptionsLegacyParser<AssociationTypesGetListData>,
): QueryKey<OptionsLegacyParser<AssociationTypesGetListData>> => [
  createQueryKey("associationTypesGetList", options, true),
];

export const associationTypesGetListInfiniteOptions = (
  options?: OptionsLegacyParser<AssociationTypesGetListData>,
) => {
  return infiniteQueryOptions<
    AssociationTypesGetListResponse,
    AssociationTypesGetListError,
    InfiniteData<AssociationTypesGetListResponse>,
    QueryKey<OptionsLegacyParser<AssociationTypesGetListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AssociationTypesGetListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AssociationTypesGetListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await associationTypesGetList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: associationTypesGetListInfiniteQueryKey(options),
    },
  );
};

export const severalAssociationTypesPatchMutation = (
  options?: Partial<OptionsLegacyParser<SeveralAssociationTypesPatchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SeveralAssociationTypesPatchResponse,
    SeveralAssociationTypesPatchError,
    OptionsLegacyParser<SeveralAssociationTypesPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await severalAssociationTypesPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const associationTypesPostQueryKey = (
  options?: OptionsLegacyParser<AssociationTypesPostData>,
) => [createQueryKey("associationTypesPost", options)];

export const associationTypesPostOptions = (
  options?: OptionsLegacyParser<AssociationTypesPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await associationTypesPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: associationTypesPostQueryKey(options),
  });
};

export const associationTypesPostMutation = (
  options?: Partial<OptionsLegacyParser<AssociationTypesPostData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AssociationTypesPostResponse,
    AssociationTypesPostError,
    OptionsLegacyParser<AssociationTypesPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await associationTypesPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const associationTypesGetQueryKey = (
  options: OptionsLegacyParser<AssociationTypesGetData>,
) => [createQueryKey("associationTypesGet", options)];

export const associationTypesGetOptions = (
  options: OptionsLegacyParser<AssociationTypesGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await associationTypesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: associationTypesGetQueryKey(options),
  });
};

export const associationTypesPatchMutation = (
  options?: Partial<OptionsLegacyParser<AssociationTypesPatchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AssociationTypesPatchResponse,
    AssociationTypesPatchError,
    OptionsLegacyParser<AssociationTypesPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await associationTypesPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const attributeGroupsGetListQueryKey = (
  options?: OptionsLegacyParser<AttributeGroupsGetListData>,
) => [createQueryKey("attributeGroupsGetList", options)];

export const attributeGroupsGetListOptions = (
  options?: OptionsLegacyParser<AttributeGroupsGetListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await attributeGroupsGetList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: attributeGroupsGetListQueryKey(options),
  });
};

export const attributeGroupsGetListInfiniteQueryKey = (
  options?: OptionsLegacyParser<AttributeGroupsGetListData>,
): QueryKey<OptionsLegacyParser<AttributeGroupsGetListData>> => [
  createQueryKey("attributeGroupsGetList", options, true),
];

export const attributeGroupsGetListInfiniteOptions = (
  options?: OptionsLegacyParser<AttributeGroupsGetListData>,
) => {
  return infiniteQueryOptions<
    AttributeGroupsGetListResponse,
    AttributeGroupsGetListError,
    InfiniteData<AttributeGroupsGetListResponse>,
    QueryKey<OptionsLegacyParser<AttributeGroupsGetListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AttributeGroupsGetListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AttributeGroupsGetListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await attributeGroupsGetList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: attributeGroupsGetListInfiniteQueryKey(options),
    },
  );
};

export const severalAttributeGroupsPatchMutation = (
  options?: Partial<OptionsLegacyParser<SeveralAttributeGroupsPatchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SeveralAttributeGroupsPatchResponse,
    SeveralAttributeGroupsPatchError,
    OptionsLegacyParser<SeveralAttributeGroupsPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await severalAttributeGroupsPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const attributeGroupsPostQueryKey = (
  options?: OptionsLegacyParser<AttributeGroupsPostData>,
) => [createQueryKey("attributeGroupsPost", options)];

export const attributeGroupsPostOptions = (
  options?: OptionsLegacyParser<AttributeGroupsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await attributeGroupsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: attributeGroupsPostQueryKey(options),
  });
};

export const attributeGroupsPostMutation = (
  options?: Partial<OptionsLegacyParser<AttributeGroupsPostData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AttributeGroupsPostResponse,
    AttributeGroupsPostError,
    OptionsLegacyParser<AttributeGroupsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await attributeGroupsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const attributeGroupsGetQueryKey = (
  options: OptionsLegacyParser<AttributeGroupsGetData>,
) => [createQueryKey("attributeGroupsGet", options)];

export const attributeGroupsGetOptions = (
  options: OptionsLegacyParser<AttributeGroupsGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await attributeGroupsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: attributeGroupsGetQueryKey(options),
  });
};

export const attributeGroupsPatchMutation = (
  options?: Partial<OptionsLegacyParser<AttributeGroupsPatchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AttributeGroupsPatchResponse,
    AttributeGroupsPatchError,
    OptionsLegacyParser<AttributeGroupsPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await attributeGroupsPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAttributesQueryKey = (
  options?: OptionsLegacyParser<GetAttributesData>,
) => [createQueryKey("getAttributes", options)];

export const getAttributesOptions = (
  options?: OptionsLegacyParser<GetAttributesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAttributes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAttributesQueryKey(options),
  });
};

export const getAttributesInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetAttributesData>,
): QueryKey<OptionsLegacyParser<GetAttributesData>> => [
  createQueryKey("getAttributes", options, true),
];

export const getAttributesInfiniteOptions = (
  options?: OptionsLegacyParser<GetAttributesData>,
) => {
  return infiniteQueryOptions<
    GetAttributesResponse,
    GetAttributesError,
    InfiniteData<GetAttributesResponse>,
    QueryKey<OptionsLegacyParser<GetAttributesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetAttributesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetAttributesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAttributes({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAttributesInfiniteQueryKey(options),
    },
  );
};

export const patchAttributesMutation = (
  options?: Partial<OptionsLegacyParser<PatchAttributesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAttributesResponse,
    PatchAttributesError,
    OptionsLegacyParser<PatchAttributesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAttributes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAttributesQueryKey = (
  options?: OptionsLegacyParser<PostAttributesData>,
) => [createQueryKey("postAttributes", options)];

export const postAttributesOptions = (
  options?: OptionsLegacyParser<PostAttributesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAttributes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAttributesQueryKey(options),
  });
};

export const postAttributesMutation = (
  options?: Partial<OptionsLegacyParser<PostAttributesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostAttributesResponse,
    PostAttributesError,
    OptionsLegacyParser<PostAttributesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAttributes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAttributesAttributeCodeOptionsQueryKey = (
  options: OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>,
) => [createQueryKey("getAttributesAttributeCodeOptions", options)];

export const getAttributesAttributeCodeOptionsOptions = (
  options: OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAttributesAttributeCodeOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAttributesAttributeCodeOptionsQueryKey(options),
  });
};

export const getAttributesAttributeCodeOptionsInfiniteQueryKey = (
  options: OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>,
): QueryKey<OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>> => [
  createQueryKey("getAttributesAttributeCodeOptions", options, true),
];

export const getAttributesAttributeCodeOptionsInfiniteOptions = (
  options: OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>,
) => {
  return infiniteQueryOptions<
    GetAttributesAttributeCodeOptionsResponse,
    GetAttributesAttributeCodeOptionsError,
    InfiniteData<GetAttributesAttributeCodeOptionsResponse>,
    QueryKey<OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<
            OptionsLegacyParser<GetAttributesAttributeCodeOptionsData>
          >[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAttributesAttributeCodeOptions({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAttributesAttributeCodeOptionsInfiniteQueryKey(options),
    },
  );
};

export const patchAttributesAttributeCodeOptionsMutation = (
  options?: Partial<
    OptionsLegacyParser<PatchAttributesAttributeCodeOptionsData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAttributesAttributeCodeOptionsResponse,
    PatchAttributesAttributeCodeOptionsError,
    OptionsLegacyParser<PatchAttributesAttributeCodeOptionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAttributesAttributeCodeOptions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAttributesAttributeCodeOptionsQueryKey = (
  options: OptionsLegacyParser<PostAttributesAttributeCodeOptionsData>,
) => [createQueryKey("postAttributesAttributeCodeOptions", options)];

export const postAttributesAttributeCodeOptionsOptions = (
  options: OptionsLegacyParser<PostAttributesAttributeCodeOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAttributesAttributeCodeOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAttributesAttributeCodeOptionsQueryKey(options),
  });
};

export const postAttributesAttributeCodeOptionsMutation = (
  options?: Partial<
    OptionsLegacyParser<PostAttributesAttributeCodeOptionsData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PostAttributesAttributeCodeOptionsResponse,
    PostAttributesAttributeCodeOptionsError,
    OptionsLegacyParser<PostAttributesAttributeCodeOptionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAttributesAttributeCodeOptions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAttributesAttributeCodeOptionsCodeQueryKey = (
  options: OptionsLegacyParser<GetAttributesAttributeCodeOptionsCodeData>,
) => [createQueryKey("getAttributesAttributeCodeOptionsCode", options)];

export const getAttributesAttributeCodeOptionsCodeOptions = (
  options: OptionsLegacyParser<GetAttributesAttributeCodeOptionsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAttributesAttributeCodeOptionsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAttributesAttributeCodeOptionsCodeQueryKey(options),
  });
};

export const patchAttributesAttributeCodeOptionsCodeMutation = (
  options?: Partial<
    OptionsLegacyParser<PatchAttributesAttributeCodeOptionsCodeData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAttributesAttributeCodeOptionsCodeResponse,
    PatchAttributesAttributeCodeOptionsCodeError,
    OptionsLegacyParser<PatchAttributesAttributeCodeOptionsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAttributesAttributeCodeOptionsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAttributesCodeQueryKey = (
  options: OptionsLegacyParser<GetAttributesCodeData>,
) => [createQueryKey("getAttributesCode", options)];

export const getAttributesCodeOptions = (
  options: OptionsLegacyParser<GetAttributesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAttributesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAttributesCodeQueryKey(options),
  });
};

export const patchAttributesCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchAttributesCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAttributesCodeResponse,
    PatchAttributesCodeError,
    OptionsLegacyParser<PatchAttributesCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAttributesCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAppCatalogsQueryKey = (
  options?: OptionsLegacyParser<GetAppCatalogsData>,
) => [createQueryKey("getAppCatalogs", options)];

export const getAppCatalogsOptions = (
  options?: OptionsLegacyParser<GetAppCatalogsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppCatalogs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppCatalogsQueryKey(options),
  });
};

export const getAppCatalogsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetAppCatalogsData>,
): QueryKey<OptionsLegacyParser<GetAppCatalogsData>> => [
  createQueryKey("getAppCatalogs", options, true),
];

export const getAppCatalogsInfiniteOptions = (
  options?: OptionsLegacyParser<GetAppCatalogsData>,
) => {
  return infiniteQueryOptions<
    GetAppCatalogsResponse,
    GetAppCatalogsError,
    InfiniteData<GetAppCatalogsResponse>,
    QueryKey<OptionsLegacyParser<GetAppCatalogsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetAppCatalogsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetAppCatalogsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getAppCatalogs({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getAppCatalogsInfiniteQueryKey(options),
    },
  );
};

export const postAppCatalogQueryKey = (
  options?: OptionsLegacyParser<PostAppCatalogData>,
) => [createQueryKey("postAppCatalog", options)];

export const postAppCatalogOptions = (
  options?: OptionsLegacyParser<PostAppCatalogData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAppCatalog({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAppCatalogQueryKey(options),
  });
};

export const postAppCatalogMutation = (
  options?: Partial<OptionsLegacyParser<PostAppCatalogData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostAppCatalogResponse,
    PostAppCatalogError,
    OptionsLegacyParser<PostAppCatalogData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAppCatalog({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteAppCatalogMutation = (
  options?: Partial<OptionsLegacyParser<DeleteAppCatalogData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAppCatalogResponse,
    DeleteAppCatalogError,
    OptionsLegacyParser<DeleteAppCatalogData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAppCatalog({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAppCatalogQueryKey = (
  options: OptionsLegacyParser<GetAppCatalogData>,
) => [createQueryKey("getAppCatalog", options)];

export const getAppCatalogOptions = (
  options: OptionsLegacyParser<GetAppCatalogData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppCatalog({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppCatalogQueryKey(options),
  });
};

export const patchAppCatalogMutation = (
  options?: Partial<OptionsLegacyParser<PatchAppCatalogData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchAppCatalogResponse,
    PatchAppCatalogError,
    OptionsLegacyParser<PatchAppCatalogData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchAppCatalog({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getAppCatalogProductUuidsQueryKey = (
  options: OptionsLegacyParser<GetAppCatalogProductUuidsData>,
) => [createQueryKey("getAppCatalogProductUuids", options)];

export const getAppCatalogProductUuidsOptions = (
  options: OptionsLegacyParser<GetAppCatalogProductUuidsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppCatalogProductUuids({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppCatalogProductUuidsQueryKey(options),
  });
};

export const getAppCatalogProductsQueryKey = (
  options: OptionsLegacyParser<GetAppCatalogProductsData>,
) => [createQueryKey("getAppCatalogProducts", options)];

export const getAppCatalogProductsOptions = (
  options: OptionsLegacyParser<GetAppCatalogProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppCatalogProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppCatalogProductsQueryKey(options),
  });
};

export const getAppCatalogProductsUuidQueryKey = (
  options: OptionsLegacyParser<GetAppCatalogProductsUuidData>,
) => [createQueryKey("getAppCatalogProductsUuid", options)];

export const getAppCatalogProductsUuidOptions = (
  options: OptionsLegacyParser<GetAppCatalogProductsUuidData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAppCatalogProductsUuid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAppCatalogProductsUuidQueryKey(options),
  });
};

export const getCategoriesQueryKey = (
  options?: OptionsLegacyParser<GetCategoriesData>,
) => [createQueryKey("getCategories", options)];

export const getCategoriesOptions = (
  options?: OptionsLegacyParser<GetCategoriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCategories({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCategoriesQueryKey(options),
  });
};

export const getCategoriesInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetCategoriesData>,
): QueryKey<OptionsLegacyParser<GetCategoriesData>> => [
  createQueryKey("getCategories", options, true),
];

export const getCategoriesInfiniteOptions = (
  options?: OptionsLegacyParser<GetCategoriesData>,
) => {
  return infiniteQueryOptions<
    GetCategoriesResponse,
    GetCategoriesError,
    InfiniteData<GetCategoriesResponse>,
    QueryKey<OptionsLegacyParser<GetCategoriesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetCategoriesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetCategoriesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getCategories({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getCategoriesInfiniteQueryKey(options),
    },
  );
};

export const patchCategoriesMutation = (
  options?: Partial<OptionsLegacyParser<PatchCategoriesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchCategoriesResponse,
    PatchCategoriesError,
    OptionsLegacyParser<PatchCategoriesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchCategories({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postCategoriesQueryKey = (
  options?: OptionsLegacyParser<PostCategoriesData>,
) => [createQueryKey("postCategories", options)];

export const postCategoriesOptions = (
  options?: OptionsLegacyParser<PostCategoriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCategories({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCategoriesQueryKey(options),
  });
};

export const postCategoriesMutation = (
  options?: Partial<OptionsLegacyParser<PostCategoriesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostCategoriesResponse,
    PostCategoriesError,
    OptionsLegacyParser<PostCategoriesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCategories({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCategoriesCodeQueryKey = (
  options: OptionsLegacyParser<GetCategoriesCodeData>,
) => [createQueryKey("getCategoriesCode", options)];

export const getCategoriesCodeOptions = (
  options: OptionsLegacyParser<GetCategoriesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCategoriesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCategoriesCodeQueryKey(options),
  });
};

export const patchCategoriesCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchCategoriesCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchCategoriesCodeResponse,
    PatchCategoriesCodeError,
    OptionsLegacyParser<PatchCategoriesCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchCategoriesCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCategoryMediaFilesCodeDownloadQueryKey = (
  options: OptionsLegacyParser<GetCategoryMediaFilesCodeDownloadData>,
) => [createQueryKey("getCategoryMediaFilesCodeDownload", options)];

export const getCategoryMediaFilesCodeDownloadOptions = (
  options: OptionsLegacyParser<GetCategoryMediaFilesCodeDownloadData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCategoryMediaFilesCodeDownload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCategoryMediaFilesCodeDownloadQueryKey(options),
  });
};

export const getChannelsQueryKey = (
  options?: OptionsLegacyParser<GetChannelsData>,
) => [createQueryKey("getChannels", options)];

export const getChannelsOptions = (
  options?: OptionsLegacyParser<GetChannelsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChannels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChannelsQueryKey(options),
  });
};

export const getChannelsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetChannelsData>,
): QueryKey<OptionsLegacyParser<GetChannelsData>> => [
  createQueryKey("getChannels", options, true),
];

export const getChannelsInfiniteOptions = (
  options?: OptionsLegacyParser<GetChannelsData>,
) => {
  return infiniteQueryOptions<
    GetChannelsResponse,
    GetChannelsError,
    InfiniteData<GetChannelsResponse>,
    QueryKey<OptionsLegacyParser<GetChannelsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetChannelsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetChannelsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getChannels({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getChannelsInfiniteQueryKey(options),
    },
  );
};

export const severalChannelsPatchMutation = (
  options?: Partial<OptionsLegacyParser<SeveralChannelsPatchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    SeveralChannelsPatchResponse,
    SeveralChannelsPatchError,
    OptionsLegacyParser<SeveralChannelsPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await severalChannelsPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const channelsPostQueryKey = (
  options?: OptionsLegacyParser<ChannelsPostData>,
) => [createQueryKey("channelsPost", options)];

export const channelsPostOptions = (
  options?: OptionsLegacyParser<ChannelsPostData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await channelsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: channelsPostQueryKey(options),
  });
};

export const channelsPostMutation = (
  options?: Partial<OptionsLegacyParser<ChannelsPostData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ChannelsPostResponse,
    ChannelsPostError,
    OptionsLegacyParser<ChannelsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await channelsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getChannelsCodeQueryKey = (
  options: OptionsLegacyParser<GetChannelsCodeData>,
) => [createQueryKey("getChannelsCode", options)];

export const getChannelsCodeOptions = (
  options: OptionsLegacyParser<GetChannelsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChannelsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getChannelsCodeQueryKey(options),
  });
};

export const channelsPatchMutation = (
  options?: Partial<OptionsLegacyParser<ChannelsPatchData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ChannelsPatchResponse,
    ChannelsPatchError,
    OptionsLegacyParser<ChannelsPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await channelsPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const currenciesGetListQueryKey = (
  options?: OptionsLegacyParser<CurrenciesGetListData>,
) => [createQueryKey("currenciesGetList", options)];

export const currenciesGetListOptions = (
  options?: OptionsLegacyParser<CurrenciesGetListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await currenciesGetList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: currenciesGetListQueryKey(options),
  });
};

export const currenciesGetListInfiniteQueryKey = (
  options?: OptionsLegacyParser<CurrenciesGetListData>,
): QueryKey<OptionsLegacyParser<CurrenciesGetListData>> => [
  createQueryKey("currenciesGetList", options, true),
];

export const currenciesGetListInfiniteOptions = (
  options?: OptionsLegacyParser<CurrenciesGetListData>,
) => {
  return infiniteQueryOptions<
    CurrenciesGetListResponse,
    CurrenciesGetListError,
    InfiniteData<CurrenciesGetListResponse>,
    QueryKey<OptionsLegacyParser<CurrenciesGetListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<CurrenciesGetListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<CurrenciesGetListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await currenciesGetList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: currenciesGetListInfiniteQueryKey(options),
    },
  );
};

export const currenciesGetQueryKey = (
  options: OptionsLegacyParser<CurrenciesGetData>,
) => [createQueryKey("currenciesGet", options)];

export const currenciesGetOptions = (
  options: OptionsLegacyParser<CurrenciesGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await currenciesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: currenciesGetQueryKey(options),
  });
};

export const getFamiliesQueryKey = (
  options?: OptionsLegacyParser<GetFamiliesData>,
) => [createQueryKey("getFamilies", options)];

export const getFamiliesOptions = (
  options?: OptionsLegacyParser<GetFamiliesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFamilies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFamiliesQueryKey(options),
  });
};

export const getFamiliesInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetFamiliesData>,
): QueryKey<OptionsLegacyParser<GetFamiliesData>> => [
  createQueryKey("getFamilies", options, true),
];

export const getFamiliesInfiniteOptions = (
  options?: OptionsLegacyParser<GetFamiliesData>,
) => {
  return infiniteQueryOptions<
    GetFamiliesResponse,
    GetFamiliesError,
    InfiniteData<GetFamiliesResponse>,
    QueryKey<OptionsLegacyParser<GetFamiliesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetFamiliesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetFamiliesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getFamilies({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getFamiliesInfiniteQueryKey(options),
    },
  );
};

export const patchFamiliesMutation = (
  options?: Partial<OptionsLegacyParser<PatchFamiliesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchFamiliesResponse,
    PatchFamiliesError,
    OptionsLegacyParser<PatchFamiliesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchFamilies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postFamiliesQueryKey = (
  options?: OptionsLegacyParser<PostFamiliesData>,
) => [createQueryKey("postFamilies", options)];

export const postFamiliesOptions = (
  options?: OptionsLegacyParser<PostFamiliesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postFamilies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postFamiliesQueryKey(options),
  });
};

export const postFamiliesMutation = (
  options?: Partial<OptionsLegacyParser<PostFamiliesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostFamiliesResponse,
    PostFamiliesError,
    OptionsLegacyParser<PostFamiliesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postFamilies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFamiliesCodeQueryKey = (
  options: OptionsLegacyParser<GetFamiliesCodeData>,
) => [createQueryKey("getFamiliesCode", options)];

export const getFamiliesCodeOptions = (
  options: OptionsLegacyParser<GetFamiliesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFamiliesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFamiliesCodeQueryKey(options),
  });
};

export const patchFamiliesCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchFamiliesCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchFamiliesCodeResponse,
    PatchFamiliesCodeError,
    OptionsLegacyParser<PatchFamiliesCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchFamiliesCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFamiliesFamilyCodeVariantsQueryKey = (
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>,
) => [createQueryKey("getFamiliesFamilyCodeVariants", options)];

export const getFamiliesFamilyCodeVariantsOptions = (
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFamiliesFamilyCodeVariants({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFamiliesFamilyCodeVariantsQueryKey(options),
  });
};

export const getFamiliesFamilyCodeVariantsInfiniteQueryKey = (
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>,
): QueryKey<OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>> => [
  createQueryKey("getFamiliesFamilyCodeVariants", options, true),
];

export const getFamiliesFamilyCodeVariantsInfiniteOptions = (
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>,
) => {
  return infiniteQueryOptions<
    GetFamiliesFamilyCodeVariantsResponse,
    GetFamiliesFamilyCodeVariantsError,
    InfiniteData<GetFamiliesFamilyCodeVariantsResponse>,
    QueryKey<OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetFamiliesFamilyCodeVariantsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getFamiliesFamilyCodeVariants({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getFamiliesFamilyCodeVariantsInfiniteQueryKey(options),
    },
  );
};

export const patchFamiliesFamilyCodeVariantsMutation = (
  options?: Partial<OptionsLegacyParser<PatchFamiliesFamilyCodeVariantsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchFamiliesFamilyCodeVariantsResponse,
    PatchFamiliesFamilyCodeVariantsError,
    OptionsLegacyParser<PatchFamiliesFamilyCodeVariantsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchFamiliesFamilyCodeVariants({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postFamiliesFamilyCodeVariantsQueryKey = (
  options: OptionsLegacyParser<PostFamiliesFamilyCodeVariantsData>,
) => [createQueryKey("postFamiliesFamilyCodeVariants", options)];

export const postFamiliesFamilyCodeVariantsOptions = (
  options: OptionsLegacyParser<PostFamiliesFamilyCodeVariantsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postFamiliesFamilyCodeVariants({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postFamiliesFamilyCodeVariantsQueryKey(options),
  });
};

export const postFamiliesFamilyCodeVariantsMutation = (
  options?: Partial<OptionsLegacyParser<PostFamiliesFamilyCodeVariantsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostFamiliesFamilyCodeVariantsResponse,
    PostFamiliesFamilyCodeVariantsError,
    OptionsLegacyParser<PostFamiliesFamilyCodeVariantsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postFamiliesFamilyCodeVariants({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFamiliesFamilyCodeVariantsCodeQueryKey = (
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsCodeData>,
) => [createQueryKey("getFamiliesFamilyCodeVariantsCode", options)];

export const getFamiliesFamilyCodeVariantsCodeOptions = (
  options: OptionsLegacyParser<GetFamiliesFamilyCodeVariantsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFamiliesFamilyCodeVariantsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFamiliesFamilyCodeVariantsCodeQueryKey(options),
  });
};

export const patchFamiliesFamilyCodeVariantsCodeMutation = (
  options?: Partial<
    OptionsLegacyParser<PatchFamiliesFamilyCodeVariantsCodeData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PatchFamiliesFamilyCodeVariantsCodeResponse,
    PatchFamiliesFamilyCodeVariantsCodeError,
    OptionsLegacyParser<PatchFamiliesFamilyCodeVariantsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchFamiliesFamilyCodeVariantsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getLocalesQueryKey = (
  options?: OptionsLegacyParser<GetLocalesData>,
) => [createQueryKey("getLocales", options)];

export const getLocalesOptions = (
  options?: OptionsLegacyParser<GetLocalesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLocales({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLocalesQueryKey(options),
  });
};

export const getLocalesInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetLocalesData>,
): QueryKey<OptionsLegacyParser<GetLocalesData>> => [
  createQueryKey("getLocales", options, true),
];

export const getLocalesInfiniteOptions = (
  options?: OptionsLegacyParser<GetLocalesData>,
) => {
  return infiniteQueryOptions<
    GetLocalesResponse,
    GetLocalesError,
    InfiniteData<GetLocalesResponse>,
    QueryKey<OptionsLegacyParser<GetLocalesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetLocalesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetLocalesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getLocales({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getLocalesInfiniteQueryKey(options),
    },
  );
};

export const getLocalesCodeQueryKey = (
  options: OptionsLegacyParser<GetLocalesCodeData>,
) => [createQueryKey("getLocalesCode", options)];

export const getLocalesCodeOptions = (
  options: OptionsLegacyParser<GetLocalesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLocalesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLocalesCodeQueryKey(options),
  });
};

export const measureFamiliesGetListQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("measureFamiliesGetList", options)];

export const measureFamiliesGetListOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await measureFamiliesGetList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: measureFamiliesGetListQueryKey(options),
  });
};

export const measureFamiliesGetQueryKey = (
  options: OptionsLegacyParser<MeasureFamiliesGetData>,
) => [createQueryKey("measureFamiliesGet", options)];

export const measureFamiliesGetOptions = (
  options: OptionsLegacyParser<MeasureFamiliesGetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await measureFamiliesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: measureFamiliesGetQueryKey(options),
  });
};

export const measurementFamiliesGetListQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("measurementFamiliesGetList", options)];

export const measurementFamiliesGetListOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await measurementFamiliesGetList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: measurementFamiliesGetListQueryKey(options),
  });
};

export const patchMeasurementFamiliesMutation = (
  options?: Partial<OptionsLegacyParser<PatchMeasurementFamiliesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchMeasurementFamiliesResponse,
    PatchMeasurementFamiliesError,
    OptionsLegacyParser<PatchMeasurementFamiliesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchMeasurementFamilies({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMediaFilesQueryKey = (
  options?: OptionsLegacyParser<GetMediaFilesData>,
) => [createQueryKey("getMediaFiles", options)];

export const getMediaFilesOptions = (
  options?: OptionsLegacyParser<GetMediaFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMediaFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMediaFilesQueryKey(options),
  });
};

export const getMediaFilesInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetMediaFilesData>,
): QueryKey<OptionsLegacyParser<GetMediaFilesData>> => [
  createQueryKey("getMediaFiles", options, true),
];

export const getMediaFilesInfiniteOptions = (
  options?: OptionsLegacyParser<GetMediaFilesData>,
) => {
  return infiniteQueryOptions<
    GetMediaFilesResponse,
    GetMediaFilesError,
    InfiniteData<GetMediaFilesResponse>,
    QueryKey<OptionsLegacyParser<GetMediaFilesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetMediaFilesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetMediaFilesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getMediaFiles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getMediaFilesInfiniteQueryKey(options),
    },
  );
};

export const postMediaFilesQueryKey = (
  options: OptionsLegacyParser<PostMediaFilesData>,
) => [createQueryKey("postMediaFiles", options)];

export const postMediaFilesOptions = (
  options: OptionsLegacyParser<PostMediaFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postMediaFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postMediaFilesQueryKey(options),
  });
};

export const postMediaFilesMutation = (
  options?: Partial<OptionsLegacyParser<PostMediaFilesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostMediaFilesResponse,
    PostMediaFilesError,
    OptionsLegacyParser<PostMediaFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postMediaFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getMediaFilesCodeQueryKey = (
  options: OptionsLegacyParser<GetMediaFilesCodeData>,
) => [createQueryKey("getMediaFilesCode", options)];

export const getMediaFilesCodeOptions = (
  options: OptionsLegacyParser<GetMediaFilesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMediaFilesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMediaFilesCodeQueryKey(options),
  });
};

export const getMediaFilesCodeDownloadQueryKey = (
  options: OptionsLegacyParser<GetMediaFilesCodeDownloadData>,
) => [createQueryKey("getMediaFilesCodeDownload", options)];

export const getMediaFilesCodeDownloadOptions = (
  options: OptionsLegacyParser<GetMediaFilesCodeDownloadData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMediaFilesCodeDownload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getMediaFilesCodeDownloadQueryKey(options),
  });
};

export const getProductModelsQueryKey = (
  options?: OptionsLegacyParser<GetProductModelsData>,
) => [createQueryKey("getProductModels", options)];

export const getProductModelsOptions = (
  options?: OptionsLegacyParser<GetProductModelsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductModelsQueryKey(options),
  });
};

export const getProductModelsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetProductModelsData>,
): QueryKey<OptionsLegacyParser<GetProductModelsData>> => [
  createQueryKey("getProductModels", options, true),
];

export const getProductModelsInfiniteOptions = (
  options?: OptionsLegacyParser<GetProductModelsData>,
) => {
  return infiniteQueryOptions<
    GetProductModelsResponse,
    GetProductModelsError,
    InfiniteData<GetProductModelsResponse>,
    QueryKey<OptionsLegacyParser<GetProductModelsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetProductModelsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetProductModelsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getProductModels({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getProductModelsInfiniteQueryKey(options),
    },
  );
};

export const patchProductModelsMutation = (
  options?: Partial<OptionsLegacyParser<PatchProductModelsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchProductModelsResponse,
    PatchProductModelsError,
    OptionsLegacyParser<PatchProductModelsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProductModels({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postProductModelsQueryKey = (
  options?: OptionsLegacyParser<PostProductModelsData>,
) => [createQueryKey("postProductModels", options)];

export const postProductModelsOptions = (
  options?: OptionsLegacyParser<PostProductModelsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProductModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProductModelsQueryKey(options),
  });
};

export const postProductModelsMutation = (
  options?: Partial<OptionsLegacyParser<PostProductModelsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostProductModelsResponse,
    PostProductModelsError,
    OptionsLegacyParser<PostProductModelsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProductModels({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteProductModelsCodeMutation = (
  options?: Partial<OptionsLegacyParser<DeleteProductModelsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteProductModelsCodeResponse,
    DeleteProductModelsCodeError,
    OptionsLegacyParser<DeleteProductModelsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProductModelsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProductModelsCodeQueryKey = (
  options: OptionsLegacyParser<GetProductModelsCodeData>,
) => [createQueryKey("getProductModelsCode", options)];

export const getProductModelsCodeOptions = (
  options: OptionsLegacyParser<GetProductModelsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductModelsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductModelsCodeQueryKey(options),
  });
};

export const patchProductModelsCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchProductModelsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchProductModelsCodeResponse,
    PatchProductModelsCodeError,
    OptionsLegacyParser<PatchProductModelsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProductModelsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProductModelDraftCodeQueryKey = (
  options: OptionsLegacyParser<GetProductModelDraftCodeData>,
) => [createQueryKey("getProductModelDraftCode", options)];

export const getProductModelDraftCodeOptions = (
  options: OptionsLegacyParser<GetProductModelDraftCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductModelDraftCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductModelDraftCodeQueryKey(options),
  });
};

export const postProductModelProposalQueryKey = (
  options: OptionsLegacyParser<PostProductModelProposalData>,
) => [createQueryKey("postProductModelProposal", options)];

export const postProductModelProposalOptions = (
  options: OptionsLegacyParser<PostProductModelProposalData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProductModelProposal({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProductModelProposalQueryKey(options),
  });
};

export const postProductModelProposalMutation = (
  options?: Partial<OptionsLegacyParser<PostProductModelProposalData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostProductModelProposalResponse,
    PostProductModelProposalError,
    OptionsLegacyParser<PostProductModelProposalData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProductModelProposal({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProductsQueryKey = (
  options?: OptionsLegacyParser<GetProductsData>,
) => [createQueryKey("getProducts", options)];

export const getProductsOptions = (
  options?: OptionsLegacyParser<GetProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductsQueryKey(options),
  });
};

export const getProductsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetProductsData>,
): QueryKey<OptionsLegacyParser<GetProductsData>> => [
  createQueryKey("getProducts", options, true),
];

export const getProductsInfiniteOptions = (
  options?: OptionsLegacyParser<GetProductsData>,
) => {
  return infiniteQueryOptions<
    GetProductsResponse,
    GetProductsError,
    InfiniteData<GetProductsResponse>,
    QueryKey<OptionsLegacyParser<GetProductsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetProductsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetProductsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getProducts({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getProductsInfiniteQueryKey(options),
    },
  );
};

export const patchProductsMutation = (
  options?: Partial<OptionsLegacyParser<PatchProductsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchProductsResponse,
    PatchProductsError,
    OptionsLegacyParser<PatchProductsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProducts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postProductsQueryKey = (
  options?: OptionsLegacyParser<PostProductsData>,
) => [createQueryKey("postProducts", options)];

export const postProductsOptions = (
  options?: OptionsLegacyParser<PostProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProductsQueryKey(options),
  });
};

export const postProductsMutation = (
  options?: Partial<OptionsLegacyParser<PostProductsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostProductsResponse,
    PostProductsError,
    OptionsLegacyParser<PostProductsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProducts({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProductsUuidQueryKey = (
  options?: OptionsLegacyParser<GetProductsUuidData>,
) => [createQueryKey("getProductsUuid", options)];

export const getProductsUuidOptions = (
  options?: OptionsLegacyParser<GetProductsUuidData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductsUuid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductsUuidQueryKey(options),
  });
};

export const getProductsUuidInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetProductsUuidData>,
): QueryKey<OptionsLegacyParser<GetProductsUuidData>> => [
  createQueryKey("getProductsUuid", options, true),
];

export const getProductsUuidInfiniteOptions = (
  options?: OptionsLegacyParser<GetProductsUuidData>,
) => {
  return infiniteQueryOptions<
    GetProductsUuidResponse,
    GetProductsUuidError,
    InfiniteData<GetProductsUuidResponse>,
    QueryKey<OptionsLegacyParser<GetProductsUuidData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetProductsUuidData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetProductsUuidData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getProductsUuid({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getProductsUuidInfiniteQueryKey(options),
    },
  );
};

export const patchProductsUuidMutation = (
  options?: Partial<OptionsLegacyParser<PatchProductsUuidData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchProductsUuidResponse,
    PatchProductsUuidError,
    OptionsLegacyParser<PatchProductsUuidData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProductsUuid({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postProductsUuidQueryKey = (
  options?: OptionsLegacyParser<PostProductsUuidData>,
) => [createQueryKey("postProductsUuid", options)];

export const postProductsUuidOptions = (
  options?: OptionsLegacyParser<PostProductsUuidData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProductsUuid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProductsUuidQueryKey(options),
  });
};

export const postProductsUuidMutation = (
  options?: Partial<OptionsLegacyParser<PostProductsUuidData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostProductsUuidResponse,
    PostProductsUuidError,
    OptionsLegacyParser<PostProductsUuidData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProductsUuid({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteProductsUuidUuidMutation = (
  options?: Partial<OptionsLegacyParser<DeleteProductsUuidUuidData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteProductsUuidUuidResponse,
    DeleteProductsUuidUuidError,
    OptionsLegacyParser<DeleteProductsUuidUuidData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProductsUuidUuid({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProductsUuidUuidQueryKey = (
  options: OptionsLegacyParser<GetProductsUuidUuidData>,
) => [createQueryKey("getProductsUuidUuid", options)];

export const getProductsUuidUuidOptions = (
  options: OptionsLegacyParser<GetProductsUuidUuidData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductsUuidUuid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductsUuidUuidQueryKey(options),
  });
};

export const patchProductsUuidUuidMutation = (
  options?: Partial<OptionsLegacyParser<PatchProductsUuidUuidData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchProductsUuidUuidResponse,
    PatchProductsUuidUuidError,
    OptionsLegacyParser<PatchProductsUuidUuidData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProductsUuidUuid({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getDraftUuidUuidQueryKey = (
  options: OptionsLegacyParser<GetDraftUuidUuidData>,
) => [createQueryKey("getDraftUuidUuid", options)];

export const getDraftUuidUuidOptions = (
  options: OptionsLegacyParser<GetDraftUuidUuidData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDraftUuidUuid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDraftUuidUuidQueryKey(options),
  });
};

export const postProposalUuidQueryKey = (
  options: OptionsLegacyParser<PostProposalUuidData>,
) => [createQueryKey("postProposalUuid", options)];

export const postProposalUuidOptions = (
  options: OptionsLegacyParser<PostProposalUuidData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProposalUuid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProposalUuidQueryKey(options),
  });
};

export const postProposalUuidMutation = (
  options?: Partial<OptionsLegacyParser<PostProposalUuidData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostProposalUuidResponse,
    PostProposalUuidError,
    OptionsLegacyParser<PostProposalUuidData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProposalUuid({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteProductsCodeMutation = (
  options?: Partial<OptionsLegacyParser<DeleteProductsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteProductsCodeResponse,
    DeleteProductsCodeError,
    OptionsLegacyParser<DeleteProductsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProductsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProductsCodeQueryKey = (
  options: OptionsLegacyParser<GetProductsCodeData>,
) => [createQueryKey("getProductsCode", options)];

export const getProductsCodeOptions = (
  options: OptionsLegacyParser<GetProductsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProductsCodeQueryKey(options),
  });
};

export const patchProductsCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchProductsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchProductsCodeResponse,
    PatchProductsCodeError,
    OptionsLegacyParser<PatchProductsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchProductsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getDraftCodeQueryKey = (
  options: OptionsLegacyParser<GetDraftCodeData>,
) => [createQueryKey("getDraftCode", options)];

export const getDraftCodeOptions = (
  options: OptionsLegacyParser<GetDraftCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDraftCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDraftCodeQueryKey(options),
  });
};

export const postProposalQueryKey = (
  options: OptionsLegacyParser<PostProposalData>,
) => [createQueryKey("postProposal", options)];

export const postProposalOptions = (
  options: OptionsLegacyParser<PostProposalData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProposal({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProposalQueryKey(options),
  });
};

export const postProposalMutation = (
  options?: Partial<OptionsLegacyParser<PostProposalData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostProposalResponse,
    PostProposalError,
    OptionsLegacyParser<PostProposalData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProposal({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getPublishedProductsQueryKey = (
  options?: OptionsLegacyParser<GetPublishedProductsData>,
) => [createQueryKey("getPublishedProducts", options)];

export const getPublishedProductsOptions = (
  options?: OptionsLegacyParser<GetPublishedProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPublishedProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPublishedProductsQueryKey(options),
  });
};

export const getPublishedProductsInfiniteQueryKey = (
  options?: OptionsLegacyParser<GetPublishedProductsData>,
): QueryKey<OptionsLegacyParser<GetPublishedProductsData>> => [
  createQueryKey("getPublishedProducts", options, true),
];

export const getPublishedProductsInfiniteOptions = (
  options?: OptionsLegacyParser<GetPublishedProductsData>,
) => {
  return infiniteQueryOptions<
    GetPublishedProductsResponse,
    GetPublishedProductsError,
    InfiniteData<GetPublishedProductsResponse>,
    QueryKey<OptionsLegacyParser<GetPublishedProductsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GetPublishedProductsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GetPublishedProductsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getPublishedProducts({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getPublishedProductsInfiniteQueryKey(options),
    },
  );
};

export const getPublishedProductsCodeQueryKey = (
  options: OptionsLegacyParser<GetPublishedProductsCodeData>,
) => [createQueryKey("getPublishedProductsCode", options)];

export const getPublishedProductsCodeOptions = (
  options: OptionsLegacyParser<GetPublishedProductsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getPublishedProductsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getPublishedProductsCodeQueryKey(options),
  });
};

export const getReferenceEntitiesQueryKey = (
  options?: OptionsLegacyParser<GetReferenceEntitiesData>,
) => [createQueryKey("getReferenceEntities", options)];

export const getReferenceEntitiesOptions = (
  options?: OptionsLegacyParser<GetReferenceEntitiesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntities({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntitiesQueryKey(options),
  });
};

export const postReferenceEntityMediaFilesQueryKey = (
  options: OptionsLegacyParser<PostReferenceEntityMediaFilesData>,
) => [createQueryKey("postReferenceEntityMediaFiles", options)];

export const postReferenceEntityMediaFilesOptions = (
  options: OptionsLegacyParser<PostReferenceEntityMediaFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postReferenceEntityMediaFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postReferenceEntityMediaFilesQueryKey(options),
  });
};

export const postReferenceEntityMediaFilesMutation = (
  options?: Partial<OptionsLegacyParser<PostReferenceEntityMediaFilesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostReferenceEntityMediaFilesResponse,
    PostReferenceEntityMediaFilesError,
    OptionsLegacyParser<PostReferenceEntityMediaFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postReferenceEntityMediaFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceEntityMediaFilesCodeQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntityMediaFilesCodeData>,
) => [createQueryKey("getReferenceEntityMediaFilesCode", options)];

export const getReferenceEntityMediaFilesCodeOptions = (
  options: OptionsLegacyParser<GetReferenceEntityMediaFilesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntityMediaFilesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntityMediaFilesCodeQueryKey(options),
  });
};

export const getReferenceEntitiesCodeQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntitiesCodeData>,
) => [createQueryKey("getReferenceEntitiesCode", options)];

export const getReferenceEntitiesCodeOptions = (
  options: OptionsLegacyParser<GetReferenceEntitiesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntitiesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntitiesCodeQueryKey(options),
  });
};

export const patchReferenceEntityCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchReferenceEntityCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchReferenceEntityCodeResponse,
    PatchReferenceEntityCodeError,
    OptionsLegacyParser<PatchReferenceEntityCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchReferenceEntityCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceEntitiesCodeAttributesQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntitiesCodeAttributesData>,
) => [createQueryKey("getReferenceEntitiesCodeAttributes", options)];

export const getReferenceEntitiesCodeAttributesOptions = (
  options: OptionsLegacyParser<GetReferenceEntitiesCodeAttributesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntitiesCodeAttributes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntitiesCodeAttributesQueryKey(options),
  });
};

export const getReferenceEntityAttributesAttributeCodeOptionsQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntityAttributesAttributeCodeOptionsData>,
) => [
  createQueryKey("getReferenceEntityAttributesAttributeCodeOptions", options),
];

export const getReferenceEntityAttributesAttributeCodeOptionsOptions = (
  options: OptionsLegacyParser<GetReferenceEntityAttributesAttributeCodeOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntityAttributesAttributeCodeOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntityAttributesAttributeCodeOptionsQueryKey(options),
  });
};

export const getReferenceEntityAttributesAttributeCodeOptionsCodeQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntityAttributesAttributeCodeOptionsCodeData>,
) => [
  createQueryKey(
    "getReferenceEntityAttributesAttributeCodeOptionsCode",
    options,
  ),
];

export const getReferenceEntityAttributesAttributeCodeOptionsCodeOptions = (
  options: OptionsLegacyParser<GetReferenceEntityAttributesAttributeCodeOptionsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await getReferenceEntityAttributesAttributeCodeOptionsCode({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      getReferenceEntityAttributesAttributeCodeOptionsCodeQueryKey(options),
  });
};

export const patchReferenceEntityAttributesAttributeCodeOptionsCodeMutation = (
  options?: Partial<
    OptionsLegacyParser<PatchReferenceEntityAttributesAttributeCodeOptionsCodeData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PatchReferenceEntityAttributesAttributeCodeOptionsCodeResponse,
    PatchReferenceEntityAttributesAttributeCodeOptionsCodeError,
    OptionsLegacyParser<PatchReferenceEntityAttributesAttributeCodeOptionsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await patchReferenceEntityAttributesAttributeCodeOptionsCode({
          ...options,
          ...localOptions,
          throwOnError: true,
        });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceEntityAttributesCodeQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntityAttributesCodeData>,
) => [createQueryKey("getReferenceEntityAttributesCode", options)];

export const getReferenceEntityAttributesCodeOptions = (
  options: OptionsLegacyParser<GetReferenceEntityAttributesCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntityAttributesCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntityAttributesCodeQueryKey(options),
  });
};

export const patchReferenceEntityAttributesCodeMutation = (
  options?: Partial<
    OptionsLegacyParser<PatchReferenceEntityAttributesCodeData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    PatchReferenceEntityAttributesCodeResponse,
    PatchReferenceEntityAttributesCodeError,
    OptionsLegacyParser<PatchReferenceEntityAttributesCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchReferenceEntityAttributesCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceEntityRecordsQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntityRecordsData>,
) => [createQueryKey("getReferenceEntityRecords", options)];

export const getReferenceEntityRecordsOptions = (
  options: OptionsLegacyParser<GetReferenceEntityRecordsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntityRecords({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntityRecordsQueryKey(options),
  });
};

export const patchReferenceEntityRecordsMutation = (
  options?: Partial<OptionsLegacyParser<PatchReferenceEntityRecordsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchReferenceEntityRecordsResponse,
    PatchReferenceEntityRecordsError,
    OptionsLegacyParser<PatchReferenceEntityRecordsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchReferenceEntityRecords({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getReferenceEntityRecordsCodeQueryKey = (
  options: OptionsLegacyParser<GetReferenceEntityRecordsCodeData>,
) => [createQueryKey("getReferenceEntityRecordsCode", options)];

export const getReferenceEntityRecordsCodeOptions = (
  options: OptionsLegacyParser<GetReferenceEntityRecordsCodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReferenceEntityRecordsCode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getReferenceEntityRecordsCodeQueryKey(options),
  });
};

export const patchReferenceEntityRecordsCodeMutation = (
  options?: Partial<OptionsLegacyParser<PatchReferenceEntityRecordsCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PatchReferenceEntityRecordsCodeResponse,
    PatchReferenceEntityRecordsCodeError,
    OptionsLegacyParser<PatchReferenceEntityRecordsCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await patchReferenceEntityRecordsCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getSystemInformationQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("getSystemInformation", options),
];

export const getSystemInformationOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSystemInformation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSystemInformationQueryKey(options),
  });
};
