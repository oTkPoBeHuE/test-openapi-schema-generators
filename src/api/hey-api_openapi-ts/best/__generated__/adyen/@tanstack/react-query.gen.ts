// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from "@hey-api/client-fetch";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  PostAccountHolderBalanceData,
  PostAccountHolderBalanceError,
  PostAccountHolderBalanceResponse,
  PostAccountHolderTransactionListData,
  PostAccountHolderTransactionListError,
  PostAccountHolderTransactionListResponse,
  PostDebitAccountHolderData,
  PostDebitAccountHolderError,
  PostDebitAccountHolderResponse,
  PostPayoutAccountHolderData,
  PostPayoutAccountHolderError,
  PostPayoutAccountHolderResponse,
  PostRefundFundsTransferData,
  PostRefundFundsTransferError,
  PostRefundFundsTransferResponse,
  PostRefundNotPaidOutTransfersData,
  PostRefundNotPaidOutTransfersError,
  PostRefundNotPaidOutTransfersResponse,
  PostSetupBeneficiaryData,
  PostSetupBeneficiaryError,
  PostSetupBeneficiaryResponse,
  PostTransferFundsData,
  PostTransferFundsError,
  PostTransferFundsResponse,
} from "../types.gen";
import {
  client,
  postAccountHolderBalance,
  postAccountHolderTransactionList,
  postDebitAccountHolder,
  postPayoutAccountHolder,
  postRefundFundsTransfer,
  postRefundNotPaidOutTransfers,
  postSetupBeneficiary,
  postTransferFunds,
} from "../sdk.gen";

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const postAccountHolderBalanceQueryKey = (
  options?: OptionsLegacyParser<PostAccountHolderBalanceData>,
) => [createQueryKey("postAccountHolderBalance", options)];

export const postAccountHolderBalanceOptions = (
  options?: OptionsLegacyParser<PostAccountHolderBalanceData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAccountHolderBalance({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAccountHolderBalanceQueryKey(options),
  });
};

export const postAccountHolderBalanceMutation = (
  options?: Partial<OptionsLegacyParser<PostAccountHolderBalanceData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostAccountHolderBalanceResponse,
    PostAccountHolderBalanceError,
    OptionsLegacyParser<PostAccountHolderBalanceData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAccountHolderBalance({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAccountHolderTransactionListQueryKey = (
  options?: OptionsLegacyParser<PostAccountHolderTransactionListData>,
) => [createQueryKey("postAccountHolderTransactionList", options)];

export const postAccountHolderTransactionListOptions = (
  options?: OptionsLegacyParser<PostAccountHolderTransactionListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAccountHolderTransactionList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAccountHolderTransactionListQueryKey(options),
  });
};

export const postAccountHolderTransactionListMutation = (
  options?: Partial<OptionsLegacyParser<PostAccountHolderTransactionListData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostAccountHolderTransactionListResponse,
    PostAccountHolderTransactionListError,
    OptionsLegacyParser<PostAccountHolderTransactionListData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postAccountHolderTransactionList({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postDebitAccountHolderQueryKey = (
  options?: OptionsLegacyParser<PostDebitAccountHolderData>,
) => [createQueryKey("postDebitAccountHolder", options)];

export const postDebitAccountHolderOptions = (
  options?: OptionsLegacyParser<PostDebitAccountHolderData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postDebitAccountHolder({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postDebitAccountHolderQueryKey(options),
  });
};

export const postDebitAccountHolderMutation = (
  options?: Partial<OptionsLegacyParser<PostDebitAccountHolderData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostDebitAccountHolderResponse,
    PostDebitAccountHolderError,
    OptionsLegacyParser<PostDebitAccountHolderData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postDebitAccountHolder({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postPayoutAccountHolderQueryKey = (
  options?: OptionsLegacyParser<PostPayoutAccountHolderData>,
) => [createQueryKey("postPayoutAccountHolder", options)];

export const postPayoutAccountHolderOptions = (
  options?: OptionsLegacyParser<PostPayoutAccountHolderData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postPayoutAccountHolder({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postPayoutAccountHolderQueryKey(options),
  });
};

export const postPayoutAccountHolderMutation = (
  options?: Partial<OptionsLegacyParser<PostPayoutAccountHolderData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostPayoutAccountHolderResponse,
    PostPayoutAccountHolderError,
    OptionsLegacyParser<PostPayoutAccountHolderData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postPayoutAccountHolder({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postRefundFundsTransferQueryKey = (
  options?: OptionsLegacyParser<PostRefundFundsTransferData>,
) => [createQueryKey("postRefundFundsTransfer", options)];

export const postRefundFundsTransferOptions = (
  options?: OptionsLegacyParser<PostRefundFundsTransferData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postRefundFundsTransfer({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postRefundFundsTransferQueryKey(options),
  });
};

export const postRefundFundsTransferMutation = (
  options?: Partial<OptionsLegacyParser<PostRefundFundsTransferData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostRefundFundsTransferResponse,
    PostRefundFundsTransferError,
    OptionsLegacyParser<PostRefundFundsTransferData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postRefundFundsTransfer({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postRefundNotPaidOutTransfersQueryKey = (
  options?: OptionsLegacyParser<PostRefundNotPaidOutTransfersData>,
) => [createQueryKey("postRefundNotPaidOutTransfers", options)];

export const postRefundNotPaidOutTransfersOptions = (
  options?: OptionsLegacyParser<PostRefundNotPaidOutTransfersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postRefundNotPaidOutTransfers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postRefundNotPaidOutTransfersQueryKey(options),
  });
};

export const postRefundNotPaidOutTransfersMutation = (
  options?: Partial<OptionsLegacyParser<PostRefundNotPaidOutTransfersData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostRefundNotPaidOutTransfersResponse,
    PostRefundNotPaidOutTransfersError,
    OptionsLegacyParser<PostRefundNotPaidOutTransfersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postRefundNotPaidOutTransfers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postSetupBeneficiaryQueryKey = (
  options?: OptionsLegacyParser<PostSetupBeneficiaryData>,
) => [createQueryKey("postSetupBeneficiary", options)];

export const postSetupBeneficiaryOptions = (
  options?: OptionsLegacyParser<PostSetupBeneficiaryData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postSetupBeneficiary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postSetupBeneficiaryQueryKey(options),
  });
};

export const postSetupBeneficiaryMutation = (
  options?: Partial<OptionsLegacyParser<PostSetupBeneficiaryData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostSetupBeneficiaryResponse,
    PostSetupBeneficiaryError,
    OptionsLegacyParser<PostSetupBeneficiaryData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postSetupBeneficiary({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postTransferFundsQueryKey = (
  options?: OptionsLegacyParser<PostTransferFundsData>,
) => [createQueryKey("postTransferFunds", options)];

export const postTransferFundsOptions = (
  options?: OptionsLegacyParser<PostTransferFundsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postTransferFunds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postTransferFundsQueryKey(options),
  });
};

export const postTransferFundsMutation = (
  options?: Partial<OptionsLegacyParser<PostTransferFundsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostTransferFundsResponse,
    PostTransferFundsError,
    OptionsLegacyParser<PostTransferFundsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postTransferFunds({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
