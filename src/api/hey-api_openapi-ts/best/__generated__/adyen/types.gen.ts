// This file is auto-generated by @hey-api/openapi-ts

export type AccountDetailBalance = {
  /**
   * The code of the account that holds the balance.
   */
  accountCode?: string;
  /**
   * Details of the balance held by the account.
   */
  detailBalance?: DetailBalance;
};

export type AccountHolderBalanceRequest = {
  /**
   * The code of the Account Holder of which to retrieve the balance.
   */
  accountHolderCode: string;
};

export type AccountHolderBalanceResponse = {
  /**
   * A list of each account and their balances.
   */
  balancePerAccount?: Array<AccountDetailBalance>;
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
  /**
   * The total balance of the account holder.
   */
  totalBalance?: DetailBalance;
};

export type AccountHolderTransactionListRequest = {
  /**
   * The code of the account holder that owns the account(s) of which retrieve the transaction list.
   */
  accountHolderCode: string;
  /**
   * A list of accounts to include in the transaction list. If left blank, the last fifty (50) transactions for all accounts of the account holder will be included.
   */
  transactionListsPerAccount?: Array<TransactionListForAccount>;
  /**
   * A list of statuses to include in the transaction list. If left blank, all transactions will be included.
   * >Permitted values:
   * >* `PendingCredit` - a pending balance credit.
   * >* `CreditFailed` - a pending credit failure; the balance will not be credited.
   * >* `Credited` - a credited balance.
   * >* `PendingDebit` - a pending balance debit (e.g., a refund).
   * >* `CreditClosed` - a pending credit closed; the balance will not be credited.
   * >* `CreditSuspended` - a pending credit closed; the balance will not be credited.
   * >* `DebitFailed` - a pending debit failure; the balance will not be debited.
   * >* `Debited` - a debited balance (e.g., a refund).
   * >* `DebitReversedReceived` - a pending refund reversal.
   * >* `DebitedReversed` - a reversed refund.
   * >* `ChargebackReceived` - a received chargeback request.
   * >* `Chargeback` - a processed chargeback.
   * >* `ChargebackReversedReceived` - a pending chargeback reversal.
   * >* `ChargebackReversed` - a reversed chargeback.
   * >* `Converted` - converted.
   * >* `ManualCorrected` - manual booking/adjustment by Adyen.
   * >* `Payout` - a payout.
   * >* `PayoutReversed` - a reversed payout.
   * >* `PendingFundTransfer` - a pending transfer of funds from one account to another.
   * >* `FundTransfer` - a transfer of funds from one account to another.
   */
  transactionStatuses?: Array<
    | "BalanceNotPaidOutTransfer"
    | "BalancePlatformSweep"
    | "BalancePlatformSweepReturned"
    | "Chargeback"
    | "ChargebackCorrection"
    | "ChargebackCorrectionReceived"
    | "ChargebackReceived"
    | "ChargebackReversed"
    | "ChargebackReversedCorrection"
    | "ChargebackReversedCorrectionReceived"
    | "ChargebackReversedReceived"
    | "Converted"
    | "CreditClosed"
    | "CreditFailed"
    | "CreditReversed"
    | "CreditReversedReceived"
    | "CreditSuspended"
    | "Credited"
    | "DebitFailed"
    | "DebitReversedReceived"
    | "Debited"
    | "DebitedReversed"
    | "DepositCorrectionCredited"
    | "DepositCorrectionDebited"
    | "Fee"
    | "FundTransfer"
    | "FundTransferReversed"
    | "InvoiceDeductionCredited"
    | "InvoiceDeductionDebited"
    | "ManualCorrected"
    | "ManualCorrectionCredited"
    | "ManualCorrectionDebited"
    | "MerchantPayin"
    | "MerchantPayinReversed"
    | "Payout"
    | "PayoutReversed"
    | "PendingCredit"
    | "PendingDebit"
    | "PendingFundTransfer"
    | "ReCredited"
    | "ReCreditedReceived"
    | "SecondChargeback"
    | "SecondChargebackCorrection"
    | "SecondChargebackCorrectionReceived"
    | "SecondChargebackReceived"
  >;
};

export type AccountHolderTransactionListResponse = {
  /**
   * A list of the transactions.
   */
  accountTransactionLists?: Array<AccountTransactionList>;
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type AccountTransactionList = {
  /**
   * The code of the account.
   */
  accountCode?: string;
  /**
   * Indicates whether there is a next page of transactions available.
   */
  hasNextPage?: boolean;
  /**
   * The list of transactions.
   */
  transactions?: Array<Transaction>;
};

export type Amount = {
  /**
   * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
   */
  currency: string;
  /**
   * The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
   */
  value: number;
};

export type BankAccountDetail = {
  /**
   * The bank account number (without separators).
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  accountNumber?: string;
  /**
   * The type of bank account.
   * Only applicable to bank accounts held in the USA.
   * The permitted values are: `checking`, `savings`.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  accountType?: string;
  /**
   * The name of the bank account.
   */
  bankAccountName?: string;
  /**
   * Merchant reference to the bank account.
   */
  bankAccountReference?: string;
  /**
   * The unique identifier (UUID) of the Bank Account.
   * >If, during an account holder create or update request, this field is left blank (but other fields provided), a new Bank Account will be created with a procedurally-generated UUID.
   *
   * >If, during an account holder create request, a UUID is provided, the creation of the Bank Account will fail while the creation of the account holder will continue.
   *
   * >If, during an account holder update request, a UUID that is not correlated with an existing Bank Account is provided, the update of the account holder will fail.
   *
   * >If, during an account holder update request, a UUID that is correlated with an existing Bank Account is provided, the existing Bank Account will be updated.
   *
   */
  bankAccountUUID?: string;
  /**
   * The bank identifier code.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  bankBicSwift?: string;
  /**
   * The city in which the bank branch is located.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  bankCity?: string;
  /**
   * The bank code of the banking institution with which the bank account is registered.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  bankCode?: string;
  /**
   * The name of the banking institution with which the bank account is held.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  bankName?: string;
  /**
   * The branch code of the branch under which the bank account is registered. The value to be specified in this parameter depends on the country of the bank account:
   * * United States - Routing number
   * * United Kingdom - Sort code
   * * Germany - Bankleitzahl
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  branchCode?: string;
  /**
   * The check code of the bank account.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  checkCode?: string;
  /**
   * The two-letter country code in which the bank account is registered.
   * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  countryCode?: string;
  /**
   * The currency in which the bank account deals.
   * >The permitted currency codes are defined in ISO-4217 (e.g. 'EUR').
   *
   */
  currencyCode?: string;
  /**
   * The international bank account number.
   * >The IBAN standard is defined in ISO-13616.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  iban?: string;
  /**
   * The city of residence of the bank account owner.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerCity?: string;
  /**
   * The country code of the country of residence of the bank account owner.
   * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerCountryCode?: string;
  /**
   * The date of birth of the bank account owner.
   * The date should be in ISO-8601 format yyyy-mm-dd (e.g. 2000-01-31).
   * @deprecated
   */
  ownerDateOfBirth?: string;
  /**
   * The house name or number of the residence of the bank account owner.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerHouseNumberOrName?: string;
  /**
   * The name of the bank account owner.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerName?: string;
  /**
   * The country code of the country of nationality of the bank account owner.
   * >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerNationality?: string;
  /**
   * The postal code of the residence of the bank account owner.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerPostalCode?: string;
  /**
   * The state of residence of the bank account owner.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerState?: string;
  /**
   * The street name of the residence of the bank account owner.
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  ownerStreet?: string;
  /**
   * If set to true, the bank account is a primary account.
   */
  primaryAccount?: boolean;
  /**
   * The tax ID number.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  taxId?: string;
  /**
   * The URL to be used for bank account verification.
   * This may be generated on bank account creation.
   *
   * >Refer to [Required information](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/required-information) for details on field requirements.
   */
  urlForVerification?: string;
};

export type DebitAccountHolderRequest = {
  /**
   * The code of the account holder.
   */
  accountHolderCode: string;
  /**
   * The amount to be debited from the account holder's bank account.
   */
  amount: Amount;
  /**
   * The Adyen-generated unique alphanumeric identifier (UUID) of the account holder's bank account.
   */
  bankAccountUUID: string;
  /**
   * A description of the direct debit. Maximum length: 35 characters.
   *
   * Allowed characters: **a-z**, **A-Z**, **0-9**, and special characters **?:().,'+ ";**.
   */
  description?: string;
  /**
   * Your merchant account.
   */
  merchantAccount: string;
  /**
   * Contains instructions on how to split the funds between the accounts in your platform. The request must have at least one split item.
   */
  splits: Array<Split>;
};

export type DebitAccountHolderResponse = {
  /**
   * The code of the account holder.
   */
  accountHolderCode?: string;
  /**
   * The Adyen-generated unique alphanumeric identifier (UUID) of the account holder's bank account.
   */
  bankAccountUUID?: string;
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * List of the `reference` values from the `split` array in the request.
   */
  merchantReferences?: Array<string>;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type DetailBalance = {
  /**
   * The list of balances held by the account.
   */
  balance?: Array<Amount>;
  /**
   * The list of on hold balances held by the account.
   */
  onHoldBalance?: Array<Amount>;
  /**
   * The list of pending balances held by the account.
   */
  pendingBalance?: Array<Amount>;
};

export type ErrorFieldType = {
  /**
   * The validation error code.
   */
  errorCode?: number;
  /**
   * A description of the validation error.
   */
  errorDescription?: string;
  /**
   * The type of error field.
   */
  fieldType?: FieldType;
};

export type FieldType = {
  /**
   * The full name of the property.
   */
  field?: string;
  /**
   * The type of the field.
   */
  fieldName?:
    | "accountCode"
    | "accountHolderCode"
    | "accountHolderDetails"
    | "accountNumber"
    | "accountStateType"
    | "accountStatus"
    | "accountType"
    | "address"
    | "balanceAccount"
    | "balanceAccountActive"
    | "balanceAccountCode"
    | "balanceAccountId"
    | "bankAccount"
    | "bankAccountCode"
    | "bankAccountName"
    | "bankAccountUUID"
    | "bankBicSwift"
    | "bankCity"
    | "bankCode"
    | "bankName"
    | "bankStatement"
    | "branchCode"
    | "businessContact"
    | "cardToken"
    | "checkCode"
    | "city"
    | "companyRegistration"
    | "constitutionalDocument"
    | "controller"
    | "country"
    | "countryCode"
    | "currency"
    | "currencyCode"
    | "dateOfBirth"
    | "description"
    | "destinationAccountCode"
    | "document"
    | "documentContent"
    | "documentExpirationDate"
    | "documentIssuerCountry"
    | "documentIssuerState"
    | "documentName"
    | "documentNumber"
    | "documentType"
    | "doingBusinessAs"
    | "drivingLicence"
    | "drivingLicenceBack"
    | "drivingLicenceFront"
    | "drivingLicense"
    | "email"
    | "firstName"
    | "formType"
    | "fullPhoneNumber"
    | "gender"
    | "hopWebserviceUser"
    | "houseNumberOrName"
    | "iban"
    | "idCard"
    | "idCardBack"
    | "idCardFront"
    | "idNumber"
    | "identityDocument"
    | "individualDetails"
    | "infix"
    | "jobTitle"
    | "lastName"
    | "lastReviewDate"
    | "legalArrangement"
    | "legalArrangementCode"
    | "legalArrangementEntity"
    | "legalArrangementEntityCode"
    | "legalArrangementLegalForm"
    | "legalArrangementMember"
    | "legalArrangementMembers"
    | "legalArrangementName"
    | "legalArrangementReference"
    | "legalArrangementRegistrationNumber"
    | "legalArrangementTaxNumber"
    | "legalArrangementType"
    | "legalBusinessName"
    | "legalEntity"
    | "legalEntityType"
    | "logo"
    | "merchantAccount"
    | "merchantCategoryCode"
    | "merchantHouseNumber"
    | "merchantReference"
    | "microDeposit"
    | "name"
    | "nationality"
    | "originalReference"
    | "ownerCity"
    | "ownerCountryCode"
    | "ownerDateOfBirth"
    | "ownerHouseNumberOrName"
    | "ownerName"
    | "ownerPostalCode"
    | "ownerState"
    | "ownerStreet"
    | "passport"
    | "passportNumber"
    | "payoutMethodCode"
    | "payoutSchedule"
    | "pciSelfAssessment"
    | "personalData"
    | "phoneCountryCode"
    | "phoneNumber"
    | "postalCode"
    | "primaryCurrency"
    | "reason"
    | "registrationNumber"
    | "returnUrl"
    | "schedule"
    | "shareholder"
    | "shareholderCode"
    | "shareholderCodeAndSignatoryCode"
    | "shareholderCodeOrSignatoryCode"
    | "shareholderType"
    | "shareholderTypes"
    | "shopperInteraction"
    | "signatory"
    | "signatoryCode"
    | "socialSecurityNumber"
    | "sourceAccountCode"
    | "splitAccount"
    | "splitConfigurationUUID"
    | "splitCurrency"
    | "splitValue"
    | "splits"
    | "stateOrProvince"
    | "status"
    | "stockExchange"
    | "stockNumber"
    | "stockTicker"
    | "store"
    | "storeDetail"
    | "storeName"
    | "storeReference"
    | "street"
    | "taxId"
    | "tier"
    | "tierNumber"
    | "transferCode"
    | "ultimateParentCompany"
    | "ultimateParentCompanyAddressDetails"
    | "ultimateParentCompanyAddressDetailsCountry"
    | "ultimateParentCompanyBusinessDetails"
    | "ultimateParentCompanyBusinessDetailsLegalBusinessName"
    | "ultimateParentCompanyBusinessDetailsRegistrationNumber"
    | "ultimateParentCompanyCode"
    | "ultimateParentCompanyStockExchange"
    | "ultimateParentCompanyStockNumber"
    | "ultimateParentCompanyStockNumberOrStockTicker"
    | "ultimateParentCompanyStockTicker"
    | "unknown"
    | "value"
    | "verificationType"
    | "virtualAccount"
    | "visaNumber"
    | "webAddress"
    | "year";
  /**
   * The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.
   */
  shareholderCode?: string;
};

/**
 * The type of the field.
 */
export type fieldName =
  | "accountCode"
  | "accountHolderCode"
  | "accountHolderDetails"
  | "accountNumber"
  | "accountStateType"
  | "accountStatus"
  | "accountType"
  | "address"
  | "balanceAccount"
  | "balanceAccountActive"
  | "balanceAccountCode"
  | "balanceAccountId"
  | "bankAccount"
  | "bankAccountCode"
  | "bankAccountName"
  | "bankAccountUUID"
  | "bankBicSwift"
  | "bankCity"
  | "bankCode"
  | "bankName"
  | "bankStatement"
  | "branchCode"
  | "businessContact"
  | "cardToken"
  | "checkCode"
  | "city"
  | "companyRegistration"
  | "constitutionalDocument"
  | "controller"
  | "country"
  | "countryCode"
  | "currency"
  | "currencyCode"
  | "dateOfBirth"
  | "description"
  | "destinationAccountCode"
  | "document"
  | "documentContent"
  | "documentExpirationDate"
  | "documentIssuerCountry"
  | "documentIssuerState"
  | "documentName"
  | "documentNumber"
  | "documentType"
  | "doingBusinessAs"
  | "drivingLicence"
  | "drivingLicenceBack"
  | "drivingLicenceFront"
  | "drivingLicense"
  | "email"
  | "firstName"
  | "formType"
  | "fullPhoneNumber"
  | "gender"
  | "hopWebserviceUser"
  | "houseNumberOrName"
  | "iban"
  | "idCard"
  | "idCardBack"
  | "idCardFront"
  | "idNumber"
  | "identityDocument"
  | "individualDetails"
  | "infix"
  | "jobTitle"
  | "lastName"
  | "lastReviewDate"
  | "legalArrangement"
  | "legalArrangementCode"
  | "legalArrangementEntity"
  | "legalArrangementEntityCode"
  | "legalArrangementLegalForm"
  | "legalArrangementMember"
  | "legalArrangementMembers"
  | "legalArrangementName"
  | "legalArrangementReference"
  | "legalArrangementRegistrationNumber"
  | "legalArrangementTaxNumber"
  | "legalArrangementType"
  | "legalBusinessName"
  | "legalEntity"
  | "legalEntityType"
  | "logo"
  | "merchantAccount"
  | "merchantCategoryCode"
  | "merchantHouseNumber"
  | "merchantReference"
  | "microDeposit"
  | "name"
  | "nationality"
  | "originalReference"
  | "ownerCity"
  | "ownerCountryCode"
  | "ownerDateOfBirth"
  | "ownerHouseNumberOrName"
  | "ownerName"
  | "ownerPostalCode"
  | "ownerState"
  | "ownerStreet"
  | "passport"
  | "passportNumber"
  | "payoutMethodCode"
  | "payoutSchedule"
  | "pciSelfAssessment"
  | "personalData"
  | "phoneCountryCode"
  | "phoneNumber"
  | "postalCode"
  | "primaryCurrency"
  | "reason"
  | "registrationNumber"
  | "returnUrl"
  | "schedule"
  | "shareholder"
  | "shareholderCode"
  | "shareholderCodeAndSignatoryCode"
  | "shareholderCodeOrSignatoryCode"
  | "shareholderType"
  | "shareholderTypes"
  | "shopperInteraction"
  | "signatory"
  | "signatoryCode"
  | "socialSecurityNumber"
  | "sourceAccountCode"
  | "splitAccount"
  | "splitConfigurationUUID"
  | "splitCurrency"
  | "splitValue"
  | "splits"
  | "stateOrProvince"
  | "status"
  | "stockExchange"
  | "stockNumber"
  | "stockTicker"
  | "store"
  | "storeDetail"
  | "storeName"
  | "storeReference"
  | "street"
  | "taxId"
  | "tier"
  | "tierNumber"
  | "transferCode"
  | "ultimateParentCompany"
  | "ultimateParentCompanyAddressDetails"
  | "ultimateParentCompanyAddressDetailsCountry"
  | "ultimateParentCompanyBusinessDetails"
  | "ultimateParentCompanyBusinessDetailsLegalBusinessName"
  | "ultimateParentCompanyBusinessDetailsRegistrationNumber"
  | "ultimateParentCompanyCode"
  | "ultimateParentCompanyStockExchange"
  | "ultimateParentCompanyStockNumber"
  | "ultimateParentCompanyStockNumberOrStockTicker"
  | "ultimateParentCompanyStockTicker"
  | "unknown"
  | "value"
  | "verificationType"
  | "virtualAccount"
  | "visaNumber"
  | "webAddress"
  | "year";

/**
 * The type of the field.
 */
export const fieldName = {
  ACCOUNT_CODE: "accountCode",
  ACCOUNT_HOLDER_CODE: "accountHolderCode",
  ACCOUNT_HOLDER_DETAILS: "accountHolderDetails",
  ACCOUNT_NUMBER: "accountNumber",
  ACCOUNT_STATE_TYPE: "accountStateType",
  ACCOUNT_STATUS: "accountStatus",
  ACCOUNT_TYPE: "accountType",
  ADDRESS: "address",
  BALANCE_ACCOUNT: "balanceAccount",
  BALANCE_ACCOUNT_ACTIVE: "balanceAccountActive",
  BALANCE_ACCOUNT_CODE: "balanceAccountCode",
  BALANCE_ACCOUNT_ID: "balanceAccountId",
  BANK_ACCOUNT: "bankAccount",
  BANK_ACCOUNT_CODE: "bankAccountCode",
  BANK_ACCOUNT_NAME: "bankAccountName",
  BANK_ACCOUNT_UUID: "bankAccountUUID",
  BANK_BIC_SWIFT: "bankBicSwift",
  BANK_CITY: "bankCity",
  BANK_CODE: "bankCode",
  BANK_NAME: "bankName",
  BANK_STATEMENT: "bankStatement",
  BRANCH_CODE: "branchCode",
  BUSINESS_CONTACT: "businessContact",
  CARD_TOKEN: "cardToken",
  CHECK_CODE: "checkCode",
  CITY: "city",
  COMPANY_REGISTRATION: "companyRegistration",
  CONSTITUTIONAL_DOCUMENT: "constitutionalDocument",
  CONTROLLER: "controller",
  COUNTRY: "country",
  COUNTRY_CODE: "countryCode",
  CURRENCY: "currency",
  CURRENCY_CODE: "currencyCode",
  DATE_OF_BIRTH: "dateOfBirth",
  DESCRIPTION: "description",
  DESTINATION_ACCOUNT_CODE: "destinationAccountCode",
  DOCUMENT: "document",
  DOCUMENT_CONTENT: "documentContent",
  DOCUMENT_EXPIRATION_DATE: "documentExpirationDate",
  DOCUMENT_ISSUER_COUNTRY: "documentIssuerCountry",
  DOCUMENT_ISSUER_STATE: "documentIssuerState",
  DOCUMENT_NAME: "documentName",
  DOCUMENT_NUMBER: "documentNumber",
  DOCUMENT_TYPE: "documentType",
  DOING_BUSINESS_AS: "doingBusinessAs",
  DRIVING_LICENCE: "drivingLicence",
  DRIVING_LICENCE_BACK: "drivingLicenceBack",
  DRIVING_LICENCE_FRONT: "drivingLicenceFront",
  DRIVING_LICENSE: "drivingLicense",
  EMAIL: "email",
  FIRST_NAME: "firstName",
  FORM_TYPE: "formType",
  FULL_PHONE_NUMBER: "fullPhoneNumber",
  GENDER: "gender",
  HOP_WEBSERVICE_USER: "hopWebserviceUser",
  HOUSE_NUMBER_OR_NAME: "houseNumberOrName",
  IBAN: "iban",
  ID_CARD: "idCard",
  ID_CARD_BACK: "idCardBack",
  ID_CARD_FRONT: "idCardFront",
  ID_NUMBER: "idNumber",
  IDENTITY_DOCUMENT: "identityDocument",
  INDIVIDUAL_DETAILS: "individualDetails",
  INFIX: "infix",
  JOB_TITLE: "jobTitle",
  LAST_NAME: "lastName",
  LAST_REVIEW_DATE: "lastReviewDate",
  LEGAL_ARRANGEMENT: "legalArrangement",
  LEGAL_ARRANGEMENT_CODE: "legalArrangementCode",
  LEGAL_ARRANGEMENT_ENTITY: "legalArrangementEntity",
  LEGAL_ARRANGEMENT_ENTITY_CODE: "legalArrangementEntityCode",
  LEGAL_ARRANGEMENT_LEGAL_FORM: "legalArrangementLegalForm",
  LEGAL_ARRANGEMENT_MEMBER: "legalArrangementMember",
  LEGAL_ARRANGEMENT_MEMBERS: "legalArrangementMembers",
  LEGAL_ARRANGEMENT_NAME: "legalArrangementName",
  LEGAL_ARRANGEMENT_REFERENCE: "legalArrangementReference",
  LEGAL_ARRANGEMENT_REGISTRATION_NUMBER: "legalArrangementRegistrationNumber",
  LEGAL_ARRANGEMENT_TAX_NUMBER: "legalArrangementTaxNumber",
  LEGAL_ARRANGEMENT_TYPE: "legalArrangementType",
  LEGAL_BUSINESS_NAME: "legalBusinessName",
  LEGAL_ENTITY: "legalEntity",
  LEGAL_ENTITY_TYPE: "legalEntityType",
  LOGO: "logo",
  MERCHANT_ACCOUNT: "merchantAccount",
  MERCHANT_CATEGORY_CODE: "merchantCategoryCode",
  MERCHANT_HOUSE_NUMBER: "merchantHouseNumber",
  MERCHANT_REFERENCE: "merchantReference",
  MICRO_DEPOSIT: "microDeposit",
  NAME: "name",
  NATIONALITY: "nationality",
  ORIGINAL_REFERENCE: "originalReference",
  OWNER_CITY: "ownerCity",
  OWNER_COUNTRY_CODE: "ownerCountryCode",
  OWNER_DATE_OF_BIRTH: "ownerDateOfBirth",
  OWNER_HOUSE_NUMBER_OR_NAME: "ownerHouseNumberOrName",
  OWNER_NAME: "ownerName",
  OWNER_POSTAL_CODE: "ownerPostalCode",
  OWNER_STATE: "ownerState",
  OWNER_STREET: "ownerStreet",
  PASSPORT: "passport",
  PASSPORT_NUMBER: "passportNumber",
  PAYOUT_METHOD_CODE: "payoutMethodCode",
  PAYOUT_SCHEDULE: "payoutSchedule",
  PCI_SELF_ASSESSMENT: "pciSelfAssessment",
  PERSONAL_DATA: "personalData",
  PHONE_COUNTRY_CODE: "phoneCountryCode",
  PHONE_NUMBER: "phoneNumber",
  POSTAL_CODE: "postalCode",
  PRIMARY_CURRENCY: "primaryCurrency",
  REASON: "reason",
  REGISTRATION_NUMBER: "registrationNumber",
  RETURN_URL: "returnUrl",
  SCHEDULE: "schedule",
  SHAREHOLDER: "shareholder",
  SHAREHOLDER_CODE: "shareholderCode",
  SHAREHOLDER_CODE_AND_SIGNATORY_CODE: "shareholderCodeAndSignatoryCode",
  SHAREHOLDER_CODE_OR_SIGNATORY_CODE: "shareholderCodeOrSignatoryCode",
  SHAREHOLDER_TYPE: "shareholderType",
  SHAREHOLDER_TYPES: "shareholderTypes",
  SHOPPER_INTERACTION: "shopperInteraction",
  SIGNATORY: "signatory",
  SIGNATORY_CODE: "signatoryCode",
  SOCIAL_SECURITY_NUMBER: "socialSecurityNumber",
  SOURCE_ACCOUNT_CODE: "sourceAccountCode",
  SPLIT_ACCOUNT: "splitAccount",
  SPLIT_CONFIGURATION_UUID: "splitConfigurationUUID",
  SPLIT_CURRENCY: "splitCurrency",
  SPLIT_VALUE: "splitValue",
  SPLITS: "splits",
  STATE_OR_PROVINCE: "stateOrProvince",
  STATUS: "status",
  STOCK_EXCHANGE: "stockExchange",
  STOCK_NUMBER: "stockNumber",
  STOCK_TICKER: "stockTicker",
  STORE: "store",
  STORE_DETAIL: "storeDetail",
  STORE_NAME: "storeName",
  STORE_REFERENCE: "storeReference",
  STREET: "street",
  TAX_ID: "taxId",
  TIER: "tier",
  TIER_NUMBER: "tierNumber",
  TRANSFER_CODE: "transferCode",
  ULTIMATE_PARENT_COMPANY: "ultimateParentCompany",
  ULTIMATE_PARENT_COMPANY_ADDRESS_DETAILS:
    "ultimateParentCompanyAddressDetails",
  ULTIMATE_PARENT_COMPANY_ADDRESS_DETAILS_COUNTRY:
    "ultimateParentCompanyAddressDetailsCountry",
  ULTIMATE_PARENT_COMPANY_BUSINESS_DETAILS:
    "ultimateParentCompanyBusinessDetails",
  ULTIMATE_PARENT_COMPANY_BUSINESS_DETAILS_LEGAL_BUSINESS_NAME:
    "ultimateParentCompanyBusinessDetailsLegalBusinessName",
  ULTIMATE_PARENT_COMPANY_BUSINESS_DETAILS_REGISTRATION_NUMBER:
    "ultimateParentCompanyBusinessDetailsRegistrationNumber",
  ULTIMATE_PARENT_COMPANY_CODE: "ultimateParentCompanyCode",
  ULTIMATE_PARENT_COMPANY_STOCK_EXCHANGE: "ultimateParentCompanyStockExchange",
  ULTIMATE_PARENT_COMPANY_STOCK_NUMBER: "ultimateParentCompanyStockNumber",
  ULTIMATE_PARENT_COMPANY_STOCK_NUMBER_OR_STOCK_TICKER:
    "ultimateParentCompanyStockNumberOrStockTicker",
  ULTIMATE_PARENT_COMPANY_STOCK_TICKER: "ultimateParentCompanyStockTicker",
  UNKNOWN: "unknown",
  VALUE: "value",
  VERIFICATION_TYPE: "verificationType",
  VIRTUAL_ACCOUNT: "virtualAccount",
  VISA_NUMBER: "visaNumber",
  WEB_ADDRESS: "webAddress",
  YEAR: "year",
} as const;

export type PayoutAccountHolderRequest = {
  /**
   * The code of the account from which the payout is to be made.
   */
  accountCode: string;
  /**
   * The code of the Account Holder who owns the account from which the payout is to be made.
   * The Account Holder is the party to which the payout will be made.
   */
  accountHolderCode: string;
  /**
   * An object containing the currency and value of the payout.
   * If the account has multiple currencies, specify the currency to be used.
   * If the `bankAccountUUID` is provided in the request, the currency supported by the bank is used.
   * If the `payoutMethodCode` is provided in the request, the specified payout method is selected.
   */
  amount?: Amount;
  /**
   * The unique ID of the Bank Account held by the Account Holder to which the payout is to be made.
   * If left blank, a bank account is automatically selected.
   */
  bankAccountUUID?: string;
  /**
   * A description of the payout. Maximum 200 characters.
   * Allowed: **abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/?:().,'+ ";**
   */
  description?: string;
  /**
   * A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
   */
  merchantReference?: string;
  /**
   * The unique ID of the payout method held by the Account Holder to which the payout is to be made.
   * If left blank, a payout instrument is automatically selected.
   */
  payoutMethodCode?: string;
  /**
   * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
   */
  payoutSpeed?: "INSTANT" | "SAME_DAY" | "STANDARD";
};

/**
 * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
 */
export type payoutSpeed = "INSTANT" | "SAME_DAY" | "STANDARD";

/**
 * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
 */
export const payoutSpeed = {
  INSTANT: "INSTANT",
  SAME_DAY: "SAME_DAY",
  STANDARD: "STANDARD",
} as const;

export type PayoutAccountHolderResponse = {
  /**
   * The unique ID of the Bank Account to which the payout was made.
   */
  bankAccountUUID?: string;
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The value supplied by the executing user when initiating the transfer; may be used to link multiple transactions.
   */
  merchantReference?: string;
  /**
   * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
   */
  payoutSpeed?: "INSTANT" | "SAME_DAY" | "STANDARD";
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type RefundFundsTransferRequest = {
  /**
   * The amount to be transferred.
   */
  amount: Amount;
  /**
   * A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
   */
  merchantReference?: string;
  /**
   * A PSP reference of the original fund transfer.
   */
  originalReference: string;
};

export type RefundFundsTransferResponse = {
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The value supplied by the executing user when initiating the transfer refund; may be used to link multiple transactions.
   */
  merchantReference?: string;
  /**
   * The message of the response.
   */
  message?: string;
  /**
   * A PSP reference of the original fund transfer.
   */
  originalReference?: string;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type RefundNotPaidOutTransfersRequest = {
  /**
   * The code of the account from which to perform the refund(s).
   */
  accountCode: string;
  /**
   * The code of the Account Holder which owns the account from which to perform the refund(s).
   */
  accountHolderCode: string;
};

export type RefundNotPaidOutTransfersResponse = {
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type ServiceError = {
  /**
   * The error code mapped to the error message.
   */
  errorCode?: string;
  /**
   * The category of the error.
   */
  errorType?: string;
  /**
   * A short explanation of the issue.
   */
  message?: string;
  /**
   * The PSP reference of the payment.
   */
  pspReference?: string;
  /**
   * The HTTP response status.
   */
  status?: number;
};

export type SetupBeneficiaryRequest = {
  /**
   * The destination account code.
   */
  destinationAccountCode: string;
  /**
   * A value that can be supplied at the discretion of the executing user.
   */
  merchantReference?: string;
  /**
   * The benefactor account.
   */
  sourceAccountCode: string;
};

export type SetupBeneficiaryResponse = {
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type Split = {
  /**
   * Unique identifier of the account where the split amount should be sent. This is required if `type` is **MarketPlace** or **BalanceAccount**.
   *
   *
   */
  account?: string;
  /**
   * The amount of this split.
   */
  amount: SplitAmount;
  /**
   * A description of this split.
   */
  description?: string;
  /**
   * Your reference for the split, which you can use to link the split to other operations such as captures and refunds.
   *
   * This is required if `type` is **MarketPlace** or **BalanceAccount**. For the other types, we also recommend sending a reference so you can reconcile the split and the associated payment in the transaction overview and in the reports. If the reference is not provided, the split is reported as part of the aggregated [TransferBalance record type](https://docs.adyen.com/reporting/marketpay-payments-accounting-report) in Adyen for Platforms.
   */
  reference?: string;
  /**
   * The type of split.
   * Possible values: **Default**, **PaymentFee**, **VAT**, **Commission**, **MarketPlace**, **BalanceAccount**, **Remainder**, **Surcharge**, **Tip**.
   */
  type:
    | "BalanceAccount"
    | "Commission"
    | "Default"
    | "MarketPlace"
    | "PaymentFee"
    | "Remainder"
    | "Surcharge"
    | "Tip"
    | "VAT"
    | "Verification";
};

/**
 * The type of split.
 * Possible values: **Default**, **PaymentFee**, **VAT**, **Commission**, **MarketPlace**, **BalanceAccount**, **Remainder**, **Surcharge**, **Tip**.
 */
export type type =
  | "BalanceAccount"
  | "Commission"
  | "Default"
  | "MarketPlace"
  | "PaymentFee"
  | "Remainder"
  | "Surcharge"
  | "Tip"
  | "VAT"
  | "Verification";

/**
 * The type of split.
 * Possible values: **Default**, **PaymentFee**, **VAT**, **Commission**, **MarketPlace**, **BalanceAccount**, **Remainder**, **Surcharge**, **Tip**.
 */
export const type = {
  BALANCE_ACCOUNT: "BalanceAccount",
  COMMISSION: "Commission",
  DEFAULT: "Default",
  MARKET_PLACE: "MarketPlace",
  PAYMENT_FEE: "PaymentFee",
  REMAINDER: "Remainder",
  SURCHARGE: "Surcharge",
  TIP: "Tip",
  VAT: "VAT",
  VERIFICATION: "Verification",
} as const;

export type SplitAmount = {
  /**
   * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
   *
   * If this value is not provided, the currency in which the payment is made will be used.
   */
  currency?: string;
  /**
   * The amount in [minor units](https://docs.adyen.com/development-resources/currency-codes).
   */
  value: number;
};

export type Transaction = {
  /**
   * The amount of the transaction.
   */
  amount?: Amount;
  /**
   * The details of the bank account to where a payout was made.
   */
  bankAccountDetail?: BankAccountDetail;
  /**
   * The merchant reference of a related capture.
   */
  captureMerchantReference?: string;
  /**
   * The psp reference of a related capture.
   */
  capturePspReference?: string;
  /**
   * The date on which the transaction was performed.
   */
  creationDate?: Date;
  /**
   * A description of the transaction.
   */
  description?: string;
  /**
   * The code of the account to which funds were credited during an outgoing fund transfer.
   */
  destinationAccountCode?: string;
  /**
   * The psp reference of the related dispute.
   */
  disputePspReference?: string;
  /**
   * The reason code of a dispute.
   */
  disputeReasonCode?: string;
  /**
   * The merchant reference of a transaction.
   */
  merchantReference?: string;
  /**
   * The psp reference of the related authorisation or transfer.
   */
  paymentPspReference?: string;
  /**
   * The psp reference of the related payout.
   */
  payoutPspReference?: string;
  /**
   * The psp reference of a transaction.
   */
  pspReference?: string;
  /**
   * The code of the account from which funds were debited during an incoming fund transfer.
   */
  sourceAccountCode?: string;
  /**
   * The status of the transaction.
   * >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
   */
  transactionStatus?:
    | "BalanceNotPaidOutTransfer"
    | "BalancePlatformSweep"
    | "BalancePlatformSweepReturned"
    | "Chargeback"
    | "ChargebackCorrection"
    | "ChargebackCorrectionReceived"
    | "ChargebackReceived"
    | "ChargebackReversed"
    | "ChargebackReversedCorrection"
    | "ChargebackReversedCorrectionReceived"
    | "ChargebackReversedReceived"
    | "Converted"
    | "CreditClosed"
    | "CreditFailed"
    | "CreditReversed"
    | "CreditReversedReceived"
    | "CreditSuspended"
    | "Credited"
    | "DebitFailed"
    | "DebitReversedReceived"
    | "Debited"
    | "DebitedReversed"
    | "DepositCorrectionCredited"
    | "DepositCorrectionDebited"
    | "Fee"
    | "FundTransfer"
    | "FundTransferReversed"
    | "InvoiceDeductionCredited"
    | "InvoiceDeductionDebited"
    | "ManualCorrected"
    | "ManualCorrectionCredited"
    | "ManualCorrectionDebited"
    | "MerchantPayin"
    | "MerchantPayinReversed"
    | "Payout"
    | "PayoutReversed"
    | "PendingCredit"
    | "PendingDebit"
    | "PendingFundTransfer"
    | "ReCredited"
    | "ReCreditedReceived"
    | "SecondChargeback"
    | "SecondChargebackCorrection"
    | "SecondChargebackCorrectionReceived"
    | "SecondChargebackReceived";
  /**
   * The transfer code of the transaction.
   */
  transferCode?: string;
};

/**
 * The status of the transaction.
 * >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
 */
export type transactionStatus =
  | "BalanceNotPaidOutTransfer"
  | "BalancePlatformSweep"
  | "BalancePlatformSweepReturned"
  | "Chargeback"
  | "ChargebackCorrection"
  | "ChargebackCorrectionReceived"
  | "ChargebackReceived"
  | "ChargebackReversed"
  | "ChargebackReversedCorrection"
  | "ChargebackReversedCorrectionReceived"
  | "ChargebackReversedReceived"
  | "Converted"
  | "CreditClosed"
  | "CreditFailed"
  | "CreditReversed"
  | "CreditReversedReceived"
  | "CreditSuspended"
  | "Credited"
  | "DebitFailed"
  | "DebitReversedReceived"
  | "Debited"
  | "DebitedReversed"
  | "DepositCorrectionCredited"
  | "DepositCorrectionDebited"
  | "Fee"
  | "FundTransfer"
  | "FundTransferReversed"
  | "InvoiceDeductionCredited"
  | "InvoiceDeductionDebited"
  | "ManualCorrected"
  | "ManualCorrectionCredited"
  | "ManualCorrectionDebited"
  | "MerchantPayin"
  | "MerchantPayinReversed"
  | "Payout"
  | "PayoutReversed"
  | "PendingCredit"
  | "PendingDebit"
  | "PendingFundTransfer"
  | "ReCredited"
  | "ReCreditedReceived"
  | "SecondChargeback"
  | "SecondChargebackCorrection"
  | "SecondChargebackCorrectionReceived"
  | "SecondChargebackReceived";

/**
 * The status of the transaction.
 * >Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
 */
export const transactionStatus = {
  BALANCE_NOT_PAID_OUT_TRANSFER: "BalanceNotPaidOutTransfer",
  BALANCE_PLATFORM_SWEEP: "BalancePlatformSweep",
  BALANCE_PLATFORM_SWEEP_RETURNED: "BalancePlatformSweepReturned",
  CHARGEBACK: "Chargeback",
  CHARGEBACK_CORRECTION: "ChargebackCorrection",
  CHARGEBACK_CORRECTION_RECEIVED: "ChargebackCorrectionReceived",
  CHARGEBACK_RECEIVED: "ChargebackReceived",
  CHARGEBACK_REVERSED: "ChargebackReversed",
  CHARGEBACK_REVERSED_CORRECTION: "ChargebackReversedCorrection",
  CHARGEBACK_REVERSED_CORRECTION_RECEIVED:
    "ChargebackReversedCorrectionReceived",
  CHARGEBACK_REVERSED_RECEIVED: "ChargebackReversedReceived",
  CONVERTED: "Converted",
  CREDIT_CLOSED: "CreditClosed",
  CREDIT_FAILED: "CreditFailed",
  CREDIT_REVERSED: "CreditReversed",
  CREDIT_REVERSED_RECEIVED: "CreditReversedReceived",
  CREDIT_SUSPENDED: "CreditSuspended",
  CREDITED: "Credited",
  DEBIT_FAILED: "DebitFailed",
  DEBIT_REVERSED_RECEIVED: "DebitReversedReceived",
  DEBITED: "Debited",
  DEBITED_REVERSED: "DebitedReversed",
  DEPOSIT_CORRECTION_CREDITED: "DepositCorrectionCredited",
  DEPOSIT_CORRECTION_DEBITED: "DepositCorrectionDebited",
  FEE: "Fee",
  FUND_TRANSFER: "FundTransfer",
  FUND_TRANSFER_REVERSED: "FundTransferReversed",
  INVOICE_DEDUCTION_CREDITED: "InvoiceDeductionCredited",
  INVOICE_DEDUCTION_DEBITED: "InvoiceDeductionDebited",
  MANUAL_CORRECTED: "ManualCorrected",
  MANUAL_CORRECTION_CREDITED: "ManualCorrectionCredited",
  MANUAL_CORRECTION_DEBITED: "ManualCorrectionDebited",
  MERCHANT_PAYIN: "MerchantPayin",
  MERCHANT_PAYIN_REVERSED: "MerchantPayinReversed",
  PAYOUT: "Payout",
  PAYOUT_REVERSED: "PayoutReversed",
  PENDING_CREDIT: "PendingCredit",
  PENDING_DEBIT: "PendingDebit",
  PENDING_FUND_TRANSFER: "PendingFundTransfer",
  RE_CREDITED: "ReCredited",
  RE_CREDITED_RECEIVED: "ReCreditedReceived",
  SECOND_CHARGEBACK: "SecondChargeback",
  SECOND_CHARGEBACK_CORRECTION: "SecondChargebackCorrection",
  SECOND_CHARGEBACK_CORRECTION_RECEIVED: "SecondChargebackCorrectionReceived",
  SECOND_CHARGEBACK_RECEIVED: "SecondChargebackReceived",
} as const;

export type TransactionListForAccount = {
  /**
   * The account for which to retrieve the transactions.
   */
  accountCode: string;
  /**
   * The page of transactions to retrieve.
   * Each page lists fifty (50) transactions.  The most recent transactions are included on page 1.
   */
  page: number;
};

export type TransferFundsRequest = {
  /**
   * The amount to be transferred.
   */
  amount: Amount;
  /**
   * The code of the account to which the funds are to be credited.
   * >The state of the Account Holder of this account must be Active.
   */
  destinationAccountCode: string;
  /**
   * A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
   */
  merchantReference?: string;
  /**
   * The code of the account from which the funds are to be debited.
   * >The state of the Account Holder of this account must be Active and allow payouts.
   */
  sourceAccountCode: string;
  /**
   * The code related to the type of transfer being performed.
   * >The permitted codes differ for each platform account and are defined in their service level agreement.
   */
  transferCode: string;
};

export type TransferFundsResponse = {
  /**
   * Contains field validation errors that would prevent requests from being processed.
   */
  invalidFields?: Array<ErrorFieldType>;
  /**
   * The value supplied by the executing user when initiating the transfer; may be used to link multiple transactions.
   */
  merchantReference?: string;
  /**
   * The reference of a request. Can be used to uniquely identify the request.
   */
  pspReference?: string;
  /**
   * The result code.
   */
  resultCode?: string;
};

export type PostAccountHolderBalanceData = {
  body?: AccountHolderBalanceRequest;
};

export type PostAccountHolderBalanceResponse = AccountHolderBalanceResponse;

export type PostAccountHolderBalanceError = ServiceError;

export type PostAccountHolderTransactionListData = {
  body?: AccountHolderTransactionListRequest;
};

export type PostAccountHolderTransactionListResponse =
  AccountHolderTransactionListResponse;

export type PostAccountHolderTransactionListError = ServiceError;

export type PostDebitAccountHolderData = {
  body?: DebitAccountHolderRequest;
};

export type PostDebitAccountHolderResponse = DebitAccountHolderResponse;

export type PostDebitAccountHolderError = ServiceError;

export type PostPayoutAccountHolderData = {
  body?: PayoutAccountHolderRequest;
};

export type PostPayoutAccountHolderResponse = PayoutAccountHolderResponse;

export type PostPayoutAccountHolderError = ServiceError;

export type PostRefundFundsTransferData = {
  body?: RefundFundsTransferRequest;
};

export type PostRefundFundsTransferResponse = RefundFundsTransferResponse;

export type PostRefundFundsTransferError = ServiceError;

export type PostRefundNotPaidOutTransfersData = {
  body?: RefundNotPaidOutTransfersRequest;
};

export type PostRefundNotPaidOutTransfersResponse =
  RefundNotPaidOutTransfersResponse;

export type PostRefundNotPaidOutTransfersError = ServiceError;

export type PostSetupBeneficiaryData = {
  body?: SetupBeneficiaryRequest;
};

export type PostSetupBeneficiaryResponse = SetupBeneficiaryResponse;

export type PostSetupBeneficiaryError = ServiceError;

export type PostTransferFundsData = {
  body?: TransferFundsRequest;
};

export type PostTransferFundsResponse = TransferFundsResponse;

export type PostTransferFundsError = ServiceError;
